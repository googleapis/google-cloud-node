// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as securitycentersettingsserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.SecurityCenterSettingsServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.securityCenterSettingsServiceStub, undefined);
            await client.initialize();
            assert(client.securityCenterSettingsServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.securityCenterSettingsServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.securityCenterSettingsServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getServiceAccount', () => {
        it('invokes getServiceAccount without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ServiceAccount()
            );
            client.innerApiCalls.getServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ServiceAccount()
            );
            client.innerApiCalls.getServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceAccount(request), expectedError);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetServiceAccountRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getServiceAccount(request), expectedError);
        });
    });

    describe('getSettings', () => {
        it('invokes getSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.getSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.getSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.ISettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getSettings(request), expectedError);
        });
    });

    describe('updateSettings', () => {
        it('invokes updateSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.updateSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.updateSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.ISettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateSettings(request), expectedError);
        });
    });

    describe('resetSettings', () => {
        it('invokes resetSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.resetSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.resetSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.resetSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resetSettings(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.resetSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.resetSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.resetSettings(request), expectedError);
        });
    });

    describe('batchGetSettings', () => {
        it('invokes batchGetSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsResponse()
            );
            client.innerApiCalls.batchGetSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.batchGetSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchGetSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsResponse()
            );
            client.innerApiCalls.batchGetSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchGetSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IBatchGetSettingsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchGetSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchGetSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchGetSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchGetSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchGetSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchGetSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.batchGetSettings(request), expectedError);
        });
    });

    describe('calculateEffectiveSettings', () => {
        it('invokes calculateEffectiveSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.calculateEffectiveSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.calculateEffectiveSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.Settings()
            );
            client.innerApiCalls.calculateEffectiveSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.calculateEffectiveSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.ISettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.calculateEffectiveSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.calculateEffectiveSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.calculateEffectiveSettings(request), expectedError);
        });
    });

    describe('batchCalculateEffectiveSettings', () => {
        it('invokes batchCalculateEffectiveSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsResponse()
            );
            client.innerApiCalls.batchCalculateEffectiveSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.batchCalculateEffectiveSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchCalculateEffectiveSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsResponse()
            );
            client.innerApiCalls.batchCalculateEffectiveSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchCalculateEffectiveSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IBatchCalculateEffectiveSettingsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchCalculateEffectiveSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchCalculateEffectiveSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchCalculateEffectiveSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchCalculateEffectiveSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchCalculateEffectiveSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.BatchCalculateEffectiveSettingsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.batchCalculateEffectiveSettings(request), expectedError);
        });
    });

    describe('getComponentSettings', () => {
        it('invokes getComponentSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.getComponentSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getComponentSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getComponentSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.getComponentSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getComponentSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IComponentSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getComponentSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getComponentSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getComponentSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getComponentSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.GetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getComponentSettings(request), expectedError);
        });
    });

    describe('updateComponentSettings', () => {
        it('invokes updateComponentSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest()
            );
            request.componentSettings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest', ['componentSettings', 'name']);
            request.componentSettings.name = defaultValue1;
            const expectedHeaderRequestParams = `component_settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.updateComponentSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateComponentSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateComponentSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest()
            );
            request.componentSettings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest', ['componentSettings', 'name']);
            request.componentSettings.name = defaultValue1;
            const expectedHeaderRequestParams = `component_settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.updateComponentSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateComponentSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IComponentSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateComponentSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest()
            );
            request.componentSettings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest', ['componentSettings', 'name']);
            request.componentSettings.name = defaultValue1;
            const expectedHeaderRequestParams = `component_settings.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateComponentSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateComponentSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateComponentSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest()
            );
            request.componentSettings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.UpdateComponentSettingsRequest', ['componentSettings', 'name']);
            request.componentSettings.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateComponentSettings(request), expectedError);
        });
    });

    describe('resetComponentSettings', () => {
        it('invokes resetComponentSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.resetComponentSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.resetComponentSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetComponentSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.resetComponentSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resetComponentSettings(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetComponentSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.resetComponentSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.resetComponentSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resetComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resetComponentSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ResetComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.resetComponentSettings(request), expectedError);
        });
    });

    describe('calculateEffectiveComponentSettings', () => {
        it('invokes calculateEffectiveComponentSettings without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.calculateEffectiveComponentSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.calculateEffectiveComponentSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveComponentSettings without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ComponentSettings()
            );
            client.innerApiCalls.calculateEffectiveComponentSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.calculateEffectiveComponentSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IComponentSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveComponentSettings with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.calculateEffectiveComponentSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.calculateEffectiveComponentSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.calculateEffectiveComponentSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes calculateEffectiveComponentSettings with closed client', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.CalculateEffectiveComponentSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.calculateEffectiveComponentSettings(request), expectedError);
        });
    });

    describe('listDetectors', () => {
        it('invokes listDetectors without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
            ];
            client.innerApiCalls.listDetectors = stubSimpleCall(expectedResponse);
            const [response] = await client.listDetectors(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDetectors without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
            ];
            client.innerApiCalls.listDetectors = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDetectors(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.securitycenter.settings.v1beta1.IDetector[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDetectors with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDetectors = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDetectors(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDetectors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDetectorsStream without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
            ];
            client.descriptors.page.listDetectors.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDetectorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.securitycenter.settings.v1beta1.Detector[] = [];
                stream.on('data', (response: protos.google.cloud.securitycenter.settings.v1beta1.Detector) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDetectors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDetectors, request));
            assert(
                (client.descriptors.page.listDetectors.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDetectorsStream with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDetectors.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDetectorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.securitycenter.settings.v1beta1.Detector[] = [];
                stream.on('data', (response: protos.google.cloud.securitycenter.settings.v1beta1.Detector) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDetectors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDetectors, request));
            assert(
                (client.descriptors.page.listDetectors.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDetectors without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
              generateSampleMessage(new protos.google.cloud.securitycenter.settings.v1beta1.Detector()),
            ];
            client.descriptors.page.listDetectors.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.securitycenter.settings.v1beta1.IDetector[] = [];
            const iterable = client.listDetectorsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDetectors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDetectors.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDetectors with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListDetectorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDetectors.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDetectorsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.securitycenter.settings.v1beta1.IDetector[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDetectors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDetectors.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listComponents', () => {
        it('invokes listComponents without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listComponents = stubSimpleCall(expectedResponse);
            const [response] = await client.listComponents(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComponents without error using callback', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listComponents = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listComponents(
                    request,
                    (err?: Error|null, result?: string[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComponents with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listComponents = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listComponents(request), expectedError);
            const actualRequest = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComponents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComponentsStream without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listComponents.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listComponentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listComponents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listComponents, request));
            assert(
                (client.descriptors.page.listComponents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listComponentsStream with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listComponents.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listComponentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listComponents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listComponents, request));
            assert(
                (client.descriptors.page.listComponents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listComponents without error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listComponents.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: string[] = [];
            const iterable = client.listComponentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listComponents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listComponents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listComponents with error', async () => {
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.securitycenter.settings.v1beta1.ListComponentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listComponents.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listComponentsAsync(request);
            await assert.rejects(async () => {
                const responses: string[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listComponents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listComponents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('folderComponentSettings', () => {
            const fakePath = "/rendered/path/folderComponentSettings";
            const expectedParameters = {
                folder: "folderValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderComponentSettingsPath', () => {
                const result = client.folderComponentSettingsPath("folderValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderComponentSettingsName', () => {
                const result = client.matchFolderFromFolderComponentSettingsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromFolderComponentSettingsName', () => {
                const result = client.matchComponentFromFolderComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.folderComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderSettings', () => {
            const fakePath = "/rendered/path/folderSettings";
            const expectedParameters = {
                folder: "folderValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderSettingsPath', () => {
                const result = client.folderSettingsPath("folderValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderSettingsName', () => {
                const result = client.matchFolderFromFolderSettingsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organization', () => {
            const fakePath = "/rendered/path/organization";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationPath', () => {
                const result = client.organizationPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationName', () => {
                const result = client.matchOrganizationFromOrganizationName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationComponentSettings', () => {
            const fakePath = "/rendered/path/organizationComponentSettings";
            const expectedParameters = {
                organization: "organizationValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationComponentSettingsPath', () => {
                const result = client.organizationComponentSettingsPath("organizationValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationComponentSettingsName', () => {
                const result = client.matchOrganizationFromOrganizationComponentSettingsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromOrganizationComponentSettingsName', () => {
                const result = client.matchComponentFromOrganizationComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.organizationComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationSettings', () => {
            const fakePath = "/rendered/path/organizationSettings";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationSettingsPath', () => {
                const result = client.organizationSettingsPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationSettingsName', () => {
                const result = client.matchOrganizationFromOrganizationSettingsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectComponentSettings', () => {
            const fakePath = "/rendered/path/projectComponentSettings";
            const expectedParameters = {
                project: "projectValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectComponentSettingsPath', () => {
                const result = client.projectComponentSettingsPath("projectValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectComponentSettingsName', () => {
                const result = client.matchProjectFromProjectComponentSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromProjectComponentSettingsName', () => {
                const result = client.matchComponentFromProjectComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.projectComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationClusterComponentSettings', () => {
            const fakePath = "/rendered/path/projectLocationClusterComponentSettings";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationClusterComponentSettingsPath', () => {
                const result = client.projectLocationClusterComponentSettingsPath("projectValue", "locationValue", "clusterValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationClusterComponentSettingsName', () => {
                const result = client.matchProjectFromProjectLocationClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationClusterComponentSettingsName', () => {
                const result = client.matchLocationFromProjectLocationClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectLocationClusterComponentSettingsName', () => {
                const result = client.matchClusterFromProjectLocationClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromProjectLocationClusterComponentSettingsName', () => {
                const result = client.matchComponentFromProjectLocationClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.projectLocationClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationClusterSettings', () => {
            const fakePath = "/rendered/path/projectLocationClusterSettings";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationClusterSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationClusterSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationClusterSettingsPath', () => {
                const result = client.projectLocationClusterSettingsPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationClusterSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationClusterSettingsName', () => {
                const result = client.matchProjectFromProjectLocationClusterSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationClusterSettingsName', () => {
                const result = client.matchLocationFromProjectLocationClusterSettingsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectLocationClusterSettingsName', () => {
                const result = client.matchClusterFromProjectLocationClusterSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectLocationClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectRegionClusterComponentSettings', () => {
            const fakePath = "/rendered/path/projectRegionClusterComponentSettings";
            const expectedParameters = {
                project: "projectValue",
                region: "regionValue",
                cluster: "clusterValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectRegionClusterComponentSettingsPath', () => {
                const result = client.projectRegionClusterComponentSettingsPath("projectValue", "regionValue", "clusterValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectRegionClusterComponentSettingsName', () => {
                const result = client.matchProjectFromProjectRegionClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRegionFromProjectRegionClusterComponentSettingsName', () => {
                const result = client.matchRegionFromProjectRegionClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "regionValue");
                assert((client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectRegionClusterComponentSettingsName', () => {
                const result = client.matchClusterFromProjectRegionClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromProjectRegionClusterComponentSettingsName', () => {
                const result = client.matchComponentFromProjectRegionClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.projectRegionClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectRegionClusterSettings', () => {
            const fakePath = "/rendered/path/projectRegionClusterSettings";
            const expectedParameters = {
                project: "projectValue",
                region: "regionValue",
                cluster: "clusterValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectRegionClusterSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectRegionClusterSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectRegionClusterSettingsPath', () => {
                const result = client.projectRegionClusterSettingsPath("projectValue", "regionValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectRegionClusterSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectRegionClusterSettingsName', () => {
                const result = client.matchProjectFromProjectRegionClusterSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectRegionClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRegionFromProjectRegionClusterSettingsName', () => {
                const result = client.matchRegionFromProjectRegionClusterSettingsName(fakePath);
                assert.strictEqual(result, "regionValue");
                assert((client.pathTemplates.projectRegionClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectRegionClusterSettingsName', () => {
                const result = client.matchClusterFromProjectRegionClusterSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectRegionClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectSettings', () => {
            const fakePath = "/rendered/path/projectSettings";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectSettingsPath', () => {
                const result = client.projectSettingsPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectSettingsName', () => {
                const result = client.matchProjectFromProjectSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectZoneClusterComponentSettings', () => {
            const fakePath = "/rendered/path/projectZoneClusterComponentSettings";
            const expectedParameters = {
                project: "projectValue",
                zone: "zoneValue",
                cluster: "clusterValue",
                component: "componentValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectZoneClusterComponentSettingsPath', () => {
                const result = client.projectZoneClusterComponentSettingsPath("projectValue", "zoneValue", "clusterValue", "componentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectZoneClusterComponentSettingsName', () => {
                const result = client.matchProjectFromProjectZoneClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchZoneFromProjectZoneClusterComponentSettingsName', () => {
                const result = client.matchZoneFromProjectZoneClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "zoneValue");
                assert((client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectZoneClusterComponentSettingsName', () => {
                const result = client.matchClusterFromProjectZoneClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComponentFromProjectZoneClusterComponentSettingsName', () => {
                const result = client.matchComponentFromProjectZoneClusterComponentSettingsName(fakePath);
                assert.strictEqual(result, "componentValue");
                assert((client.pathTemplates.projectZoneClusterComponentSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectZoneClusterSettings', () => {
            const fakePath = "/rendered/path/projectZoneClusterSettings";
            const expectedParameters = {
                project: "projectValue",
                zone: "zoneValue",
                cluster: "clusterValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectZoneClusterSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectZoneClusterSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectZoneClusterSettingsPath', () => {
                const result = client.projectZoneClusterSettingsPath("projectValue", "zoneValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectZoneClusterSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectZoneClusterSettingsName', () => {
                const result = client.matchProjectFromProjectZoneClusterSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectZoneClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchZoneFromProjectZoneClusterSettingsName', () => {
                const result = client.matchZoneFromProjectZoneClusterSettingsName(fakePath);
                assert.strictEqual(result, "zoneValue");
                assert((client.pathTemplates.projectZoneClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromProjectZoneClusterSettingsName', () => {
                const result = client.matchClusterFromProjectZoneClusterSettingsName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.projectZoneClusterSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceAccount', () => {
            const fakePath = "/rendered/path/serviceAccount";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new securitycentersettingsserviceModule.v1beta1.SecurityCenterSettingsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.serviceAccountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceAccountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceAccountPath', () => {
                const result = client.serviceAccountPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceAccountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromServiceAccountName', () => {
                const result = client.matchOrganizationFromServiceAccountName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.serviceAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
