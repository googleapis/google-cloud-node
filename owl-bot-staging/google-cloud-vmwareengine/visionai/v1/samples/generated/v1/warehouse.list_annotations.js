// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main() {
  // [START visionai_v1_generated_Warehouse_ListAnnotations_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The parent, which owns this collection of annotations.
   *  Format:
   *  projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
   */
  // const parent = 'abc123'
  /**
   *  The maximum number of annotations to return. The service may return fewer
   *  than this value. If unspecified, at most 50 annotations will be returned.
   *  The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  // const pageSize = 1234
  /**
   *  A page token, received from a previous `ListAnnotations` call.
   *  Provide this to retrieve the subsequent page.
   *  When paginating, all other parameters provided to `ListAnnotations` must
   *  match the call that provided the page token.
   */
  // const pageToken = 'abc123'
  /**
   *  The filter applied to the returned list.
   *  We only support filtering for the following fields:
   *  `partition.temporal_partition.start_time`,
   *  `partition.temporal_partition.end_time`, and `key`.
   *  Timestamps are specified in the RFC-3339 format, and only one restriction
   *  may be applied per field, joined by conjunctions.
   *  Format:
   *  "partition.temporal_partition.start_time > "2012-04-21T11:30:00-04:00" AND
   *  partition.temporal_partition.end_time < "2012-04-22T11:30:00-04:00" AND
   *  key = "example_key""
   */
  // const filter = 'abc123'

  // Imports the Visionai library
  const {WarehouseClient} = require('@google-cloud/visionai').v1;

  // Instantiates a client
  const visionaiClient = new WarehouseClient();

  async function callListAnnotations() {
    // Construct request
    const request = {
    };

    // Run request
    const iterable = await visionaiClient.listAnnotationsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListAnnotations();
  // [END visionai_v1_generated_Warehouse_ListAnnotations_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
