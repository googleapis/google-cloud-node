// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/app_platform_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './app_platform_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export class AppPlatformClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  appPlatformStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AppPlatformClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AppPlatformClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AppPlatformClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      analysisPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/analyses/{analysis}'
      ),
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}'
      ),
      applicationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}'
      ),
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/channels/{channel}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      corpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}'
      ),
      dataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}'
      ),
      draftPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/drafts/{draft}'
      ),
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/events/{event}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/instances/{instance}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      searchConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}'
      ),
      seriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/series/{series}'
      ),
      streamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/streams/{stream}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listApplications:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'applications'),
      listInstances:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'instances'),
      listDrafts:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'drafts'),
      listProcessors:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processors')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/v1/{name=projects/*/locations/*/warehouseOperations/*}',},{get: '/v1/{name=projects/*/locations/*/corpora/*/assets/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createApplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Application') as gax.protobuf.Type;
    const createApplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const updateApplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Application') as gax.protobuf.Type;
    const updateApplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteApplicationResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteApplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const deployApplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.DeployApplicationResponse') as gax.protobuf.Type;
    const deployApplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const undeployApplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.UndeployApplicationResponse') as gax.protobuf.Type;
    const undeployApplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const addApplicationStreamInputResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.AddApplicationStreamInputResponse') as gax.protobuf.Type;
    const addApplicationStreamInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const removeApplicationStreamInputResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.RemoveApplicationStreamInputResponse') as gax.protobuf.Type;
    const removeApplicationStreamInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const updateApplicationStreamInputResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.UpdateApplicationStreamInputResponse') as gax.protobuf.Type;
    const updateApplicationStreamInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const createApplicationInstancesResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.CreateApplicationInstancesResponse') as gax.protobuf.Type;
    const createApplicationInstancesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteApplicationInstancesResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Instance') as gax.protobuf.Type;
    const deleteApplicationInstancesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const updateApplicationInstancesResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.UpdateApplicationInstancesResponse') as gax.protobuf.Type;
    const updateApplicationInstancesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const createDraftResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Draft') as gax.protobuf.Type;
    const createDraftMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const updateDraftResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Draft') as gax.protobuf.Type;
    const updateDraftMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteDraftResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteDraftMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const createProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Processor') as gax.protobuf.Type;
    const createProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const updateProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.Processor') as gax.protobuf.Type;
    const updateProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteProcessorResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createApplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createApplicationResponse.decode.bind(createApplicationResponse),
        createApplicationMetadata.decode.bind(createApplicationMetadata)),
      updateApplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateApplicationResponse.decode.bind(updateApplicationResponse),
        updateApplicationMetadata.decode.bind(updateApplicationMetadata)),
      deleteApplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteApplicationResponse.decode.bind(deleteApplicationResponse),
        deleteApplicationMetadata.decode.bind(deleteApplicationMetadata)),
      deployApplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployApplicationResponse.decode.bind(deployApplicationResponse),
        deployApplicationMetadata.decode.bind(deployApplicationMetadata)),
      undeployApplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeployApplicationResponse.decode.bind(undeployApplicationResponse),
        undeployApplicationMetadata.decode.bind(undeployApplicationMetadata)),
      addApplicationStreamInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        addApplicationStreamInputResponse.decode.bind(addApplicationStreamInputResponse),
        addApplicationStreamInputMetadata.decode.bind(addApplicationStreamInputMetadata)),
      removeApplicationStreamInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        removeApplicationStreamInputResponse.decode.bind(removeApplicationStreamInputResponse),
        removeApplicationStreamInputMetadata.decode.bind(removeApplicationStreamInputMetadata)),
      updateApplicationStreamInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateApplicationStreamInputResponse.decode.bind(updateApplicationStreamInputResponse),
        updateApplicationStreamInputMetadata.decode.bind(updateApplicationStreamInputMetadata)),
      createApplicationInstances: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createApplicationInstancesResponse.decode.bind(createApplicationInstancesResponse),
        createApplicationInstancesMetadata.decode.bind(createApplicationInstancesMetadata)),
      deleteApplicationInstances: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteApplicationInstancesResponse.decode.bind(deleteApplicationInstancesResponse),
        deleteApplicationInstancesMetadata.decode.bind(deleteApplicationInstancesMetadata)),
      updateApplicationInstances: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateApplicationInstancesResponse.decode.bind(updateApplicationInstancesResponse),
        updateApplicationInstancesMetadata.decode.bind(updateApplicationInstancesMetadata)),
      createDraft: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDraftResponse.decode.bind(createDraftResponse),
        createDraftMetadata.decode.bind(createDraftMetadata)),
      updateDraft: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDraftResponse.decode.bind(updateDraftResponse),
        updateDraftMetadata.decode.bind(updateDraftMetadata)),
      deleteDraft: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDraftResponse.decode.bind(deleteDraftResponse),
        deleteDraftMetadata.decode.bind(deleteDraftMetadata)),
      createProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createProcessorResponse.decode.bind(createProcessorResponse),
        createProcessorMetadata.decode.bind(createProcessorMetadata)),
      updateProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateProcessorResponse.decode.bind(updateProcessorResponse),
        updateProcessorMetadata.decode.bind(updateProcessorMetadata)),
      deleteProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteProcessorResponse.decode.bind(deleteProcessorResponse),
        deleteProcessorMetadata.decode.bind(deleteProcessorMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.visionai.v1.AppPlatform', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.appPlatformStub) {
      return this.appPlatformStub;
    }

    // Put together the "service stub" for
    // google.cloud.visionai.v1.AppPlatform.
    this.appPlatformStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.visionai.v1.AppPlatform') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.visionai.v1.AppPlatform,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const appPlatformStubMethods =
        ['listApplications', 'getApplication', 'createApplication', 'updateApplication', 'deleteApplication', 'deployApplication', 'undeployApplication', 'addApplicationStreamInput', 'removeApplicationStreamInput', 'updateApplicationStreamInput', 'listInstances', 'getInstance', 'createApplicationInstances', 'deleteApplicationInstances', 'updateApplicationInstances', 'listDrafts', 'getDraft', 'createDraft', 'updateDraft', 'deleteDraft', 'listProcessors', 'listPrebuiltProcessors', 'getProcessor', 'createProcessor', 'updateProcessor', 'deleteProcessor'];
    for (const methodName of appPlatformStubMethods) {
      const callPromise = this.appPlatformStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.appPlatformStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'visionai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'visionai.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Application.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Application]{@link google.cloud.visionai.v1.Application}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.get_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_GetApplication_async
 */
  getApplication(
      request?: protos.google.cloud.visionai.v1.IGetApplicationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IApplication,
        protos.google.cloud.visionai.v1.IGetApplicationRequest|undefined, {}|undefined
      ]>;
  getApplication(
      request: protos.google.cloud.visionai.v1.IGetApplicationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1.IApplication,
          protos.google.cloud.visionai.v1.IGetApplicationRequest|null|undefined,
          {}|null|undefined>): void;
  getApplication(
      request: protos.google.cloud.visionai.v1.IGetApplicationRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1.IApplication,
          protos.google.cloud.visionai.v1.IGetApplicationRequest|null|undefined,
          {}|null|undefined>): void;
  getApplication(
      request?: protos.google.cloud.visionai.v1.IGetApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1.IApplication,
          protos.google.cloud.visionai.v1.IGetApplicationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1.IApplication,
          protos.google.cloud.visionai.v1.IGetApplicationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1.IApplication,
        protos.google.cloud.visionai.v1.IGetApplicationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getApplication(request, options, callback);
  }
/**
 * Gets details of a single Instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Instance]{@link google.cloud.visionai.v1.Instance}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.get_instance.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_GetInstance_async
 */
  getInstance(
      request?: protos.google.cloud.visionai.v1.IGetInstanceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IInstance,
        protos.google.cloud.visionai.v1.IGetInstanceRequest|undefined, {}|undefined
      ]>;
  getInstance(
      request: protos.google.cloud.visionai.v1.IGetInstanceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1.IInstance,
          protos.google.cloud.visionai.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>): void;
  getInstance(
      request: protos.google.cloud.visionai.v1.IGetInstanceRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1.IInstance,
          protos.google.cloud.visionai.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>): void;
  getInstance(
      request?: protos.google.cloud.visionai.v1.IGetInstanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1.IInstance,
          protos.google.cloud.visionai.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1.IInstance,
          protos.google.cloud.visionai.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1.IInstance,
        protos.google.cloud.visionai.v1.IGetInstanceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }
/**
 * Gets details of a single Draft.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Draft]{@link google.cloud.visionai.v1.Draft}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.get_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_GetDraft_async
 */
  getDraft(
      request?: protos.google.cloud.visionai.v1.IGetDraftRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IDraft,
        protos.google.cloud.visionai.v1.IGetDraftRequest|undefined, {}|undefined
      ]>;
  getDraft(
      request: protos.google.cloud.visionai.v1.IGetDraftRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1.IDraft,
          protos.google.cloud.visionai.v1.IGetDraftRequest|null|undefined,
          {}|null|undefined>): void;
  getDraft(
      request: protos.google.cloud.visionai.v1.IGetDraftRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1.IDraft,
          protos.google.cloud.visionai.v1.IGetDraftRequest|null|undefined,
          {}|null|undefined>): void;
  getDraft(
      request?: protos.google.cloud.visionai.v1.IGetDraftRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1.IDraft,
          protos.google.cloud.visionai.v1.IGetDraftRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1.IDraft,
          protos.google.cloud.visionai.v1.IGetDraftRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1.IDraft,
        protos.google.cloud.visionai.v1.IGetDraftRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getDraft(request, options, callback);
  }
/**
 * ListPrebuiltProcessors is a custom pass-through verb that Lists Prebuilt
 * Processors.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent path.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListPrebuiltProcessorsResponse]{@link google.cloud.visionai.v1.ListPrebuiltProcessorsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.list_prebuilt_processors.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_ListPrebuiltProcessors_async
 */
  listPrebuiltProcessors(
      request?: protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
        protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|undefined, {}|undefined
      ]>;
  listPrebuiltProcessors(
      request: protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|null|undefined,
          {}|null|undefined>): void;
  listPrebuiltProcessors(
      request: protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|null|undefined,
          {}|null|undefined>): void;
  listPrebuiltProcessors(
      request?: protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
          protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1.IListPrebuiltProcessorsResponse,
        protos.google.cloud.visionai.v1.IListPrebuiltProcessorsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listPrebuiltProcessors(request, options, callback);
  }
/**
 * Gets details of a single Processor.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Processor]{@link google.cloud.visionai.v1.Processor}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.get_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_GetProcessor_async
 */
  getProcessor(
      request?: protos.google.cloud.visionai.v1.IGetProcessorRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IProcessor,
        protos.google.cloud.visionai.v1.IGetProcessorRequest|undefined, {}|undefined
      ]>;
  getProcessor(
      request: protos.google.cloud.visionai.v1.IGetProcessorRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1.IProcessor,
          protos.google.cloud.visionai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessor(
      request: protos.google.cloud.visionai.v1.IGetProcessorRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1.IProcessor,
          protos.google.cloud.visionai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessor(
      request?: protos.google.cloud.visionai.v1.IGetProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1.IProcessor,
          protos.google.cloud.visionai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1.IProcessor,
          protos.google.cloud.visionai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1.IProcessor,
        protos.google.cloud.visionai.v1.IGetProcessorRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getProcessor(request, options, callback);
  }

/**
 * Creates a new Application in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.applicationId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1.Application} request.application
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateApplication_async
 */
  createApplication(
      request?: protos.google.cloud.visionai.v1.ICreateApplicationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createApplication(
      request: protos.google.cloud.visionai.v1.ICreateApplicationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createApplication(
      request: protos.google.cloud.visionai.v1.ICreateApplicationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createApplication(
      request?: protos.google.cloud.visionai.v1.ICreateApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createApplication(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createApplication()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateApplication_async
 */
  async checkCreateApplicationProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Application, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createApplication, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Application, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Application.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   Application resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1.Application} request.application
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplication_async
 */
  updateApplication(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateApplication(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplication(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplication(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IApplication, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'application.name': request.application!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateApplication(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateApplication()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplication_async
 */
  async checkUpdateApplicationProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Application, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateApplication, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Application, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Deletes a single Application.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.force]
 *   Optional. If set to true, any instances and drafts from this application will also be
 *   deleted. (Otherwise, the request will only work if the application has no
 *   instances and drafts.)
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteApplication_async
 */
  deleteApplication(
      request?: protos.google.cloud.visionai.v1.IDeleteApplicationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteApplication(
      request: protos.google.cloud.visionai.v1.IDeleteApplicationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteApplication(
      request: protos.google.cloud.visionai.v1.IDeleteApplicationRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteApplication(
      request?: protos.google.cloud.visionai.v1.IDeleteApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteApplication(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteApplication()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteApplication_async
 */
  async checkDeleteApplicationProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteApplication, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Deploys a single Application.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the application graph, but do not
 *   actually deploy it.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.enableMonitoring]
 *   Optional. Whether or not to enable monitoring for the application on deployment.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.deploy_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeployApplication_async
 */
  deployApplication(
      request?: protos.google.cloud.visionai.v1.IDeployApplicationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deployApplication(
      request: protos.google.cloud.visionai.v1.IDeployApplicationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployApplication(
      request: protos.google.cloud.visionai.v1.IDeployApplicationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployApplication(
      request?: protos.google.cloud.visionai.v1.IDeployApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deployApplication(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deployApplication()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.deploy_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeployApplication_async
 */
  async checkDeployApplicationProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.DeployApplicationResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deployApplication, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.DeployApplicationResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Undeploys a single Application.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.undeploy_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UndeployApplication_async
 */
  undeployApplication(
      request?: protos.google.cloud.visionai.v1.IUndeployApplicationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  undeployApplication(
      request: protos.google.cloud.visionai.v1.IUndeployApplicationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeployApplication(
      request: protos.google.cloud.visionai.v1.IUndeployApplicationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeployApplication(
      request?: protos.google.cloud.visionai.v1.IUndeployApplicationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.undeployApplication(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `undeployApplication()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.undeploy_application.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UndeployApplication_async
 */
  async checkUndeployApplicationProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.UndeployApplicationResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeployApplication, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.UndeployApplicationResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Adds target stream input to the Application.
 * If the Application is deployed, the corresponding new Application instance
 * will be created. If the stream has already been in the Application, the RPC
 * will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {number[]} request.applicationStreamInputs
 *   The stream inputs to add, the stream resource name is the key of each
 *   StreamInput, and it must be unique within each application.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.add_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_AddApplicationStreamInput_async
 */
  addApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IAddApplicationStreamInputRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  addApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IAddApplicationStreamInputRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  addApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IAddApplicationStreamInputRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  addApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IAddApplicationStreamInputRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.addApplicationStreamInput(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `addApplicationStreamInput()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.add_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_AddApplicationStreamInput_async
 */
  async checkAddApplicationStreamInputProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.AddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.addApplicationStreamInput, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.AddApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Remove target stream input to the Application, if the Application is
 * deployed, the corresponding instance based will be deleted. If the stream
 * is not in the Application, the RPC will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {number[]} request.targetStreamInputs
 *   The target stream to remove.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.remove_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_RemoveApplicationStreamInput_async
 */
  removeApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  removeApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  removeApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  removeApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.removeApplicationStreamInput(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `removeApplicationStreamInput()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.remove_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_RemoveApplicationStreamInput_async
 */
  async checkRemoveApplicationStreamInputProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.RemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.removeApplicationStreamInput, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.RemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Update target stream input to the Application, if the Application is
 * deployed, the corresponding instance based will be deployed. For
 * CreateOrUpdate behavior, set allow_missing to true.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {number[]} request.applicationStreamInputs
 *   The stream inputs to update, the stream resource name is the key of each
 *   StreamInput, and it must be unique within each application.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} request.allowMissing
 *   If true, UpdateApplicationStreamInput will insert stream input to
 *   application even if the target stream is not included in the application.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplicationStreamInput_async
 */
  updateApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplicationStreamInput(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplicationStreamInput(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateApplicationStreamInput(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateApplicationStreamInput()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application_stream_input.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplicationStreamInput_async
 */
  async checkUpdateApplicationStreamInputProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.UpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateApplicationStreamInput, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.UpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Adds target stream input to the Application.
 * If the Application is deployed, the corresponding new Application instance
 * will be created. If the stream has already been in the Application, the RPC
 * will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {number[]} request.applicationInstances
 *   Required. The resources being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateApplicationInstances_async
 */
  createApplicationInstances(
      request?: protos.google.cloud.visionai.v1.ICreateApplicationInstancesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createApplicationInstances(
      request: protos.google.cloud.visionai.v1.ICreateApplicationInstancesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createApplicationInstances(
      request: protos.google.cloud.visionai.v1.ICreateApplicationInstancesRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createApplicationInstances(
      request?: protos.google.cloud.visionai.v1.ICreateApplicationInstancesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createApplicationInstances(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createApplicationInstances()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateApplicationInstances_async
 */
  async checkCreateApplicationInstancesProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.CreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createApplicationInstances, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.CreateApplicationInstancesResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Remove target stream input to the Application, if the Application is
 * deployed, the corresponding instance based will be deleted. If the stream
 * is not in the Application, the RPC will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {string[]} request.instanceIds
 *   Required. Id of the requesting object.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteApplicationInstances_async
 */
  deleteApplicationInstances(
      request?: protos.google.cloud.visionai.v1.IDeleteApplicationInstancesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteApplicationInstances(
      request: protos.google.cloud.visionai.v1.IDeleteApplicationInstancesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteApplicationInstances(
      request: protos.google.cloud.visionai.v1.IDeleteApplicationInstancesRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteApplicationInstances(
      request?: protos.google.cloud.visionai.v1.IDeleteApplicationInstancesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IInstance, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteApplicationInstances(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteApplicationInstances()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteApplicationInstances_async
 */
  async checkDeleteApplicationInstancesProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Instance, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteApplicationInstances, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Instance, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Adds target stream input to the Application.
 * If the Application is deployed, the corresponding new Application instance
 * will be created. If the stream has already been in the Application, the RPC
 * will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. the name of the application to retrieve.
 *   Format:
 *   "projects/{project}/locations/{location}/applications/{application}"
 * @param {number[]} request.applicationInstances
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} request.allowMissing
 *   If true, Update Request will create one resource if the target resource
 *   doesn't exist, this time, the field_mask will be ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplicationInstances_async
 */
  updateApplicationInstances(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationInstancesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateApplicationInstances(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationInstancesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplicationInstances(
      request: protos.google.cloud.visionai.v1.IUpdateApplicationInstancesRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateApplicationInstances(
      request?: protos.google.cloud.visionai.v1.IUpdateApplicationInstancesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateApplicationInstances(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateApplicationInstances()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_application_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateApplicationInstances_async
 */
  async checkUpdateApplicationInstancesProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.UpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateApplicationInstances, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.UpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Creates a new Draft in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.draftId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1.Draft} request.draft
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateDraft_async
 */
  createDraft(
      request?: protos.google.cloud.visionai.v1.ICreateDraftRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createDraft(
      request: protos.google.cloud.visionai.v1.ICreateDraftRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDraft(
      request: protos.google.cloud.visionai.v1.ICreateDraftRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDraft(
      request?: protos.google.cloud.visionai.v1.ICreateDraftRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createDraft(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createDraft()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateDraft_async
 */
  async checkCreateDraftProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Draft, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDraft, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Draft, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Draft.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   Draft resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1.Draft} request.draft
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} request.allowMissing
 *   If true, UpdateDraftRequest will create one resource if the target resource
 *   doesn't exist, this time, the field_mask will be ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateDraft_async
 */
  updateDraft(
      request?: protos.google.cloud.visionai.v1.IUpdateDraftRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateDraft(
      request: protos.google.cloud.visionai.v1.IUpdateDraftRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDraft(
      request: protos.google.cloud.visionai.v1.IUpdateDraftRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDraft(
      request?: protos.google.cloud.visionai.v1.IUpdateDraftRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IDraft, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'draft.name': request.draft!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateDraft(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateDraft()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateDraft_async
 */
  async checkUpdateDraftProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Draft, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDraft, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Draft, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Deletes a single Draft.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteDraft_async
 */
  deleteDraft(
      request?: protos.google.cloud.visionai.v1.IDeleteDraftRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteDraft(
      request: protos.google.cloud.visionai.v1.IDeleteDraftRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDraft(
      request: protos.google.cloud.visionai.v1.IDeleteDraftRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDraft(
      request?: protos.google.cloud.visionai.v1.IDeleteDraftRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteDraft(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteDraft()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_draft.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteDraft_async
 */
  async checkDeleteDraftProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDraft, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Creates a new Processor in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.processorId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1.Processor} request.processor
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateProcessor_async
 */
  createProcessor(
      request?: protos.google.cloud.visionai.v1.ICreateProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createProcessor(
      request: protos.google.cloud.visionai.v1.ICreateProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createProcessor(
      request: protos.google.cloud.visionai.v1.ICreateProcessorRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createProcessor(
      request?: protos.google.cloud.visionai.v1.ICreateProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.create_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_CreateProcessor_async
 */
  async checkCreateProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Processor, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createProcessor, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Processor, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Processor.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   Processor resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1.Processor} request.processor
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateProcessor_async
 */
  updateProcessor(
      request?: protos.google.cloud.visionai.v1.IUpdateProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateProcessor(
      request: protos.google.cloud.visionai.v1.IUpdateProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateProcessor(
      request: protos.google.cloud.visionai.v1.IUpdateProcessorRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateProcessor(
      request?: protos.google.cloud.visionai.v1.IUpdateProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1.IProcessor, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'processor.name': request.processor!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.update_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_UpdateProcessor_async
 */
  async checkUpdateProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1.Processor, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateProcessor, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1.Processor, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
/**
 * Deletes a single Processor.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteProcessor_async
 */
  deleteProcessor(
      request?: protos.google.cloud.visionai.v1.IDeleteProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteProcessor(
      request: protos.google.cloud.visionai.v1.IDeleteProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteProcessor(
      request: protos.google.cloud.visionai.v1.IDeleteProcessorRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteProcessor(
      request?: protos.google.cloud.visionai.v1.IDeleteProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.delete_processor.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_DeleteProcessor_async
 */
  async checkDeleteProcessorProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteProcessor, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1.OperationMetadata>;
  }
 /**
 * Lists Applications in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListApplicationsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Application]{@link google.cloud.visionai.v1.Application}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listApplicationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listApplications(
      request?: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IApplication[],
        protos.google.cloud.visionai.v1.IListApplicationsRequest|null,
        protos.google.cloud.visionai.v1.IListApplicationsResponse
      ]>;
  listApplications(
      request: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListApplicationsRequest,
          protos.google.cloud.visionai.v1.IListApplicationsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IApplication>): void;
  listApplications(
      request: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListApplicationsRequest,
          protos.google.cloud.visionai.v1.IListApplicationsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IApplication>): void;
  listApplications(
      request?: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1.IListApplicationsRequest,
          protos.google.cloud.visionai.v1.IListApplicationsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IApplication>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1.IListApplicationsRequest,
          protos.google.cloud.visionai.v1.IListApplicationsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IApplication>):
      Promise<[
        protos.google.cloud.visionai.v1.IApplication[],
        protos.google.cloud.visionai.v1.IListApplicationsRequest|null,
        protos.google.cloud.visionai.v1.IListApplicationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listApplications(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListApplicationsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Application]{@link google.cloud.visionai.v1.Application} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listApplicationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listApplicationsStream(
      request?: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listApplications'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApplications.createStream(
      this.innerApiCalls.listApplications as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listApplications`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListApplicationsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Application]{@link google.cloud.visionai.v1.Application}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.list_applications.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_ListApplications_async
 */
  listApplicationsAsync(
      request?: protos.google.cloud.visionai.v1.IListApplicationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1.IApplication>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listApplications'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApplications.asyncIterate(
      this.innerApiCalls['listApplications'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1.IApplication>;
  }
 /**
 * Lists Instances in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInstancesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Instance]{@link google.cloud.visionai.v1.Instance}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listInstancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listInstances(
      request?: protos.google.cloud.visionai.v1.IListInstancesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IInstance[],
        protos.google.cloud.visionai.v1.IListInstancesRequest|null,
        protos.google.cloud.visionai.v1.IListInstancesResponse
      ]>;
  listInstances(
      request: protos.google.cloud.visionai.v1.IListInstancesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListInstancesRequest,
          protos.google.cloud.visionai.v1.IListInstancesResponse|null|undefined,
          protos.google.cloud.visionai.v1.IInstance>): void;
  listInstances(
      request: protos.google.cloud.visionai.v1.IListInstancesRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListInstancesRequest,
          protos.google.cloud.visionai.v1.IListInstancesResponse|null|undefined,
          protos.google.cloud.visionai.v1.IInstance>): void;
  listInstances(
      request?: protos.google.cloud.visionai.v1.IListInstancesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1.IListInstancesRequest,
          protos.google.cloud.visionai.v1.IListInstancesResponse|null|undefined,
          protos.google.cloud.visionai.v1.IInstance>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1.IListInstancesRequest,
          protos.google.cloud.visionai.v1.IListInstancesResponse|null|undefined,
          protos.google.cloud.visionai.v1.IInstance>):
      Promise<[
        protos.google.cloud.visionai.v1.IInstance[],
        protos.google.cloud.visionai.v1.IListInstancesRequest|null,
        protos.google.cloud.visionai.v1.IListInstancesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listInstances(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInstancesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Instance]{@link google.cloud.visionai.v1.Instance} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listInstancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listInstancesStream(
      request?: protos.google.cloud.visionai.v1.IListInstancesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.createStream(
      this.innerApiCalls.listInstances as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listInstances`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInstancesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Instance]{@link google.cloud.visionai.v1.Instance}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.list_instances.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_ListInstances_async
 */
  listInstancesAsync(
      request?: protos.google.cloud.visionai.v1.IListInstancesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1.IInstance>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.asyncIterate(
      this.innerApiCalls['listInstances'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1.IInstance>;
  }
 /**
 * Lists Drafts in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListDraftsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Draft]{@link google.cloud.visionai.v1.Draft}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDraftsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDrafts(
      request?: protos.google.cloud.visionai.v1.IListDraftsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IDraft[],
        protos.google.cloud.visionai.v1.IListDraftsRequest|null,
        protos.google.cloud.visionai.v1.IListDraftsResponse
      ]>;
  listDrafts(
      request: protos.google.cloud.visionai.v1.IListDraftsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListDraftsRequest,
          protos.google.cloud.visionai.v1.IListDraftsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IDraft>): void;
  listDrafts(
      request: protos.google.cloud.visionai.v1.IListDraftsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListDraftsRequest,
          protos.google.cloud.visionai.v1.IListDraftsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IDraft>): void;
  listDrafts(
      request?: protos.google.cloud.visionai.v1.IListDraftsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1.IListDraftsRequest,
          protos.google.cloud.visionai.v1.IListDraftsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IDraft>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1.IListDraftsRequest,
          protos.google.cloud.visionai.v1.IListDraftsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IDraft>):
      Promise<[
        protos.google.cloud.visionai.v1.IDraft[],
        protos.google.cloud.visionai.v1.IListDraftsRequest|null,
        protos.google.cloud.visionai.v1.IListDraftsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listDrafts(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListDraftsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Draft]{@link google.cloud.visionai.v1.Draft} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDraftsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDraftsStream(
      request?: protos.google.cloud.visionai.v1.IListDraftsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDrafts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDrafts.createStream(
      this.innerApiCalls.listDrafts as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDrafts`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListDraftsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Draft]{@link google.cloud.visionai.v1.Draft}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.list_drafts.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_ListDrafts_async
 */
  listDraftsAsync(
      request?: protos.google.cloud.visionai.v1.IListDraftsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1.IDraft>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDrafts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDrafts.asyncIterate(
      this.innerApiCalls['listDrafts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1.IDraft>;
  }
 /**
 * Lists Processors in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListProcessorsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Processor]{@link google.cloud.visionai.v1.Processor}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listProcessorsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProcessors(
      request?: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1.IProcessor[],
        protos.google.cloud.visionai.v1.IListProcessorsRequest|null,
        protos.google.cloud.visionai.v1.IListProcessorsResponse
      ]>;
  listProcessors(
      request: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListProcessorsRequest,
          protos.google.cloud.visionai.v1.IListProcessorsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IProcessor>): void;
  listProcessors(
      request: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1.IListProcessorsRequest,
          protos.google.cloud.visionai.v1.IListProcessorsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IProcessor>): void;
  listProcessors(
      request?: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1.IListProcessorsRequest,
          protos.google.cloud.visionai.v1.IListProcessorsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IProcessor>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1.IListProcessorsRequest,
          protos.google.cloud.visionai.v1.IListProcessorsResponse|null|undefined,
          protos.google.cloud.visionai.v1.IProcessor>):
      Promise<[
        protos.google.cloud.visionai.v1.IProcessor[],
        protos.google.cloud.visionai.v1.IListProcessorsRequest|null,
        protos.google.cloud.visionai.v1.IListProcessorsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listProcessors(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListProcessorsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Processor]{@link google.cloud.visionai.v1.Processor} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listProcessorsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProcessorsStream(
      request?: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listProcessors'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProcessors.createStream(
      this.innerApiCalls.listProcessors as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listProcessors`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListProcessorsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Processor]{@link google.cloud.visionai.v1.Processor}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/app_platform.list_processors.js</caption>
 * region_tag:visionai_v1_generated_AppPlatform_ListProcessors_async
 */
  listProcessorsAsync(
      request?: protos.google.cloud.visionai.v1.IListProcessorsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1.IProcessor>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listProcessors'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProcessors.asyncIterate(
      this.innerApiCalls['listProcessors'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1.IProcessor>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified analysis resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} analysis
   * @returns {string} Resource name string.
   */
  analysisPath(project:string,location:string,cluster:string,analysis:string) {
    return this.pathTemplates.analysisPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      analysis: analysis,
    });
  }

  /**
   * Parse the project from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).project;
  }

  /**
   * Parse the location from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).location;
  }

  /**
   * Parse the cluster from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).cluster;
  }

  /**
   * Parse the analysis from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the analysis.
   */
  matchAnalysisFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).analysis;
  }

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(projectNumber:string,location:string,corpus:string,asset:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
      annotation: annotation,
    });
  }

  /**
   * Parse the project_number from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project_number;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the corpus from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).corpus;
  }

  /**
   * Parse the asset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).asset;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified application resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @returns {string} Resource name string.
   */
  applicationPath(project:string,location:string,application:string) {
    return this.pathTemplates.applicationPathTemplate.render({
      project: project,
      location: location,
      application: application,
    });
  }

  /**
   * Parse the project from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).project;
  }

  /**
   * Parse the location from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).location;
  }

  /**
   * Parse the application from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).application;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(projectNumber:string,location:string,corpus:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
    });
  }

  /**
   * Parse the project_number from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project_number;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the corpus from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).corpus;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project:string,location:string,cluster:string,channel:string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the cluster from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).cluster;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project:string,location:string,cluster:string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified corpus resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @returns {string} Resource name string.
   */
  corpusPath(projectNumber:string,location:string,corpus:string) {
    return this.pathTemplates.corpusPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
    });
  }

  /**
   * Parse the project_number from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).project_number;
  }

  /**
   * Parse the location from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).location;
  }

  /**
   * Parse the corpus from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).corpus;
  }

  /**
   * Return a fully-qualified dataSchema resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} data_schema
   * @returns {string} Resource name string.
   */
  dataSchemaPath(projectNumber:string,location:string,corpus:string,dataSchema:string) {
    return this.pathTemplates.dataSchemaPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      data_schema: dataSchema,
    });
  }

  /**
   * Parse the project_number from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).project_number;
  }

  /**
   * Parse the location from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).location;
  }

  /**
   * Parse the corpus from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).corpus;
  }

  /**
   * Parse the data_schema from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the data_schema.
   */
  matchDataSchemaFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).data_schema;
  }

  /**
   * Return a fully-qualified draft resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} draft
   * @returns {string} Resource name string.
   */
  draftPath(project:string,location:string,application:string,draft:string) {
    return this.pathTemplates.draftPathTemplate.render({
      project: project,
      location: location,
      application: application,
      draft: draft,
    });
  }

  /**
   * Parse the project from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).project;
  }

  /**
   * Parse the location from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).location;
  }

  /**
   * Parse the application from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).application;
  }

  /**
   * Parse the draft from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the draft.
   */
  matchDraftFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).draft;
  }

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project:string,location:string,cluster:string,event:string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the cluster from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).cluster;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,application:string,instance:string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      application: application,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the application from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).application;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified processor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  processorPath(project:string,location:string,processor:string) {
    return this.pathTemplates.processorPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).project;
  }

  /**
   * Parse the location from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).location;
  }

  /**
   * Parse the processor from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).processor;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified searchConfig resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} search_config
   * @returns {string} Resource name string.
   */
  searchConfigPath(projectNumber:string,location:string,corpus:string,searchConfig:string) {
    return this.pathTemplates.searchConfigPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      search_config: searchConfig,
    });
  }

  /**
   * Parse the project_number from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).project_number;
  }

  /**
   * Parse the location from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).location;
  }

  /**
   * Parse the corpus from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).corpus;
  }

  /**
   * Parse the search_config from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the search_config.
   */
  matchSearchConfigFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).search_config;
  }

  /**
   * Return a fully-qualified series resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} series
   * @returns {string} Resource name string.
   */
  seriesPath(project:string,location:string,cluster:string,series:string) {
    return this.pathTemplates.seriesPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      series: series,
    });
  }

  /**
   * Parse the project from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).project;
  }

  /**
   * Parse the location from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).location;
  }

  /**
   * Parse the cluster from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).cluster;
  }

  /**
   * Parse the series from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the series.
   */
  matchSeriesFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).series;
  }

  /**
   * Return a fully-qualified stream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  streamPath(project:string,location:string,cluster:string,stream:string) {
    return this.pathTemplates.streamPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      stream: stream,
    });
  }

  /**
   * Parse the project from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).project;
  }

  /**
   * Parse the location from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).location;
  }

  /**
   * Parse the cluster from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).cluster;
  }

  /**
   * Parse the stream from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.appPlatformStub && !this._terminated) {
      return this.appPlatformStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
