// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform, PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/warehouse_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './warehouse_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service that manages media content + metadata for streaming.
 * @class
 * @memberof v1alpha1
 */
export class WarehouseClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  warehouseStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WarehouseClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new WarehouseClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof WarehouseClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      analysisPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/analyses/{analysis}'
      ),
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}'
      ),
      applicationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}'
      ),
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/channels/{channel}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      corpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}'
      ),
      dataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}'
      ),
      draftPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/drafts/{draft}'
      ),
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/events/{event}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/instances/{instance}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      searchConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}'
      ),
      seriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/series/{series}'
      ),
      streamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/streams/{stream}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAssets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'assets'),
      listCorpora:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'corpora'),
      listDataSchemas:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dataSchemas'),
      listAnnotations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'annotations'),
      listSearchConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'searchConfigs'),
      searchAssets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'searchResultItems')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      ingestAsset: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1alpha1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1alpha1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:getIamPolicy',additional_bindings: [{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:testIamPermissions',body: '*',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1alpha1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1alpha1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1alpha1/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/v1alpha1/{name=projects/*/locations/*/warehouseOperations/*}',},{get: '/v1alpha1/{name=projects/*/locations/*/corpora/*/assets/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1alpha1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const deleteAssetResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteAssetMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.DeleteAssetMetadata') as gax.protobuf.Type;
    const createCorpusResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Corpus') as gax.protobuf.Type;
    const createCorpusMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.CreateCorpusMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      deleteAsset: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAssetResponse.decode.bind(deleteAssetResponse),
        deleteAssetMetadata.decode.bind(deleteAssetMetadata)),
      createCorpus: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCorpusResponse.decode.bind(createCorpusResponse),
        createCorpusMetadata.decode.bind(createCorpusMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.visionai.v1alpha1.Warehouse', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.warehouseStub) {
      return this.warehouseStub;
    }

    // Put together the "service stub" for
    // google.cloud.visionai.v1alpha1.Warehouse.
    this.warehouseStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.visionai.v1alpha1.Warehouse') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.visionai.v1alpha1.Warehouse,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const warehouseStubMethods =
        ['createAsset', 'updateAsset', 'getAsset', 'listAssets', 'deleteAsset', 'createCorpus', 'getCorpus', 'updateCorpus', 'listCorpora', 'deleteCorpus', 'createDataSchema', 'updateDataSchema', 'getDataSchema', 'deleteDataSchema', 'listDataSchemas', 'createAnnotation', 'getAnnotation', 'listAnnotations', 'updateAnnotation', 'deleteAnnotation', 'ingestAsset', 'clipAsset', 'generateHlsUri', 'createSearchConfig', 'updateSearchConfig', 'getSearchConfig', 'deleteSearchConfig', 'listSearchConfigs', 'searchAssets'];
    for (const methodName of warehouseStubMethods) {
      const callPromise = this.warehouseStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            if (methodName in this.descriptors.stream) {
              const stream = new PassThrough();
              setImmediate(() => {
                stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));
              });
              return stream;
            }
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.warehouseStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'visionai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'visionai.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates an asset inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this asset will be created.
 *   Format: projects/* /locations/* /corpora/*
 * @param {google.cloud.visionai.v1alpha1.Asset} request.asset
 *   Required. The asset to create.
 * @param {string} [request.assetId]
 *   Optional. The ID to use for the asset, which will become the final component of
 *   the asset's resource name if user choose to specify. Otherwise, asset id
 *   will be generated by system.
 *
 *   This value should be up to 63 characters, and valid characters
 *   are /{@link 0-9|a-z}-/. The first character must be a letter, the last could be
 *   a letter or a number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Asset]{@link google.cloud.visionai.v1alpha1.Asset}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateAsset_async
 */
  createAsset(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|undefined, {}|undefined
      ]>;
  createAsset(
      request: protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|null|undefined,
          {}|null|undefined>): void;
  createAsset(
      request: protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|null|undefined,
          {}|null|undefined>): void;
  createAsset(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.ICreateAssetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createAsset(request, options, callback);
  }
/**
 * Updates an asset inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.visionai.v1alpha1.Asset} request.asset
 *   Required. The asset to update.
 *
 *   The asset's `name` field is used to identify the asset to be updated.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Asset]{@link google.cloud.visionai.v1alpha1.Asset}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.update_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_UpdateAsset_async
 */
  updateAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|undefined, {}|undefined
      ]>;
  updateAsset(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|null|undefined,
          {}|null|undefined>): void;
  updateAsset(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|null|undefined,
          {}|null|undefined>): void;
  updateAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.IUpdateAssetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'asset.name': request.asset!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateAsset(request, options, callback);
  }
/**
 * Reads an asset inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the asset to retrieve.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Asset]{@link google.cloud.visionai.v1alpha1.Asset}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.get_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GetAsset_async
 */
  getAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IGetAssetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|undefined, {}|undefined
      ]>;
  getAsset(
      request: protos.google.cloud.visionai.v1alpha1.IGetAssetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|null|undefined,
          {}|null|undefined>): void;
  getAsset(
      request: protos.google.cloud.visionai.v1alpha1.IGetAssetRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|null|undefined,
          {}|null|undefined>): void;
  getAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IGetAssetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAsset,
          protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset,
        protos.google.cloud.visionai.v1alpha1.IGetAssetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getAsset(request, options, callback);
  }
/**
 * Gets corpus details inside a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the corpus to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Corpus]{@link google.cloud.visionai.v1alpha1.Corpus}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.get_corpus.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GetCorpus_async
 */
  getCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus,
        protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|undefined, {}|undefined
      ]>;
  getCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  getCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  getCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus,
        protos.google.cloud.visionai.v1alpha1.IGetCorpusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getCorpus(request, options, callback);
  }
/**
 * Updates a corpus in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.visionai.v1alpha1.Corpus} request.corpus
 *   Required. The corpus which replaces the resource on the server.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Corpus]{@link google.cloud.visionai.v1alpha1.Corpus}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.update_corpus.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_UpdateCorpus_async
 */
  updateCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus,
        protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|undefined, {}|undefined
      ]>;
  updateCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  updateCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  updateCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ICorpus,
          protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus,
        protos.google.cloud.visionai.v1alpha1.IUpdateCorpusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'corpus.name': request.corpus!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateCorpus(request, options, callback);
  }
/**
 * Deletes a corpus only if its empty.
 * Returns empty response.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the corpus to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_corpus.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteCorpus_async
 */
  deleteCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|undefined, {}|undefined
      ]>;
  deleteCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCorpus(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteCorpusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCorpus(request, options, callback);
  }
/**
 * Creates data schema inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this data schema will be created.
 *   Format: projects/* /locations/* /corpora/*
 * @param {google.cloud.visionai.v1alpha1.DataSchema} request.dataSchema
 *   Required. The data schema to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_data_schema.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateDataSchema_async
 */
  createDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|undefined, {}|undefined
      ]>;
  createDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  createDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  createDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.ICreateDataSchemaRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createDataSchema(request, options, callback);
  }
/**
 * Updates data schema inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.visionai.v1alpha1.DataSchema} request.dataSchema
 *   Required. The data schema's `name` field is used to identify the data schema to be
 *   updated. Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.update_data_schema.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_UpdateDataSchema_async
 */
  updateDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|undefined, {}|undefined
      ]>;
  updateDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  updateDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  updateDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.IUpdateDataSchemaRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'data_schema.name': request.dataSchema!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateDataSchema(request, options, callback);
  }
/**
 * Gets data schema inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the data schema to retrieve.
 *   Format:
 *   projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.get_data_schema.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GetDataSchema_async
 */
  getDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|undefined, {}|undefined
      ]>;
  getDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  getDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  getDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IDataSchema,
          protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema,
        protos.google.cloud.visionai.v1alpha1.IGetDataSchemaRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getDataSchema(request, options, callback);
  }
/**
 * Deletes data schema inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the data schema to delete.
 *   Format:
 *   projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_data_schema.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteDataSchema_async
 */
  deleteDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|undefined, {}|undefined
      ]>;
  deleteDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  deleteDataSchema(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|null|undefined,
          {}|null|undefined>): void;
  deleteDataSchema(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteDataSchemaRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteDataSchema(request, options, callback);
  }
/**
 * Creates annotation inside asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this annotation will be created.
 *   Format: projects/* /locations/* /corpora/* /assets/*
 * @param {google.cloud.visionai.v1alpha1.Annotation} request.annotation
 *   Required. The annotation to create.
 * @param {string} [request.annotationId]
 *   Optional. The ID to use for the annotation, which will become the final component of
 *   the annotation's resource name if user choose to specify. Otherwise,
 *   annotation id will be generated by system.
 *
 *   This value should be up to 63 characters, and valid characters
 *   are /{@link 0-9|a-z}-/. The first character must be a letter, the last could be
 *   a letter or a number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_annotation.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateAnnotation_async
 */
  createAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|undefined, {}|undefined
      ]>;
  createAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  createAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  createAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.ICreateAnnotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createAnnotation(request, options, callback);
  }
/**
 * Reads annotation inside asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the annotation to retrieve.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.get_annotation.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GetAnnotation_async
 */
  getAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|undefined, {}|undefined
      ]>;
  getAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  getAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  getAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.IGetAnnotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getAnnotation(request, options, callback);
  }
/**
 * Updates annotation inside asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.visionai.v1alpha1.Annotation} request.annotation
 *   Required. The annotation to update.
 *   The annotation's `name` field is used to identify the annotation to be
 *   updated. Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.update_annotation.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_UpdateAnnotation_async
 */
  updateAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|undefined, {}|undefined
      ]>;
  updateAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  updateAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  updateAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IAnnotation,
          protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation,
        protos.google.cloud.visionai.v1alpha1.IUpdateAnnotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'annotation.name': request.annotation!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateAnnotation(request, options, callback);
  }
/**
 * Deletes annotation inside asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the annotation to delete.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_annotation.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteAnnotation_async
 */
  deleteAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|undefined, {}|undefined
      ]>;
  deleteAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteAnnotation(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteAnnotation(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteAnnotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteAnnotation(request, options, callback);
  }
/**
 * Generates clips for downloading. The api takes in a time range, and
 * generates a clip of the first content available after start_time and
 * before end_time, which may overflow beyond these bounds.
 * Returned clips are truncated if the total size of the clips are larger
 * than 100MB.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the asset to request clips for.
 *   Form:
 *   'projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/assets/{asset_id}'
 * @param {google.cloud.visionai.v1alpha1.Partition.TemporalPartition} request.temporalPartition
 *   Required. The time range to request clips for.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ClipAssetResponse]{@link google.cloud.visionai.v1alpha1.ClipAssetResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.clip_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ClipAsset_async
 */
  clipAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IClipAssetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
        protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|undefined, {}|undefined
      ]>;
  clipAsset(
      request: protos.google.cloud.visionai.v1alpha1.IClipAssetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
          protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|null|undefined,
          {}|null|undefined>): void;
  clipAsset(
      request: protos.google.cloud.visionai.v1alpha1.IClipAssetRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
          protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|null|undefined,
          {}|null|undefined>): void;
  clipAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IClipAssetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
          protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
          protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IClipAssetResponse,
        protos.google.cloud.visionai.v1alpha1.IClipAssetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.clipAsset(request, options, callback);
  }
/**
 * Generates a uri for an HLS manifest. The api takes in a collection of time
 * ranges, and generates a URI for an HLS manifest that covers all the
 * requested time ranges.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the asset to request clips for.
 *   Form:
 *   'projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/assets/{asset_id}'
 * @param {number[]} request.temporalPartitions
 *   Required. The time range to request clips for.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GenerateHlsUriResponse]{@link google.cloud.visionai.v1alpha1.GenerateHlsUriResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.generate_hls_uri.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GenerateHlsUri_async
 */
  generateHlsUri(
      request?: protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
        protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|undefined, {}|undefined
      ]>;
  generateHlsUri(
      request: protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|null|undefined,
          {}|null|undefined>): void;
  generateHlsUri(
      request: protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|null|undefined,
          {}|null|undefined>): void;
  generateHlsUri(
      request?: protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse,
        protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.generateHlsUri(request, options, callback);
  }
/**
 * Creates a search configuration inside a corpus.
 *
 * Please follow the rules below to create a valid CreateSearchConfigRequest.
 * --- General Rules ---
 * 1. Request.search_config_id must not be associated with an existing
 *    SearchConfig.
 * 2. Request must contain at least one non-empty search_criteria_property or
 *    facet_property.
 * 3. mapped_fields must not be empty, and must map to existing UGA keys.
 * 4. All mapped_fields must be of the same type.
 * 5. All mapped_fields must share the same granularity.
 * 6. All mapped_fields must share the same semantic SearchConfig match
 *    options.
 * For property-specific rules, please reference the comments for
 * FacetProperty and SearchCriteriaProperty.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this search configuration will be created.
 *   Format: projects/* /locations/* /corpora/*
 * @param {google.cloud.visionai.v1alpha1.SearchConfig} request.searchConfig
 *   Required. The search config to create.
 * @param {string} request.searchConfigId
 *   Required. ID to use for the new search config. Will become the final component of the
 *   SearchConfig's resource name. This value should be up to 63 characters, and
 *   valid characters are /{@link 0-9|a-z}-_/. The first character must be a letter,
 *   the last could be a letter or a number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_search_config.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateSearchConfig_async
 */
  createSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|undefined, {}|undefined
      ]>;
  createSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.ICreateSearchConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createSearchConfig(request, options, callback);
  }
/**
 * Updates a search configuration inside a corpus.
 *
 * Please follow the rules below to create a valid UpdateSearchConfigRequest.
 * --- General Rules ---
 * 1. Request.search_configuration.name must already exist.
 * 2. Request must contain at least one non-empty search_criteria_property or
 * facet_property.
 * 3. mapped_fields must not be empty, and must map to existing UGA keys.
 * 4. All mapped_fields must be of the same type.
 * 5. All mapped_fields must share the same granularity.
 * 6. All mapped_fields must share the same semantic SearchConfig match
 *    options.
 * For property-specific rules, please reference the comments for
 * FacetProperty and SearchCriteriaProperty.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.visionai.v1alpha1.SearchConfig} request.searchConfig
 *   Required. The search configuration to update.
 *
 *   The search configuration's `name` field is used to identify the resource to
 *   be updated. Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated. If left unset, all field paths will be
 *   updated/overwritten.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.update_search_config.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_UpdateSearchConfig_async
 */
  updateSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|undefined, {}|undefined
      ]>;
  updateSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.IUpdateSearchConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'search_config.name': request.searchConfig!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateSearchConfig(request, options, callback);
  }
/**
 * Gets a search configuration inside a corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the search configuration to retrieve.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.get_search_config.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_GetSearchConfig_async
 */
  getSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|undefined, {}|undefined
      ]>;
  getSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ISearchConfig,
          protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig,
        protos.google.cloud.visionai.v1alpha1.IGetSearchConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSearchConfig(request, options, callback);
  }
/**
 * Deletes a search configuration inside a corpus.
 *
 * For a DeleteSearchConfigRequest to be valid,
 * Request.search_configuration.name must already exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the search configuration to delete.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_search_config.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteSearchConfig_async
 */
  deleteSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|undefined, {}|undefined
      ]>;
  deleteSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSearchConfig(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSearchConfig(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.visionai.v1alpha1.IDeleteSearchConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSearchConfig(request, options, callback);
  }

/**
 * Ingests data for the asset. It is not allowed to ingest a data chunk which
 * is already expired according to TTL.
 * This method is only available via the gRPC API (not HTTP since
 * bi-directional streaming is not supported via HTTP).
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [IngestAssetRequest]{@link google.cloud.visionai.v1alpha1.IngestAssetRequest} for write() method, and
 *   will emit objects representing [IngestAssetResponse]{@link google.cloud.visionai.v1alpha1.IngestAssetResponse} on 'data' event asynchronously.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.ingest_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_IngestAsset_async
 */
  ingestAsset(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.ingestAsset(null, options);
  }

/**
 * Deletes asset inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the asset to delete.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteAsset_async
 */
  deleteAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteAssetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteAsset(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteAssetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteAsset(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteAssetRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteAsset(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteAssetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteAsset(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteAsset()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.delete_asset.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_DeleteAsset_async
 */
  async checkDeleteAssetProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.DeleteAssetMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteAsset, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.DeleteAssetMetadata>;
  }
/**
 * Creates a corpus inside a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Form: `projects/{project_number}/locations/{location_id}`
 * @param {google.cloud.visionai.v1alpha1.Corpus} request.corpus
 *   Required. The corpus to be created.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_corpus.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateCorpus_async
 */
  createCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateCorpusRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCorpus(
      request: protos.google.cloud.visionai.v1alpha1.ICreateCorpusRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCorpus(
      request: protos.google.cloud.visionai.v1alpha1.ICreateCorpusRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCorpus(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateCorpusRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createCorpus(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createCorpus()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.create_corpus.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_CreateCorpus_async
 */
  async checkCreateCorpusProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Corpus, protos.google.cloud.visionai.v1alpha1.CreateCorpusMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCorpus, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Corpus, protos.google.cloud.visionai.v1alpha1.CreateCorpusMetadata>;
  }
 /**
 * Lists an list of assets inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of assets.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of assets to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 50 assets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAssets` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAssets` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Asset]{@link google.cloud.visionai.v1alpha1.Asset}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAssetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAssets(
      request?: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset[],
        protos.google.cloud.visionai.v1alpha1.IListAssetsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListAssetsResponse
      ]>;
  listAssets(
      request: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAsset>): void;
  listAssets(
      request: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAsset>): void;
  listAssets(
      request?: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAsset>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAsset>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAsset[],
        protos.google.cloud.visionai.v1alpha1.IListAssetsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListAssetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listAssets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of assets.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of assets to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 50 assets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAssets` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAssets` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Asset]{@link google.cloud.visionai.v1alpha1.Asset} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAssetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAssetsStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAssets.createStream(
      this.innerApiCalls.listAssets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAssets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of assets.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of assets to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 50 assets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAssets` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAssets` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Asset]{@link google.cloud.visionai.v1alpha1.Asset}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.list_assets.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ListAssets_async
 */
  listAssetsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListAssetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.IAsset>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAssets.asyncIterate(
      this.innerApiCalls['listAssets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.IAsset>;
  }
 /**
 * Lists all corpora in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list corpora.
 * @param {number} request.pageSize
 *   Requested page size. API may return fewer results than requested.
 *   If negative, INVALID_ARGUMENT error will be returned.
 *   If unspecified or 0, API will pick a default size, which is 10.
 *   If the requested page size is larger than the maximum size, API will pick
 *   use the maximum size, which is 20.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via {@link |ListCorpora.next_page_token} of the previous
 *   {@link google.cloud.visionai.v1alpha1.Warehouse.ListCorpora|Warehouse.ListCorpora} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Corpus]{@link google.cloud.visionai.v1alpha1.Corpus}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCorporaAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCorpora(
      request?: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus[],
        protos.google.cloud.visionai.v1alpha1.IListCorporaRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListCorporaResponse
      ]>;
  listCorpora(
      request: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
          protos.google.cloud.visionai.v1alpha1.IListCorporaResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICorpus>): void;
  listCorpora(
      request: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
          protos.google.cloud.visionai.v1alpha1.IListCorporaResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICorpus>): void;
  listCorpora(
      request?: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
          protos.google.cloud.visionai.v1alpha1.IListCorporaResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICorpus>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
          protos.google.cloud.visionai.v1alpha1.IListCorporaResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICorpus>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICorpus[],
        protos.google.cloud.visionai.v1alpha1.IListCorporaRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListCorporaResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listCorpora(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list corpora.
 * @param {number} request.pageSize
 *   Requested page size. API may return fewer results than requested.
 *   If negative, INVALID_ARGUMENT error will be returned.
 *   If unspecified or 0, API will pick a default size, which is 10.
 *   If the requested page size is larger than the maximum size, API will pick
 *   use the maximum size, which is 20.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via {@link |ListCorpora.next_page_token} of the previous
 *   {@link google.cloud.visionai.v1alpha1.Warehouse.ListCorpora|Warehouse.ListCorpora} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Corpus]{@link google.cloud.visionai.v1alpha1.Corpus} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCorporaAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCorporaStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCorpora'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCorpora.createStream(
      this.innerApiCalls.listCorpora as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCorpora`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list corpora.
 * @param {number} request.pageSize
 *   Requested page size. API may return fewer results than requested.
 *   If negative, INVALID_ARGUMENT error will be returned.
 *   If unspecified or 0, API will pick a default size, which is 10.
 *   If the requested page size is larger than the maximum size, API will pick
 *   use the maximum size, which is 20.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via {@link |ListCorpora.next_page_token} of the previous
 *   {@link google.cloud.visionai.v1alpha1.Warehouse.ListCorpora|Warehouse.ListCorpora} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Corpus]{@link google.cloud.visionai.v1alpha1.Corpus}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.list_corpora.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ListCorpora_async
 */
  listCorporaAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListCorporaRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.ICorpus>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCorpora'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCorpora.asyncIterate(
      this.innerApiCalls['listCorpora'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.ICorpus>;
  }
 /**
 * Lists a list of data schemas inside corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of data schemas.
 *   Format:
 *   projects/{project_number}/locations/{location_id}/corpora/{corpus_id}
 * @param {number} request.pageSize
 *   The maximum number of data schemas to return. The service may return fewer
 *   than this value. If unspecified, at most 50 data schemas will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListDataSchemas` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDataSchemas` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDataSchemasAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDataSchemas(
      request?: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema[],
        protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse
      ]>;
  listDataSchemas(
      request: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IDataSchema>): void;
  listDataSchemas(
      request: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IDataSchema>): void;
  listDataSchemas(
      request?: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IDataSchema>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
          protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IDataSchema>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IDataSchema[],
        protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListDataSchemasResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listDataSchemas(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of data schemas.
 *   Format:
 *   projects/{project_number}/locations/{location_id}/corpora/{corpus_id}
 * @param {number} request.pageSize
 *   The maximum number of data schemas to return. The service may return fewer
 *   than this value. If unspecified, at most 50 data schemas will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListDataSchemas` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDataSchemas` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDataSchemasAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDataSchemasStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSchemas.createStream(
      this.innerApiCalls.listDataSchemas as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDataSchemas`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of data schemas.
 *   Format:
 *   projects/{project_number}/locations/{location_id}/corpora/{corpus_id}
 * @param {number} request.pageSize
 *   The maximum number of data schemas to return. The service may return fewer
 *   than this value. If unspecified, at most 50 data schemas will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListDataSchemas` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDataSchemas` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [DataSchema]{@link google.cloud.visionai.v1alpha1.DataSchema}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.list_data_schemas.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ListDataSchemas_async
 */
  listDataSchemasAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListDataSchemasRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.IDataSchema>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSchemas.asyncIterate(
      this.innerApiCalls['listDataSchemas'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.IDataSchema>;
  }
 /**
 * Lists a list of annotations inside asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of annotations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {number} request.pageSize
 *   The maximum number of annotations to return. The service may return fewer
 *   than this value. If unspecified, at most 50 annotations will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAnnotations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAnnotations` must
 *   match the call that provided the page token.
 * @param {string} request.filter
 *   The filter applied to the returned list.
 *   We only support filtering for the following fields:
 *   `partition.temporal_partition.start_time`,
 *   `partition.temporal_partition.end_time`, and `key`.
 *   Timestamps are specified in the RFC-3339 format, and only one restriction
 *   may be applied per field, joined by conjunctions.
 *   Format:
 *   "partition.temporal_partition.start_time > "2012-04-21T11:30:00-04:00" AND
 *   partition.temporal_partition.end_time < "2012-04-22T11:30:00-04:00" AND
 *   key = "example_key""
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAnnotationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAnnotations(
      request?: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation[],
        protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse
      ]>;
  listAnnotations(
      request: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAnnotation>): void;
  listAnnotations(
      request: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAnnotation>): void;
  listAnnotations(
      request?: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAnnotation>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
          protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IAnnotation>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IAnnotation[],
        protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListAnnotationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listAnnotations(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of annotations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {number} request.pageSize
 *   The maximum number of annotations to return. The service may return fewer
 *   than this value. If unspecified, at most 50 annotations will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAnnotations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAnnotations` must
 *   match the call that provided the page token.
 * @param {string} request.filter
 *   The filter applied to the returned list.
 *   We only support filtering for the following fields:
 *   `partition.temporal_partition.start_time`,
 *   `partition.temporal_partition.end_time`, and `key`.
 *   Timestamps are specified in the RFC-3339 format, and only one restriction
 *   may be applied per field, joined by conjunctions.
 *   Format:
 *   "partition.temporal_partition.start_time > "2012-04-21T11:30:00-04:00" AND
 *   partition.temporal_partition.end_time < "2012-04-22T11:30:00-04:00" AND
 *   key = "example_key""
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAnnotationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAnnotationsStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAnnotations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAnnotations.createStream(
      this.innerApiCalls.listAnnotations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAnnotations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of annotations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}
 * @param {number} request.pageSize
 *   The maximum number of annotations to return. The service may return fewer
 *   than this value. If unspecified, at most 50 annotations will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAnnotations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListAnnotations` must
 *   match the call that provided the page token.
 * @param {string} request.filter
 *   The filter applied to the returned list.
 *   We only support filtering for the following fields:
 *   `partition.temporal_partition.start_time`,
 *   `partition.temporal_partition.end_time`, and `key`.
 *   Timestamps are specified in the RFC-3339 format, and only one restriction
 *   may be applied per field, joined by conjunctions.
 *   Format:
 *   "partition.temporal_partition.start_time > "2012-04-21T11:30:00-04:00" AND
 *   partition.temporal_partition.end_time < "2012-04-22T11:30:00-04:00" AND
 *   key = "example_key""
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Annotation]{@link google.cloud.visionai.v1alpha1.Annotation}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.list_annotations.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ListAnnotations_async
 */
  listAnnotationsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListAnnotationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.IAnnotation>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAnnotations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAnnotations.asyncIterate(
      this.innerApiCalls['listAnnotations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.IAnnotation>;
  }
 /**
 * Lists all search configurations inside a corpus.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of search configurations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of search configurations to return. The service may
 *   return fewer than this value. If unspecified, a page size of 50 will be
 *   used. The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSearchConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListSearchConfigs` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSearchConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSearchConfigs(
      request?: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig[],
        protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse
      ]>;
  listSearchConfigs(
      request: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchConfig>): void;
  listSearchConfigs(
      request: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchConfig>): void;
  listSearchConfigs(
      request?: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
          protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchConfig>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchConfig[],
        protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListSearchConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listSearchConfigs(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of search configurations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of search configurations to return. The service may
 *   return fewer than this value. If unspecified, a page size of 50 will be
 *   used. The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSearchConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListSearchConfigs` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSearchConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSearchConfigsStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSearchConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSearchConfigs.createStream(
      this.innerApiCalls.listSearchConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSearchConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of search configurations.
 *   Format:
 *   projects/{project_number}/locations/{location}/corpora/{corpus}
 * @param {number} request.pageSize
 *   The maximum number of search configurations to return. The service may
 *   return fewer than this value. If unspecified, a page size of 50 will be
 *   used. The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSearchConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListSearchConfigs` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [SearchConfig]{@link google.cloud.visionai.v1alpha1.SearchConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.list_search_configs.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_ListSearchConfigs_async
 */
  listSearchConfigsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListSearchConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISearchConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSearchConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSearchConfigs.asyncIterate(
      this.innerApiCalls['listSearchConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISearchConfig>;
  }
 /**
 * Search media asset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.corpus
 *   Required. The parent corpus to search.
 *   Form: `projects/{project_id}/locations/{location_id}/corpora/{corpus_id}'
 * @param {number} request.pageSize
 *   The number of results to be returned in this page. If it's 0, the server
 *   will decide the appropriate page_size.
 * @param {string} request.pageToken
 *   The continuation token to fetch the next page. If empty, it means it is
 *   fetching the first page.
 * @param {google.cloud.visionai.v1alpha1.DateTimeRangeArray} request.contentTimeRanges
 *   Time ranges that matching video content must fall within. If no ranges are
 *   provided, there will be no time restriction. This field is treated just
 *   like the criteria below, but defined separately for convenience as it is
 *   used frequently. Note that if the end_time is in the future, it will be
 *   clamped to the time the request was received.
 * @param {number[]} request.criteria
 *   Criteria applied to search results.
 * @param {number[]} request.facetSelections
 *   Stores most recent facet selection state. Only facet groups with user's
 *   selection will be presented here. Selection state is either selected or
 *   unselected. Only selected facet buckets will be used as search criteria.
 * @param {string[]} request.resultAnnotationKeys
 *   A list of annotation keys to specify the annotations to be retrieved and
 *   returned with each search result.
 *   Annotation granularity must be GRANULARITY_ASSET_LEVEL and its search
 *   strategy must not be NO_SEARCH.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [SearchResultItem]{@link google.cloud.visionai.v1alpha1.SearchResultItem}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `searchAssetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  searchAssets(
      request?: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchResultItem[],
        protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest|null,
        protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse
      ]>;
  searchAssets(
      request: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchResultItem>): void;
  searchAssets(
      request: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchResultItem>): void;
  searchAssets(
      request?: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchResultItem>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
          protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISearchResultItem>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISearchResultItem[],
        protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest|null,
        protos.google.cloud.visionai.v1alpha1.ISearchAssetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'corpus': request.corpus ?? '',
    });
    this.initialize();
    return this.innerApiCalls.searchAssets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.corpus
 *   Required. The parent corpus to search.
 *   Form: `projects/{project_id}/locations/{location_id}/corpora/{corpus_id}'
 * @param {number} request.pageSize
 *   The number of results to be returned in this page. If it's 0, the server
 *   will decide the appropriate page_size.
 * @param {string} request.pageToken
 *   The continuation token to fetch the next page. If empty, it means it is
 *   fetching the first page.
 * @param {google.cloud.visionai.v1alpha1.DateTimeRangeArray} request.contentTimeRanges
 *   Time ranges that matching video content must fall within. If no ranges are
 *   provided, there will be no time restriction. This field is treated just
 *   like the criteria below, but defined separately for convenience as it is
 *   used frequently. Note that if the end_time is in the future, it will be
 *   clamped to the time the request was received.
 * @param {number[]} request.criteria
 *   Criteria applied to search results.
 * @param {number[]} request.facetSelections
 *   Stores most recent facet selection state. Only facet groups with user's
 *   selection will be presented here. Selection state is either selected or
 *   unselected. Only selected facet buckets will be used as search criteria.
 * @param {string[]} request.resultAnnotationKeys
 *   A list of annotation keys to specify the annotations to be retrieved and
 *   returned with each search result.
 *   Annotation granularity must be GRANULARITY_ASSET_LEVEL and its search
 *   strategy must not be NO_SEARCH.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [SearchResultItem]{@link google.cloud.visionai.v1alpha1.SearchResultItem} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `searchAssetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  searchAssetsStream(
      request?: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'corpus': request.corpus ?? '',
    });
    const defaultCallSettings = this._defaults['searchAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchAssets.createStream(
      this.innerApiCalls.searchAssets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `searchAssets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.corpus
 *   Required. The parent corpus to search.
 *   Form: `projects/{project_id}/locations/{location_id}/corpora/{corpus_id}'
 * @param {number} request.pageSize
 *   The number of results to be returned in this page. If it's 0, the server
 *   will decide the appropriate page_size.
 * @param {string} request.pageToken
 *   The continuation token to fetch the next page. If empty, it means it is
 *   fetching the first page.
 * @param {google.cloud.visionai.v1alpha1.DateTimeRangeArray} request.contentTimeRanges
 *   Time ranges that matching video content must fall within. If no ranges are
 *   provided, there will be no time restriction. This field is treated just
 *   like the criteria below, but defined separately for convenience as it is
 *   used frequently. Note that if the end_time is in the future, it will be
 *   clamped to the time the request was received.
 * @param {number[]} request.criteria
 *   Criteria applied to search results.
 * @param {number[]} request.facetSelections
 *   Stores most recent facet selection state. Only facet groups with user's
 *   selection will be presented here. Selection state is either selected or
 *   unselected. Only selected facet buckets will be used as search criteria.
 * @param {string[]} request.resultAnnotationKeys
 *   A list of annotation keys to specify the annotations to be retrieved and
 *   returned with each search result.
 *   Annotation granularity must be GRANULARITY_ASSET_LEVEL and its search
 *   strategy must not be NO_SEARCH.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [SearchResultItem]{@link google.cloud.visionai.v1alpha1.SearchResultItem}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/warehouse.search_assets.js</caption>
 * region_tag:visionai_v1alpha1_generated_Warehouse_SearchAssets_async
 */
  searchAssetsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.ISearchAssetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISearchResultItem>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'corpus': request.corpus ?? '',
    });
    const defaultCallSettings = this._defaults['searchAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchAssets.asyncIterate(
      this.innerApiCalls['searchAssets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISearchResultItem>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified analysis resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} analysis
   * @returns {string} Resource name string.
   */
  analysisPath(project:string,location:string,cluster:string,analysis:string) {
    return this.pathTemplates.analysisPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      analysis: analysis,
    });
  }

  /**
   * Parse the project from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).project;
  }

  /**
   * Parse the location from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).location;
  }

  /**
   * Parse the cluster from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).cluster;
  }

  /**
   * Parse the analysis from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the analysis.
   */
  matchAnalysisFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).analysis;
  }

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(projectNumber:string,location:string,corpus:string,asset:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
      annotation: annotation,
    });
  }

  /**
   * Parse the project_number from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project_number;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the corpus from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).corpus;
  }

  /**
   * Parse the asset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).asset;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified application resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @returns {string} Resource name string.
   */
  applicationPath(project:string,location:string,application:string) {
    return this.pathTemplates.applicationPathTemplate.render({
      project: project,
      location: location,
      application: application,
    });
  }

  /**
   * Parse the project from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).project;
  }

  /**
   * Parse the location from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).location;
  }

  /**
   * Parse the application from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).application;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(projectNumber:string,location:string,corpus:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
    });
  }

  /**
   * Parse the project_number from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project_number;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the corpus from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).corpus;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project:string,location:string,cluster:string,channel:string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the cluster from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).cluster;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project:string,location:string,cluster:string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified corpus resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @returns {string} Resource name string.
   */
  corpusPath(projectNumber:string,location:string,corpus:string) {
    return this.pathTemplates.corpusPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
    });
  }

  /**
   * Parse the project_number from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).project_number;
  }

  /**
   * Parse the location from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).location;
  }

  /**
   * Parse the corpus from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).corpus;
  }

  /**
   * Return a fully-qualified dataSchema resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} data_schema
   * @returns {string} Resource name string.
   */
  dataSchemaPath(projectNumber:string,location:string,corpus:string,dataSchema:string) {
    return this.pathTemplates.dataSchemaPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      data_schema: dataSchema,
    });
  }

  /**
   * Parse the project_number from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).project_number;
  }

  /**
   * Parse the location from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).location;
  }

  /**
   * Parse the corpus from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).corpus;
  }

  /**
   * Parse the data_schema from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the data_schema.
   */
  matchDataSchemaFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).data_schema;
  }

  /**
   * Return a fully-qualified draft resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} draft
   * @returns {string} Resource name string.
   */
  draftPath(project:string,location:string,application:string,draft:string) {
    return this.pathTemplates.draftPathTemplate.render({
      project: project,
      location: location,
      application: application,
      draft: draft,
    });
  }

  /**
   * Parse the project from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).project;
  }

  /**
   * Parse the location from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).location;
  }

  /**
   * Parse the application from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).application;
  }

  /**
   * Parse the draft from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the draft.
   */
  matchDraftFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).draft;
  }

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project:string,location:string,cluster:string,event:string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the cluster from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).cluster;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,application:string,instance:string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      application: application,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the application from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).application;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified processor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  processorPath(project:string,location:string,processor:string) {
    return this.pathTemplates.processorPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).project;
  }

  /**
   * Parse the location from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).location;
  }

  /**
   * Parse the processor from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).processor;
  }

  /**
   * Return a fully-qualified searchConfig resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} search_config
   * @returns {string} Resource name string.
   */
  searchConfigPath(projectNumber:string,location:string,corpus:string,searchConfig:string) {
    return this.pathTemplates.searchConfigPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      search_config: searchConfig,
    });
  }

  /**
   * Parse the project_number from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).project_number;
  }

  /**
   * Parse the location from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).location;
  }

  /**
   * Parse the corpus from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).corpus;
  }

  /**
   * Parse the search_config from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the search_config.
   */
  matchSearchConfigFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).search_config;
  }

  /**
   * Return a fully-qualified series resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} series
   * @returns {string} Resource name string.
   */
  seriesPath(project:string,location:string,cluster:string,series:string) {
    return this.pathTemplates.seriesPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      series: series,
    });
  }

  /**
   * Parse the project from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).project;
  }

  /**
   * Parse the location from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).location;
  }

  /**
   * Parse the cluster from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).cluster;
  }

  /**
   * Parse the series from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the series.
   */
  matchSeriesFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).series;
  }

  /**
   * Return a fully-qualified stream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  streamPath(project:string,location:string,cluster:string,stream:string) {
    return this.pathTemplates.streamPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      stream: stream,
    });
  }

  /**
   * Parse the project from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).project;
  }

  /**
   * Parse the location from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).location;
  }

  /**
   * Parse the cluster from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).cluster;
  }

  /**
   * Parse the stream from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.warehouseStub && !this._terminated) {
      return this.warehouseStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
