// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/streaming_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './streaming_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Streaming service for receiving and sending packets.
 * @class
 * @memberof v1alpha1
 */
export class StreamingServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  streamingServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StreamingServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new StreamingServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StreamingServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      analysisPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/analyses/{analysis}'
      ),
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}'
      ),
      applicationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}'
      ),
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/channels/{channel}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      corpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}'
      ),
      dataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}'
      ),
      draftPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/drafts/{draft}'
      ),
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/events/{event}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/instances/{instance}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      searchConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}'
      ),
      seriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/series/{series}'
      ),
      streamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/streams/{stream}'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      sendPackets: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest'),
      receivePackets: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest'),
      receiveEvents: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.visionai.v1alpha1.StreamingService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.streamingServiceStub) {
      return this.streamingServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.visionai.v1alpha1.StreamingService.
    this.streamingServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.visionai.v1alpha1.StreamingService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.visionai.v1alpha1.StreamingService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const streamingServiceStubMethods =
        ['sendPackets', 'receivePackets', 'receiveEvents', 'acquireLease', 'renewLease', 'releaseLease'];
    for (const methodName of streamingServiceStubMethods) {
      const callPromise = this.streamingServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            if (methodName in this.descriptors.stream) {
              const stream = new PassThrough();
              setImmediate(() => {
                stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));
              });
              return stream;
            }
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.stream[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.streamingServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'visionai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'visionai.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * AcquireLease acquires a lease.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.series
 *   The series name.
 * @param {string} request.owner
 *   The owner name.
 * @param {google.protobuf.Duration} request.term
 *   The lease term.
 * @param {google.cloud.visionai.v1alpha1.LeaseType} request.leaseType
 *   The lease type.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Lease]{@link google.cloud.visionai.v1alpha1.Lease}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.acquire_lease.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_AcquireLease_async
 */
  acquireLease(
      request?: protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ILease,
        protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|undefined, {}|undefined
      ]>;
  acquireLease(
      request: protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  acquireLease(
      request: protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  acquireLease(
      request?: protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ILease,
        protos.google.cloud.visionai.v1alpha1.IAcquireLeaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'series': request.series ?? '',
    });
    this.initialize();
    return this.innerApiCalls.acquireLease(request, options, callback);
  }
/**
 * RenewLease renews a lease.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.id
 *   Lease id.
 * @param {string} request.series
 *   Series name.
 * @param {string} request.owner
 *   Lease owner.
 * @param {google.protobuf.Duration} request.term
 *   Lease term.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Lease]{@link google.cloud.visionai.v1alpha1.Lease}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.renew_lease.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_RenewLease_async
 */
  renewLease(
      request?: protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ILease,
        protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|undefined, {}|undefined
      ]>;
  renewLease(
      request: protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  renewLease(
      request: protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  renewLease(
      request?: protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ILease,
          protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ILease,
        protos.google.cloud.visionai.v1alpha1.IRenewLeaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'series': request.series ?? '',
    });
    this.initialize();
    return this.innerApiCalls.renewLease(request, options, callback);
  }
/**
 * RleaseLease releases a lease.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.id
 *   Lease id.
 * @param {string} request.series
 *   Series name.
 * @param {string} request.owner
 *   Lease owner.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ReleaseLeaseResponse]{@link google.cloud.visionai.v1alpha1.ReleaseLeaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.release_lease.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_ReleaseLease_async
 */
  releaseLease(
      request?: protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
        protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|undefined, {}|undefined
      ]>;
  releaseLease(
      request: protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  releaseLease(
      request: protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|null|undefined,
          {}|null|undefined>): void;
  releaseLease(
      request?: protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
          protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse,
        protos.google.cloud.visionai.v1alpha1.IReleaseLeaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'series': request.series ?? '',
    });
    this.initialize();
    return this.innerApiCalls.releaseLease(request, options, callback);
  }

/**
 * Send packets to the series.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [SendPacketsRequest]{@link google.cloud.visionai.v1alpha1.SendPacketsRequest} for write() method, and
 *   will emit objects representing [SendPacketsResponse]{@link google.cloud.visionai.v1alpha1.SendPacketsResponse} on 'data' event asynchronously.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.send_packets.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_SendPackets_async
 */
  sendPackets(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.sendPackets(null, options);
  }

/**
 * Receive packets from the series.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [ReceivePacketsRequest]{@link google.cloud.visionai.v1alpha1.ReceivePacketsRequest} for write() method, and
 *   will emit objects representing [ReceivePacketsResponse]{@link google.cloud.visionai.v1alpha1.ReceivePacketsResponse} on 'data' event asynchronously.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.receive_packets.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_ReceivePackets_async
 */
  receivePackets(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.receivePackets(null, options);
  }

/**
 * Receive events given the stream name.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [ReceiveEventsRequest]{@link google.cloud.visionai.v1alpha1.ReceiveEventsRequest} for write() method, and
 *   will emit objects representing [ReceiveEventsResponse]{@link google.cloud.visionai.v1alpha1.ReceiveEventsResponse} on 'data' event asynchronously.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streaming_service.receive_events.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamingService_ReceiveEvents_async
 */
  receiveEvents(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.receiveEvents(null, options);
  }

/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified analysis resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} analysis
   * @returns {string} Resource name string.
   */
  analysisPath(project:string,location:string,cluster:string,analysis:string) {
    return this.pathTemplates.analysisPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      analysis: analysis,
    });
  }

  /**
   * Parse the project from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).project;
  }

  /**
   * Parse the location from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).location;
  }

  /**
   * Parse the cluster from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).cluster;
  }

  /**
   * Parse the analysis from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the analysis.
   */
  matchAnalysisFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).analysis;
  }

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(projectNumber:string,location:string,corpus:string,asset:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
      annotation: annotation,
    });
  }

  /**
   * Parse the project_number from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project_number;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the corpus from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).corpus;
  }

  /**
   * Parse the asset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).asset;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified application resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @returns {string} Resource name string.
   */
  applicationPath(project:string,location:string,application:string) {
    return this.pathTemplates.applicationPathTemplate.render({
      project: project,
      location: location,
      application: application,
    });
  }

  /**
   * Parse the project from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).project;
  }

  /**
   * Parse the location from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).location;
  }

  /**
   * Parse the application from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).application;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(projectNumber:string,location:string,corpus:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
    });
  }

  /**
   * Parse the project_number from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project_number;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the corpus from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).corpus;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project:string,location:string,cluster:string,channel:string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the cluster from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).cluster;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project:string,location:string,cluster:string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified corpus resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @returns {string} Resource name string.
   */
  corpusPath(projectNumber:string,location:string,corpus:string) {
    return this.pathTemplates.corpusPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
    });
  }

  /**
   * Parse the project_number from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).project_number;
  }

  /**
   * Parse the location from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).location;
  }

  /**
   * Parse the corpus from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).corpus;
  }

  /**
   * Return a fully-qualified dataSchema resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} data_schema
   * @returns {string} Resource name string.
   */
  dataSchemaPath(projectNumber:string,location:string,corpus:string,dataSchema:string) {
    return this.pathTemplates.dataSchemaPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      data_schema: dataSchema,
    });
  }

  /**
   * Parse the project_number from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).project_number;
  }

  /**
   * Parse the location from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).location;
  }

  /**
   * Parse the corpus from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).corpus;
  }

  /**
   * Parse the data_schema from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the data_schema.
   */
  matchDataSchemaFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).data_schema;
  }

  /**
   * Return a fully-qualified draft resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} draft
   * @returns {string} Resource name string.
   */
  draftPath(project:string,location:string,application:string,draft:string) {
    return this.pathTemplates.draftPathTemplate.render({
      project: project,
      location: location,
      application: application,
      draft: draft,
    });
  }

  /**
   * Parse the project from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).project;
  }

  /**
   * Parse the location from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).location;
  }

  /**
   * Parse the application from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).application;
  }

  /**
   * Parse the draft from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the draft.
   */
  matchDraftFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).draft;
  }

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project:string,location:string,cluster:string,event:string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the cluster from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).cluster;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,application:string,instance:string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      application: application,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the application from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).application;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified processor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  processorPath(project:string,location:string,processor:string) {
    return this.pathTemplates.processorPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).project;
  }

  /**
   * Parse the location from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).location;
  }

  /**
   * Parse the processor from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).processor;
  }

  /**
   * Return a fully-qualified searchConfig resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} search_config
   * @returns {string} Resource name string.
   */
  searchConfigPath(projectNumber:string,location:string,corpus:string,searchConfig:string) {
    return this.pathTemplates.searchConfigPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      search_config: searchConfig,
    });
  }

  /**
   * Parse the project_number from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).project_number;
  }

  /**
   * Parse the location from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).location;
  }

  /**
   * Parse the corpus from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).corpus;
  }

  /**
   * Parse the search_config from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the search_config.
   */
  matchSearchConfigFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).search_config;
  }

  /**
   * Return a fully-qualified series resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} series
   * @returns {string} Resource name string.
   */
  seriesPath(project:string,location:string,cluster:string,series:string) {
    return this.pathTemplates.seriesPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      series: series,
    });
  }

  /**
   * Parse the project from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).project;
  }

  /**
   * Parse the location from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).location;
  }

  /**
   * Parse the cluster from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).cluster;
  }

  /**
   * Parse the series from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the series.
   */
  matchSeriesFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).series;
  }

  /**
   * Return a fully-qualified stream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  streamPath(project:string,location:string,cluster:string,stream:string) {
    return this.pathTemplates.streamPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      stream: stream,
    });
  }

  /**
   * Parse the project from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).project;
  }

  /**
   * Parse the location from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).location;
  }

  /**
   * Parse the cluster from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).cluster;
  }

  /**
   * Parse the stream from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.streamingServiceStub && !this._terminated) {
      return this.streamingServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
