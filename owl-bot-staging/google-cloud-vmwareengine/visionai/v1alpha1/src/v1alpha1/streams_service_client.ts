// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/streams_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './streams_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources.
 *  Vision API and Vision AI API are two independent APIs developed by the same
 *  team. Vision API is for people to annotate their image while Vision AI is an
 *  e2e solution for customer to build their own computer vision application.
 * @class
 * @memberof v1alpha1
 */
export class StreamsServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  streamsServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StreamsServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new StreamsServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StreamsServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      analysisPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/analyses/{analysis}'
      ),
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}'
      ),
      applicationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}'
      ),
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/channels/{channel}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      corpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}'
      ),
      dataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}'
      ),
      draftPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/drafts/{draft}'
      ),
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/events/{event}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/applications/{application}/instances/{instance}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      searchConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}'
      ),
      seriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/series/{series}'
      ),
      streamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/streams/{stream}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listClusters:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'clusters'),
      listStreams:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'streams'),
      listEvents:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'events'),
      listSeries:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'series')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1alpha1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1alpha1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:getIamPolicy',additional_bindings: [{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:getIamPolicy',},{get: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:setIamPolicy',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/streams/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/events/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/series/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/operators/*/versions/*}:testIamPermissions',body: '*',},{post: '/v1alpha1/{resource=projects/*/locations/*/clusters/*/analyses/*}:testIamPermissions',body: '*',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1alpha1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1alpha1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1alpha1/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/v1alpha1/{name=projects/*/locations/*/warehouseOperations/*}',},{get: '/v1alpha1/{name=projects/*/locations/*/corpora/*/assets/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1alpha1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Cluster') as gax.protobuf.Type;
    const createClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const updateClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Cluster') as gax.protobuf.Type;
    const updateClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const deleteClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const createStreamResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Stream') as gax.protobuf.Type;
    const createStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const updateStreamResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Stream') as gax.protobuf.Type;
    const updateStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const deleteStreamResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const createEventResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Event') as gax.protobuf.Type;
    const createEventMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const updateEventResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Event') as gax.protobuf.Type;
    const updateEventMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const deleteEventResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteEventMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const createSeriesResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Series') as gax.protobuf.Type;
    const createSeriesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const updateSeriesResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Series') as gax.protobuf.Type;
    const updateSeriesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const deleteSeriesResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteSeriesMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const materializeChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.Channel') as gax.protobuf.Type;
    const materializeChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.visionai.v1alpha1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createClusterResponse.decode.bind(createClusterResponse),
        createClusterMetadata.decode.bind(createClusterMetadata)),
      updateCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateClusterResponse.decode.bind(updateClusterResponse),
        updateClusterMetadata.decode.bind(updateClusterMetadata)),
      deleteCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteClusterResponse.decode.bind(deleteClusterResponse),
        deleteClusterMetadata.decode.bind(deleteClusterMetadata)),
      createStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createStreamResponse.decode.bind(createStreamResponse),
        createStreamMetadata.decode.bind(createStreamMetadata)),
      updateStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateStreamResponse.decode.bind(updateStreamResponse),
        updateStreamMetadata.decode.bind(updateStreamMetadata)),
      deleteStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteStreamResponse.decode.bind(deleteStreamResponse),
        deleteStreamMetadata.decode.bind(deleteStreamMetadata)),
      createEvent: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEventResponse.decode.bind(createEventResponse),
        createEventMetadata.decode.bind(createEventMetadata)),
      updateEvent: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateEventResponse.decode.bind(updateEventResponse),
        updateEventMetadata.decode.bind(updateEventMetadata)),
      deleteEvent: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEventResponse.decode.bind(deleteEventResponse),
        deleteEventMetadata.decode.bind(deleteEventMetadata)),
      createSeries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSeriesResponse.decode.bind(createSeriesResponse),
        createSeriesMetadata.decode.bind(createSeriesMetadata)),
      updateSeries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSeriesResponse.decode.bind(updateSeriesResponse),
        updateSeriesMetadata.decode.bind(updateSeriesMetadata)),
      deleteSeries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteSeriesResponse.decode.bind(deleteSeriesResponse),
        deleteSeriesMetadata.decode.bind(deleteSeriesMetadata)),
      materializeChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        materializeChannelResponse.decode.bind(materializeChannelResponse),
        materializeChannelMetadata.decode.bind(materializeChannelMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.visionai.v1alpha1.StreamsService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.streamsServiceStub) {
      return this.streamsServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.visionai.v1alpha1.StreamsService.
    this.streamsServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.visionai.v1alpha1.StreamsService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.visionai.v1alpha1.StreamsService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const streamsServiceStubMethods =
        ['listClusters', 'getCluster', 'createCluster', 'updateCluster', 'deleteCluster', 'listStreams', 'getStream', 'createStream', 'updateStream', 'deleteStream', 'generateStreamHlsToken', 'listEvents', 'getEvent', 'createEvent', 'updateEvent', 'deleteEvent', 'listSeries', 'getSeries', 'createSeries', 'updateSeries', 'deleteSeries', 'materializeChannel'];
    for (const methodName of streamsServiceStubMethods) {
      const callPromise = this.streamsServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.streamsServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'visionai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'visionai.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Cluster]{@link google.cloud.visionai.v1alpha1.Cluster}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.get_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_GetCluster_async
 */
  getCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IGetClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICluster,
        protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|undefined, {}|undefined
      ]>;
  getCluster(
      request: protos.google.cloud.visionai.v1alpha1.IGetClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICluster,
          protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCluster(
      request: protos.google.cloud.visionai.v1alpha1.IGetClusterRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ICluster,
          protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IGetClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ICluster,
          protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ICluster,
          protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICluster,
        protos.google.cloud.visionai.v1alpha1.IGetClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getCluster(request, options, callback);
  }
/**
 * Gets details of a single Stream.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Stream]{@link google.cloud.visionai.v1alpha1.Stream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.get_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_GetStream_async
 */
  getStream(
      request?: protos.google.cloud.visionai.v1alpha1.IGetStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IStream,
        protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|undefined, {}|undefined
      ]>;
  getStream(
      request: protos.google.cloud.visionai.v1alpha1.IGetStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IStream,
          protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|null|undefined,
          {}|null|undefined>): void;
  getStream(
      request: protos.google.cloud.visionai.v1alpha1.IGetStreamRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IStream,
          protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|null|undefined,
          {}|null|undefined>): void;
  getStream(
      request?: protos.google.cloud.visionai.v1alpha1.IGetStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IStream,
          protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IStream,
          protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IStream,
        protos.google.cloud.visionai.v1alpha1.IGetStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getStream(request, options, callback);
  }
/**
 * Generate the JWT auth token required to get the stream HLS contents.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.stream
 *   Required. The name of the stream.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GenerateStreamHlsTokenResponse]{@link google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.generate_stream_hls_token.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_GenerateStreamHlsToken_async
 */
  generateStreamHlsToken(
      request?: protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
        protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|undefined, {}|undefined
      ]>;
  generateStreamHlsToken(
      request: protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|null|undefined,
          {}|null|undefined>): void;
  generateStreamHlsToken(
      request: protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|null|undefined,
          {}|null|undefined>): void;
  generateStreamHlsToken(
      request?: protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
          protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse,
        protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'stream': request.stream ?? '',
    });
    this.initialize();
    return this.innerApiCalls.generateStreamHlsToken(request, options, callback);
  }
/**
 * Gets details of a single Event.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Event]{@link google.cloud.visionai.v1alpha1.Event}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.get_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_GetEvent_async
 */
  getEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IGetEventRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IEvent,
        protos.google.cloud.visionai.v1alpha1.IGetEventRequest|undefined, {}|undefined
      ]>;
  getEvent(
      request: protos.google.cloud.visionai.v1alpha1.IGetEventRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IEvent,
          protos.google.cloud.visionai.v1alpha1.IGetEventRequest|null|undefined,
          {}|null|undefined>): void;
  getEvent(
      request: protos.google.cloud.visionai.v1alpha1.IGetEventRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.IEvent,
          protos.google.cloud.visionai.v1alpha1.IGetEventRequest|null|undefined,
          {}|null|undefined>): void;
  getEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IGetEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.IEvent,
          protos.google.cloud.visionai.v1alpha1.IGetEventRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.IEvent,
          protos.google.cloud.visionai.v1alpha1.IGetEventRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IEvent,
        protos.google.cloud.visionai.v1alpha1.IGetEventRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getEvent(request, options, callback);
  }
/**
 * Gets details of a single Series.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Series]{@link google.cloud.visionai.v1alpha1.Series}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.get_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_GetSeries_async
 */
  getSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISeries,
        protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|undefined, {}|undefined
      ]>;
  getSeries(
      request: protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISeries,
          protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|null|undefined,
          {}|null|undefined>): void;
  getSeries(
      request: protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest,
      callback: Callback<
          protos.google.cloud.visionai.v1alpha1.ISeries,
          protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|null|undefined,
          {}|null|undefined>): void;
  getSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.visionai.v1alpha1.ISeries,
          protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.visionai.v1alpha1.ISeries,
          protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISeries,
        protos.google.cloud.visionai.v1alpha1.IGetSeriesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSeries(request, options, callback);
  }

/**
 * Creates a new Cluster in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.clusterId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1alpha1.Cluster} request.cluster
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateCluster_async
 */
  createCluster(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCluster(
      request: protos.google.cloud.visionai.v1alpha1.ICreateClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCluster(
      request: protos.google.cloud.visionai.v1alpha1.ICreateClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCluster(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateCluster_async
 */
  async checkCreateClusterProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Cluster, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Cluster, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   Cluster resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1alpha1.Cluster} request.cluster
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateCluster_async
 */
  updateCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateCluster(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateCluster(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'cluster.name': request.cluster!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateCluster_async
 */
  async checkUpdateClusterProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Cluster, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Cluster, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Deletes a single Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteCluster_async
 */
  deleteCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCluster(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCluster(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteClusterRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCluster(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_cluster.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteCluster_async
 */
  async checkDeleteClusterProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Creates a new Stream in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.streamId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1alpha1.Stream} request.stream
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateStream_async
 */
  createStream(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateStreamRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createStream(
      request: protos.google.cloud.visionai.v1alpha1.ICreateStreamRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createStream(
      request: protos.google.cloud.visionai.v1alpha1.ICreateStreamRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createStream(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createStream(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createStream()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateStream_async
 */
  async checkCreateStreamProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Stream, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createStream, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Stream, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Stream.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   Stream resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1alpha1.Stream} request.stream
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateStream_async
 */
  updateStream(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateStreamRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateStream(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateStreamRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateStream(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateStreamRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateStream(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'stream.name': request.stream!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateStream(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateStream()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateStream_async
 */
  async checkUpdateStreamProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Stream, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateStream, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Stream, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Deletes a single Stream.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteStream_async
 */
  deleteStream(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteStreamRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteStream(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteStreamRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteStream(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteStreamRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteStream(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteStream(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteStream()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_stream.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteStream_async
 */
  async checkDeleteStreamProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteStream, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Creates a new Event in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.eventId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1alpha1.Event} request.event
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateEvent_async
 */
  createEvent(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateEventRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createEvent(
      request: protos.google.cloud.visionai.v1alpha1.ICreateEventRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createEvent(
      request: protos.google.cloud.visionai.v1alpha1.ICreateEventRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createEvent(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createEvent(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createEvent()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateEvent_async
 */
  async checkCreateEventProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Event, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createEvent, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Event, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Event.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   Event resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields will be overwritten.
 * @param {google.cloud.visionai.v1alpha1.Event} request.event
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateEvent_async
 */
  updateEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateEventRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateEvent(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateEventRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateEvent(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateEventRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'event.name': request.event!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateEvent(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateEvent()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateEvent_async
 */
  async checkUpdateEventProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Event, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateEvent, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Event, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Deletes a single Event.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteEvent_async
 */
  deleteEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteEventRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteEvent(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteEventRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteEvent(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteEventRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteEvent(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteEvent(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteEvent()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_event.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteEvent_async
 */
  async checkDeleteEventProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteEvent, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Creates a new Series in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.seriesId
 *   Required. Id of the requesting object.
 * @param {google.cloud.visionai.v1alpha1.Series} request.series
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateSeries_async
 */
  createSeries(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateSeriesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createSeries(
      request: protos.google.cloud.visionai.v1alpha1.ICreateSeriesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createSeries(
      request: protos.google.cloud.visionai.v1alpha1.ICreateSeriesRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createSeries(
      request?: protos.google.cloud.visionai.v1alpha1.ICreateSeriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createSeries(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createSeries()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.create_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_CreateSeries_async
 */
  async checkCreateSeriesProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Series, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createSeries, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Series, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Event.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the Series
 *   resource by the update. The fields specified in the update_mask are
 *   relative to the resource, not the full request. A field will be overwritten
 *   if it is in the mask. If the user does not provide a mask then all fields
 *   will be overwritten.
 * @param {google.cloud.visionai.v1alpha1.Series} request.series
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateSeries_async
 */
  updateSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateSeriesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateSeries(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateSeriesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateSeries(
      request: protos.google.cloud.visionai.v1alpha1.IUpdateSeriesRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IUpdateSeriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'series.name': request.series!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateSeries(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateSeries()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.update_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_UpdateSeries_async
 */
  async checkUpdateSeriesProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Series, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateSeries, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Series, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Deletes a single Series.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteSeries_async
 */
  deleteSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteSeriesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteSeries(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteSeriesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteSeries(
      request: protos.google.cloud.visionai.v1alpha1.IDeleteSeriesRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IDeleteSeriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSeries(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteSeries()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.delete_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_DeleteSeries_async
 */
  async checkDeleteSeriesProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteSeries, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
/**
 * Materialize a channel.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.channelId
 *   Required. Id of the channel.
 * @param {google.cloud.visionai.v1alpha1.Channel} request.channel
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server will know to ignore
 *   the request if it has already been completed. The server will guarantee
 *   that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request ID,
 *   the server can check if original operation with the same request ID was
 *   received, and if so, will ignore the second request. This prevents clients
 *   from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.materialize_channel.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_MaterializeChannel_async
 */
  materializeChannel(
      request?: protos.google.cloud.visionai.v1alpha1.IMaterializeChannelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  materializeChannel(
      request: protos.google.cloud.visionai.v1alpha1.IMaterializeChannelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  materializeChannel(
      request: protos.google.cloud.visionai.v1alpha1.IMaterializeChannelRequest,
      callback: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  materializeChannel(
      request?: protos.google.cloud.visionai.v1alpha1.IMaterializeChannelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.materializeChannel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `materializeChannel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.materialize_channel.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_MaterializeChannel_async
 */
  async checkMaterializeChannelProgress(name: string): Promise<LROperation<protos.google.cloud.visionai.v1alpha1.Channel, protos.google.cloud.visionai.v1alpha1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.materializeChannel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.visionai.v1alpha1.Channel, protos.google.cloud.visionai.v1alpha1.OperationMetadata>;
  }
 /**
 * Lists Clusters in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListClustersRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Cluster]{@link google.cloud.visionai.v1alpha1.Cluster}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listClusters(
      request?: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICluster[],
        protos.google.cloud.visionai.v1alpha1.IListClustersRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListClustersResponse
      ]>;
  listClusters(
      request: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
          protos.google.cloud.visionai.v1alpha1.IListClustersResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICluster>): void;
  listClusters(
      request: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
          protos.google.cloud.visionai.v1alpha1.IListClustersResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICluster>): void;
  listClusters(
      request?: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
          protos.google.cloud.visionai.v1alpha1.IListClustersResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICluster>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
          protos.google.cloud.visionai.v1alpha1.IListClustersResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ICluster>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ICluster[],
        protos.google.cloud.visionai.v1alpha1.IListClustersRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListClustersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listClusters(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListClustersRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Cluster]{@link google.cloud.visionai.v1alpha1.Cluster} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listClustersStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.createStream(
      this.innerApiCalls.listClusters as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listClusters`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListClustersRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Cluster]{@link google.cloud.visionai.v1alpha1.Cluster}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.list_clusters.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_ListClusters_async
 */
  listClustersAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListClustersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.ICluster>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.asyncIterate(
      this.innerApiCalls['listClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.ICluster>;
  }
 /**
 * Lists Streams in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListStreamsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Stream]{@link google.cloud.visionai.v1alpha1.Stream}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listStreams(
      request?: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IStream[],
        protos.google.cloud.visionai.v1alpha1.IListStreamsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListStreamsResponse
      ]>;
  listStreams(
      request: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
          protos.google.cloud.visionai.v1alpha1.IListStreamsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IStream>): void;
  listStreams(
      request: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
          protos.google.cloud.visionai.v1alpha1.IListStreamsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IStream>): void;
  listStreams(
      request?: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
          protos.google.cloud.visionai.v1alpha1.IListStreamsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IStream>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
          protos.google.cloud.visionai.v1alpha1.IListStreamsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IStream>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IStream[],
        protos.google.cloud.visionai.v1alpha1.IListStreamsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListStreamsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listStreams(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListStreamsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Stream]{@link google.cloud.visionai.v1alpha1.Stream} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listStreamsStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listStreams'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreams.createStream(
      this.innerApiCalls.listStreams as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listStreams`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListStreamsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Stream]{@link google.cloud.visionai.v1alpha1.Stream}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.list_streams.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_ListStreams_async
 */
  listStreamsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListStreamsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.IStream>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listStreams'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreams.asyncIterate(
      this.innerApiCalls['listStreams'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.IStream>;
  }
 /**
 * Lists Events in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListEventsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Event]{@link google.cloud.visionai.v1alpha1.Event}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEvents(
      request?: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IEvent[],
        protos.google.cloud.visionai.v1alpha1.IListEventsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListEventsResponse
      ]>;
  listEvents(
      request: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
          protos.google.cloud.visionai.v1alpha1.IListEventsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IEvent>): void;
  listEvents(
      request: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
          protos.google.cloud.visionai.v1alpha1.IListEventsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IEvent>): void;
  listEvents(
      request?: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
          protos.google.cloud.visionai.v1alpha1.IListEventsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IEvent>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
          protos.google.cloud.visionai.v1alpha1.IListEventsResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.IEvent>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.IEvent[],
        protos.google.cloud.visionai.v1alpha1.IListEventsRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListEventsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listEvents(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListEventsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Event]{@link google.cloud.visionai.v1alpha1.Event} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEventsStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.createStream(
      this.innerApiCalls.listEvents as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listEvents`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListEventsRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Event]{@link google.cloud.visionai.v1alpha1.Event}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.list_events.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_ListEvents_async
 */
  listEventsAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListEventsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.IEvent>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.asyncIterate(
      this.innerApiCalls['listEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.IEvent>;
  }
 /**
 * Lists Series in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListSeriesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Series]{@link google.cloud.visionai.v1alpha1.Series}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSeriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISeries[],
        protos.google.cloud.visionai.v1alpha1.IListSeriesRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListSeriesResponse
      ]>;
  listSeries(
      request: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
          protos.google.cloud.visionai.v1alpha1.IListSeriesResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISeries>): void;
  listSeries(
      request: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      callback: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
          protos.google.cloud.visionai.v1alpha1.IListSeriesResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISeries>): void;
  listSeries(
      request?: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
          protos.google.cloud.visionai.v1alpha1.IListSeriesResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISeries>,
      callback?: PaginationCallback<
          protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
          protos.google.cloud.visionai.v1alpha1.IListSeriesResponse|null|undefined,
          protos.google.cloud.visionai.v1alpha1.ISeries>):
      Promise<[
        protos.google.cloud.visionai.v1alpha1.ISeries[],
        protos.google.cloud.visionai.v1alpha1.IListSeriesRequest|null,
        protos.google.cloud.visionai.v1alpha1.IListSeriesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listSeries(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListSeriesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Series]{@link google.cloud.visionai.v1alpha1.Series} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSeriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSeriesStream(
      request?: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSeries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSeries.createStream(
      this.innerApiCalls.listSeries as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSeries`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListSeriesRequest.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer items than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 * @param {string} request.filter
 *   Filtering results.
 * @param {string} request.orderBy
 *   Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Series]{@link google.cloud.visionai.v1alpha1.Series}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/streams_service.list_series.js</caption>
 * region_tag:visionai_v1alpha1_generated_StreamsService_ListSeries_async
 */
  listSeriesAsync(
      request?: protos.google.cloud.visionai.v1alpha1.IListSeriesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISeries>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSeries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSeries.asyncIterate(
      this.innerApiCalls['listSeries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.visionai.v1alpha1.ISeries>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified analysis resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} analysis
   * @returns {string} Resource name string.
   */
  analysisPath(project:string,location:string,cluster:string,analysis:string) {
    return this.pathTemplates.analysisPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      analysis: analysis,
    });
  }

  /**
   * Parse the project from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).project;
  }

  /**
   * Parse the location from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).location;
  }

  /**
   * Parse the cluster from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).cluster;
  }

  /**
   * Parse the analysis from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the analysis.
   */
  matchAnalysisFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).analysis;
  }

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(projectNumber:string,location:string,corpus:string,asset:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
      annotation: annotation,
    });
  }

  /**
   * Parse the project_number from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project_number;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the corpus from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).corpus;
  }

  /**
   * Parse the asset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).asset;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified application resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @returns {string} Resource name string.
   */
  applicationPath(project:string,location:string,application:string) {
    return this.pathTemplates.applicationPathTemplate.render({
      project: project,
      location: location,
      application: application,
    });
  }

  /**
   * Parse the project from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).project;
  }

  /**
   * Parse the location from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).location;
  }

  /**
   * Parse the application from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).application;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(projectNumber:string,location:string,corpus:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      asset: asset,
    });
  }

  /**
   * Parse the project_number from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project_number;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the corpus from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).corpus;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project:string,location:string,cluster:string,channel:string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the cluster from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).cluster;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project:string,location:string,cluster:string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified corpus resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @returns {string} Resource name string.
   */
  corpusPath(projectNumber:string,location:string,corpus:string) {
    return this.pathTemplates.corpusPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
    });
  }

  /**
   * Parse the project_number from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).project_number;
  }

  /**
   * Parse the location from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).location;
  }

  /**
   * Parse the corpus from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).corpus;
  }

  /**
   * Return a fully-qualified dataSchema resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} data_schema
   * @returns {string} Resource name string.
   */
  dataSchemaPath(projectNumber:string,location:string,corpus:string,dataSchema:string) {
    return this.pathTemplates.dataSchemaPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      data_schema: dataSchema,
    });
  }

  /**
   * Parse the project_number from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).project_number;
  }

  /**
   * Parse the location from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).location;
  }

  /**
   * Parse the corpus from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).corpus;
  }

  /**
   * Parse the data_schema from DataSchema resource.
   *
   * @param {string} dataSchemaName
   *   A fully-qualified path representing DataSchema resource.
   * @returns {string} A string representing the data_schema.
   */
  matchDataSchemaFromDataSchemaName(dataSchemaName: string) {
    return this.pathTemplates.dataSchemaPathTemplate.match(dataSchemaName).data_schema;
  }

  /**
   * Return a fully-qualified draft resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} draft
   * @returns {string} Resource name string.
   */
  draftPath(project:string,location:string,application:string,draft:string) {
    return this.pathTemplates.draftPathTemplate.render({
      project: project,
      location: location,
      application: application,
      draft: draft,
    });
  }

  /**
   * Parse the project from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).project;
  }

  /**
   * Parse the location from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).location;
  }

  /**
   * Parse the application from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).application;
  }

  /**
   * Parse the draft from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the draft.
   */
  matchDraftFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).draft;
  }

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project:string,location:string,cluster:string,event:string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the cluster from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).cluster;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} application
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,application:string,instance:string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      application: application,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the application from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).application;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified processor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  processorPath(project:string,location:string,processor:string) {
    return this.pathTemplates.processorPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).project;
  }

  /**
   * Parse the location from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).location;
  }

  /**
   * Parse the processor from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).processor;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified searchConfig resource name string.
   *
   * @param {string} project_number
   * @param {string} location
   * @param {string} corpus
   * @param {string} search_config
   * @returns {string} Resource name string.
   */
  searchConfigPath(projectNumber:string,location:string,corpus:string,searchConfig:string) {
    return this.pathTemplates.searchConfigPathTemplate.render({
      project_number: projectNumber,
      location: location,
      corpus: corpus,
      search_config: searchConfig,
    });
  }

  /**
   * Parse the project_number from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the project_number.
   */
  matchProjectNumberFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).project_number;
  }

  /**
   * Parse the location from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).location;
  }

  /**
   * Parse the corpus from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).corpus;
  }

  /**
   * Parse the search_config from SearchConfig resource.
   *
   * @param {string} searchConfigName
   *   A fully-qualified path representing SearchConfig resource.
   * @returns {string} A string representing the search_config.
   */
  matchSearchConfigFromSearchConfigName(searchConfigName: string) {
    return this.pathTemplates.searchConfigPathTemplate.match(searchConfigName).search_config;
  }

  /**
   * Return a fully-qualified series resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} series
   * @returns {string} Resource name string.
   */
  seriesPath(project:string,location:string,cluster:string,series:string) {
    return this.pathTemplates.seriesPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      series: series,
    });
  }

  /**
   * Parse the project from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).project;
  }

  /**
   * Parse the location from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).location;
  }

  /**
   * Parse the cluster from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).cluster;
  }

  /**
   * Parse the series from Series resource.
   *
   * @param {string} seriesName
   *   A fully-qualified path representing Series resource.
   * @returns {string} A string representing the series.
   */
  matchSeriesFromSeriesName(seriesName: string) {
    return this.pathTemplates.seriesPathTemplate.match(seriesName).series;
  }

  /**
   * Return a fully-qualified stream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  streamPath(project:string,location:string,cluster:string,stream:string) {
    return this.pathTemplates.streamPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      stream: stream,
    });
  }

  /**
   * Parse the project from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).project;
  }

  /**
   * Parse the location from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).location;
  }

  /**
   * Parse the cluster from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).cluster;
  }

  /**
   * Parse the stream from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.streamsServiceStub && !this._terminated) {
      return this.streamsServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
