// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as streamingserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.StreamingServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = streamingserviceModule.v1alpha1.StreamingServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = streamingserviceModule.v1alpha1.StreamingServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = streamingserviceModule.v1alpha1.StreamingServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.streamingServiceStub, undefined);
            await client.initialize();
            assert(client.streamingServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.streamingServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.streamingServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('acquireLease', () => {
        it('invokes acquireLease without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AcquireLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AcquireLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Lease()
            );
            client.innerApiCalls.acquireLease = stubSimpleCall(expectedResponse);
            const [response] = await client.acquireLease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes acquireLease without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AcquireLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AcquireLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Lease()
            );
            client.innerApiCalls.acquireLease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.acquireLease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ILease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes acquireLease with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AcquireLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AcquireLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.acquireLease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.acquireLease(request), expectedError);
            const actualRequest = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.acquireLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes acquireLease with closed client', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AcquireLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AcquireLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.acquireLease(request), expectedError);
        });
    });

    describe('renewLease', () => {
        it('invokes renewLease without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RenewLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RenewLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Lease()
            );
            client.innerApiCalls.renewLease = stubSimpleCall(expectedResponse);
            const [response] = await client.renewLease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes renewLease without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RenewLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RenewLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Lease()
            );
            client.innerApiCalls.renewLease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.renewLease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ILease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes renewLease with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RenewLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RenewLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.renewLease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.renewLease(request), expectedError);
            const actualRequest = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.renewLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes renewLease with closed client', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RenewLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RenewLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.renewLease(request), expectedError);
        });
    });

    describe('releaseLease', () => {
        it('invokes releaseLease without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseResponse()
            );
            client.innerApiCalls.releaseLease = stubSimpleCall(expectedResponse);
            const [response] = await client.releaseLease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes releaseLease without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseResponse()
            );
            client.innerApiCalls.releaseLease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.releaseLease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IReleaseLeaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes releaseLease with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedHeaderRequestParams = `series=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.releaseLease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.releaseLease(request), expectedError);
            const actualRequest = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.releaseLease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes releaseLease with closed client', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ReleaseLeaseRequest', ['series']);
            request.series = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.releaseLease(request), expectedError);
        });
    });

    describe('sendPackets', () => {
        it('invokes sendPackets without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SendPacketsRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SendPacketsResponse()
            );
            client.innerApiCalls.sendPackets = stubBidiStreamingCall(expectedResponse);
            const stream = client.sendPackets();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SendPacketsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.sendPackets as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes sendPackets with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SendPacketsRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.sendPackets = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.sendPackets();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SendPacketsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.sendPackets as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('receivePackets', () => {
        it('invokes receivePackets without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceivePacketsRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceivePacketsResponse()
            );
            client.innerApiCalls.receivePackets = stubBidiStreamingCall(expectedResponse);
            const stream = client.receivePackets();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.ReceivePacketsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.receivePackets as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes receivePackets with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceivePacketsRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.receivePackets = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.receivePackets();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.ReceivePacketsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.receivePackets as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('receiveEvents', () => {
        it('invokes receiveEvents without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceiveEventsRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceiveEventsResponse()
            );
            client.innerApiCalls.receiveEvents = stubBidiStreamingCall(expectedResponse);
            const stream = client.receiveEvents();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.ReceiveEventsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.receiveEvents as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes receiveEvents with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ReceiveEventsRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.receiveEvents = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.receiveEvents();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.ReceiveEventsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.receiveEvents as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('analysis', () => {
            const fakePath = "/rendered/path/analysis";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                analysis: "analysisValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.analysisPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.analysisPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('analysisPath', () => {
                const result = client.analysisPath("projectValue", "locationValue", "clusterValue", "analysisValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.analysisPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnalysisName', () => {
                const result = client.matchProjectFromAnalysisName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnalysisName', () => {
                const result = client.matchLocationFromAnalysisName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromAnalysisName', () => {
                const result = client.matchClusterFromAnalysisName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnalysisFromAnalysisName', () => {
                const result = client.matchAnalysisFromAnalysisName(fakePath);
                assert.strictEqual(result, "analysisValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('annotation', () => {
            const fakePath = "/rendered/path/annotation";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
                annotation: "annotationValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.annotationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationPath', () => {
                const result = client.annotationPath("projectNumberValue", "locationValue", "corpusValue", "assetValue", "annotationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAnnotationName', () => {
                const result = client.matchProjectNumberFromAnnotationName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationName', () => {
                const result = client.matchLocationFromAnnotationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAnnotationName', () => {
                const result = client.matchCorpusFromAnnotationName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAnnotationName', () => {
                const result = client.matchAssetFromAnnotationName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationFromAnnotationName', () => {
                const result = client.matchAnnotationFromAnnotationName(fakePath);
                assert.strictEqual(result, "annotationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('application', () => {
            const fakePath = "/rendered/path/application";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.applicationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.applicationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('applicationPath', () => {
                const result = client.applicationPath("projectValue", "locationValue", "applicationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.applicationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApplicationName', () => {
                const result = client.matchProjectFromApplicationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApplicationName', () => {
                const result = client.matchLocationFromApplicationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromApplicationName', () => {
                const result = client.matchApplicationFromApplicationName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("projectNumberValue", "locationValue", "corpusValue", "assetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAssetName', () => {
                const result = client.matchProjectNumberFromAssetName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAssetName', () => {
                const result = client.matchLocationFromAssetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAssetName', () => {
                const result = client.matchCorpusFromAssetName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAssetName', () => {
                const result = client.matchAssetFromAssetName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('channel', () => {
            const fakePath = "/rendered/path/channel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                channel: "channelValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.channelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.channelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('channelPath', () => {
                const result = client.channelPath("projectValue", "locationValue", "clusterValue", "channelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.channelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromChannelName', () => {
                const result = client.matchProjectFromChannelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromChannelName', () => {
                const result = client.matchLocationFromChannelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromChannelName', () => {
                const result = client.matchClusterFromChannelName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChannelFromChannelName', () => {
                const result = client.matchChannelFromChannelName(fakePath);
                assert.strictEqual(result, "channelValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('corpus', () => {
            const fakePath = "/rendered/path/corpus";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.corpusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.corpusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('corpusPath', () => {
                const result = client.corpusPath("projectNumberValue", "locationValue", "corpusValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.corpusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromCorpusName', () => {
                const result = client.matchProjectNumberFromCorpusName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCorpusName', () => {
                const result = client.matchLocationFromCorpusName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromCorpusName', () => {
                const result = client.matchCorpusFromCorpusName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataSchema', () => {
            const fakePath = "/rendered/path/dataSchema";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                data_schema: "dataSchemaValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dataSchemaPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataSchemaPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataSchemaPath', () => {
                const result = client.dataSchemaPath("projectNumberValue", "locationValue", "corpusValue", "dataSchemaValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataSchemaPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromDataSchemaName', () => {
                const result = client.matchProjectNumberFromDataSchemaName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataSchemaName', () => {
                const result = client.matchLocationFromDataSchemaName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromDataSchemaName', () => {
                const result = client.matchCorpusFromDataSchemaName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSchemaFromDataSchemaName', () => {
                const result = client.matchDataSchemaFromDataSchemaName(fakePath);
                assert.strictEqual(result, "dataSchemaValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('draft', () => {
            const fakePath = "/rendered/path/draft";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                draft: "draftValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.draftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.draftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('draftPath', () => {
                const result = client.draftPath("projectValue", "locationValue", "applicationValue", "draftValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.draftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDraftName', () => {
                const result = client.matchProjectFromDraftName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDraftName', () => {
                const result = client.matchLocationFromDraftName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromDraftName', () => {
                const result = client.matchApplicationFromDraftName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDraftFromDraftName', () => {
                const result = client.matchDraftFromDraftName(fakePath);
                assert.strictEqual(result, "draftValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('event', () => {
            const fakePath = "/rendered/path/event";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                event: "eventValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.eventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.eventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('eventPath', () => {
                const result = client.eventPath("projectValue", "locationValue", "clusterValue", "eventValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.eventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEventName', () => {
                const result = client.matchProjectFromEventName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEventName', () => {
                const result = client.matchLocationFromEventName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromEventName', () => {
                const result = client.matchClusterFromEventName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEventFromEventName', () => {
                const result = client.matchEventFromEventName(fakePath);
                assert.strictEqual(result, "eventValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                instance: "instanceValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "applicationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromInstanceName', () => {
                const result = client.matchApplicationFromInstanceName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('processor', () => {
            const fakePath = "/rendered/path/processor";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                processor: "processorValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.processorPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.processorPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('processorPath', () => {
                const result = client.processorPath("projectValue", "locationValue", "processorValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.processorPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProcessorName', () => {
                const result = client.matchProjectFromProcessorName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProcessorName', () => {
                const result = client.matchLocationFromProcessorName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProcessorFromProcessorName', () => {
                const result = client.matchProcessorFromProcessorName(fakePath);
                assert.strictEqual(result, "processorValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchConfig', () => {
            const fakePath = "/rendered/path/searchConfig";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                search_config: "searchConfigValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchConfigPath', () => {
                const result = client.searchConfigPath("projectNumberValue", "locationValue", "corpusValue", "searchConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromSearchConfigName', () => {
                const result = client.matchProjectNumberFromSearchConfigName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSearchConfigName', () => {
                const result = client.matchLocationFromSearchConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromSearchConfigName', () => {
                const result = client.matchCorpusFromSearchConfigName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchConfigFromSearchConfigName', () => {
                const result = client.matchSearchConfigFromSearchConfigName(fakePath);
                assert.strictEqual(result, "searchConfigValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('series', () => {
            const fakePath = "/rendered/path/series";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                series: "seriesValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.seriesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.seriesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('seriesPath', () => {
                const result = client.seriesPath("projectValue", "locationValue", "clusterValue", "seriesValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.seriesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSeriesName', () => {
                const result = client.matchProjectFromSeriesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSeriesName', () => {
                const result = client.matchLocationFromSeriesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromSeriesName', () => {
                const result = client.matchClusterFromSeriesName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeriesFromSeriesName', () => {
                const result = client.matchSeriesFromSeriesName(fakePath);
                assert.strictEqual(result, "seriesValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('stream', () => {
            const fakePath = "/rendered/path/stream";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                stream: "streamValue",
            };
            const client = new streamingserviceModule.v1alpha1.StreamingServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.streamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.streamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('streamPath', () => {
                const result = client.streamPath("projectValue", "locationValue", "clusterValue", "streamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.streamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromStreamName', () => {
                const result = client.matchProjectFromStreamName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromStreamName', () => {
                const result = client.matchLocationFromStreamName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromStreamName', () => {
                const result = client.matchClusterFromStreamName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStreamFromStreamName', () => {
                const result = client.matchStreamFromStreamName(fakePath);
                assert.strictEqual(result, "streamValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
