// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as appplatformModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.AppPlatformClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = appplatformModule.v1alpha1.AppPlatformClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = appplatformModule.v1alpha1.AppPlatformClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = appplatformModule.v1alpha1.AppPlatformClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.appPlatformStub, undefined);
            await client.initialize();
            assert(client.appPlatformStub);
        });

        it('has close method for the initialized client', done => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.appPlatformStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.appPlatformStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getApplication', () => {
        it('invokes getApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Application()
            );
            client.innerApiCalls.getApplication = stubSimpleCall(expectedResponse);
            const [response] = await client.getApplication(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Application()
            );
            client.innerApiCalls.getApplication = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getApplication(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IApplication|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getApplication with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getApplication = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getApplication with closed client', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getApplication(request), expectedError);
        });
    });

    describe('getInstance', () => {
        it('invokes getInstance without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetInstanceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetInstanceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Instance()
            );
            client.innerApiCalls.getInstance = stubSimpleCall(expectedResponse);
            const [response] = await client.getInstance(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getInstance without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetInstanceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetInstanceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Instance()
            );
            client.innerApiCalls.getInstance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInstance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IInstance|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getInstance with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetInstanceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetInstanceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getInstance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInstance(request), expectedError);
            const actualRequest = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getInstance with closed client', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetInstanceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetInstanceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getInstance(request), expectedError);
        });
    });

    describe('getDraft', () => {
        it('invokes getDraft without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Draft()
            );
            client.innerApiCalls.getDraft = stubSimpleCall(expectedResponse);
            const [response] = await client.getDraft(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDraft without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Draft()
            );
            client.innerApiCalls.getDraft = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDraft(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDraft|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDraft with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDraft = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDraft(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDraft with closed client', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getDraft(request), expectedError);
        });
    });

    describe('listPrebuiltProcessors', () => {
        it('invokes listPrebuiltProcessors without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsResponse()
            );
            client.innerApiCalls.listPrebuiltProcessors = stubSimpleCall(expectedResponse);
            const [response] = await client.listPrebuiltProcessors(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPrebuiltProcessors without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsResponse()
            );
            client.innerApiCalls.listPrebuiltProcessors = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPrebuiltProcessors(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IListPrebuiltProcessorsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPrebuiltProcessors with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listPrebuiltProcessors = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPrebuiltProcessors(request), expectedError);
            const actualRequest = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPrebuiltProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPrebuiltProcessors with closed client', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListPrebuiltProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.listPrebuiltProcessors(request), expectedError);
        });
    });

    describe('getProcessor', () => {
        it('invokes getProcessor without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Processor()
            );
            client.innerApiCalls.getProcessor = stubSimpleCall(expectedResponse);
            const [response] = await client.getProcessor(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getProcessor without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Processor()
            );
            client.innerApiCalls.getProcessor = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getProcessor(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IProcessor|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getProcessor with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getProcessor = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getProcessor(request), expectedError);
            const actualRequest = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getProcessor with closed client', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getProcessor(request), expectedError);
        });
    });

    describe('createApplication', () => {
        it('invokes createApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createApplication = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createApplication(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createApplication = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createApplication(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IApplication, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IApplication, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplication with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createApplication = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplication with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createApplication = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createApplication(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateApplicationProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateApplicationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateApplicationProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateApplicationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateApplication', () => {
        it('invokes updateApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationRequest()
            );
            request.application ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationRequest', ['application', 'name']);
            request.application.name = defaultValue1;
            const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplication = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateApplication(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationRequest()
            );
            request.application ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationRequest', ['application', 'name']);
            request.application.name = defaultValue1;
            const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplication = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateApplication(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IApplication, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IApplication, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplication with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationRequest()
            );
            request.application ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationRequest', ['application', 'name']);
            request.application.name = defaultValue1;
            const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplication = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplication with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationRequest()
            );
            request.application ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationRequest', ['application', 'name']);
            request.application.name = defaultValue1;
            const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplication = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateApplication(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateApplicationProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateApplicationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateApplicationProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateApplicationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteApplication', () => {
        it('invokes deleteApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteApplication = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteApplication(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteApplication = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteApplication(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplication with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApplication = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplication with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApplication = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteApplication(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteApplicationProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteApplicationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteApplicationProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteApplicationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deployApplication', () => {
        it('invokes deployApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deployApplication = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deployApplication(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deployApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deployApplication = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deployApplication(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IDeployApplicationResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IDeployApplicationResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deployApplication with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deployApplication = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deployApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deployApplication with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deployApplication = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deployApplication(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeployApplicationProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeployApplicationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeployApplicationProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeployApplicationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeployApplication', () => {
        it('invokes undeployApplication without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UndeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UndeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeployApplication = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeployApplication(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeployApplication without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UndeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UndeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeployApplication = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeployApplication(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IUndeployApplicationResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeployApplication with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UndeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UndeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeployApplication = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeployApplication(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeployApplication with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UndeployApplicationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UndeployApplicationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeployApplication = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeployApplication(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeployApplication as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUndeployApplicationProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeployApplicationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeployApplicationProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeployApplicationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('addApplicationStreamInput', () => {
        it('invokes addApplicationStreamInput without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.addApplicationStreamInput = stubLongRunningCall(expectedResponse);
            const [operation] = await client.addApplicationStreamInput(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addApplicationStreamInput without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.addApplicationStreamInput = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addApplicationStreamInput(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IAddApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addApplicationStreamInput with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.addApplicationStreamInput = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.addApplicationStreamInput(request), expectedError);
            const actualRequest = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addApplicationStreamInput with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.AddApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.addApplicationStreamInput = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.addApplicationStreamInput(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkAddApplicationStreamInputProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAddApplicationStreamInputProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAddApplicationStreamInputProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAddApplicationStreamInputProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('removeApplicationStreamInput', () => {
        it('invokes removeApplicationStreamInput without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.removeApplicationStreamInput = stubLongRunningCall(expectedResponse);
            const [operation] = await client.removeApplicationStreamInput(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeApplicationStreamInput without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.removeApplicationStreamInput = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeApplicationStreamInput(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IRemoveApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeApplicationStreamInput with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.removeApplicationStreamInput = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.removeApplicationStreamInput(request), expectedError);
            const actualRequest = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeApplicationStreamInput with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.RemoveApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.removeApplicationStreamInput = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.removeApplicationStreamInput(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkRemoveApplicationStreamInputProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRemoveApplicationStreamInputProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRemoveApplicationStreamInputProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRemoveApplicationStreamInputProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateApplicationStreamInput', () => {
        it('invokes updateApplicationStreamInput without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplicationStreamInput = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateApplicationStreamInput(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationStreamInput without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplicationStreamInput = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateApplicationStreamInput(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IUpdateApplicationStreamInputResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationStreamInput with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplicationStreamInput = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateApplicationStreamInput(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationStreamInput with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationStreamInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplicationStreamInput = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateApplicationStreamInput(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationStreamInput as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateApplicationStreamInputProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateApplicationStreamInputProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateApplicationStreamInputProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateApplicationStreamInputProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createApplicationInstances', () => {
        it('invokes createApplicationInstances without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createApplicationInstances = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createApplicationInstances(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplicationInstances without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createApplicationInstances = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createApplicationInstances(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ICreateApplicationInstancesResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplicationInstances with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createApplicationInstances = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createApplicationInstances(request), expectedError);
            const actualRequest = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createApplicationInstances with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createApplicationInstances = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createApplicationInstances(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateApplicationInstancesProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateApplicationInstancesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateApplicationInstancesProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateApplicationInstancesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteApplicationInstances', () => {
        it('invokes deleteApplicationInstances without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteApplicationInstances = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteApplicationInstances(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplicationInstances without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteApplicationInstances = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteApplicationInstances(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IInstance, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IInstance, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplicationInstances with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApplicationInstances = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteApplicationInstances(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteApplicationInstances with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApplicationInstances = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteApplicationInstances(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteApplicationInstancesProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteApplicationInstancesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteApplicationInstancesProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteApplicationInstancesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateApplicationInstances', () => {
        it('invokes updateApplicationInstances without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplicationInstances = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateApplicationInstances(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationInstances without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateApplicationInstances = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateApplicationInstances(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IUpdateApplicationInstancesResponse, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationInstances with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplicationInstances = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateApplicationInstances(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateApplicationInstances with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateApplicationInstancesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApplicationInstances = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateApplicationInstances(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateApplicationInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateApplicationInstancesProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateApplicationInstancesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateApplicationInstancesProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateApplicationInstancesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createDraft', () => {
        it('invokes createDraft without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDraftRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDraft = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createDraft(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDraft without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDraftRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDraft = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDraft(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IDraft, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IDraft, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDraft with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDraftRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDraft = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createDraft(request), expectedError);
            const actualRequest = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDraft with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDraftRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDraft = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createDraft(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateDraftProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateDraftProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateDraftProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateDraftProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateDraft', () => {
        it('invokes updateDraft without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDraftRequest()
            );
            request.draft ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDraftRequest', ['draft', 'name']);
            request.draft.name = defaultValue1;
            const expectedHeaderRequestParams = `draft.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateDraft = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateDraft(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDraft without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDraftRequest()
            );
            request.draft ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDraftRequest', ['draft', 'name']);
            request.draft.name = defaultValue1;
            const expectedHeaderRequestParams = `draft.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateDraft = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDraft(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IDraft, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IDraft, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDraft with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDraftRequest()
            );
            request.draft ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDraftRequest', ['draft', 'name']);
            request.draft.name = defaultValue1;
            const expectedHeaderRequestParams = `draft.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDraft = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateDraft(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDraft with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDraftRequest()
            );
            request.draft ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDraftRequest', ['draft', 'name']);
            request.draft.name = defaultValue1;
            const expectedHeaderRequestParams = `draft.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDraft = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateDraft(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateDraftProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateDraftProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateDraftProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateDraftProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteDraft', () => {
        it('invokes deleteDraft without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDraft = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteDraft(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDraft without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDraft = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDraft(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDraft with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDraft = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteDraft(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDraft with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDraftRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDraftRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDraft = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteDraft(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDraft as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteDraftProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteDraftProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteDraftProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteDraftProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createProcessor', () => {
        it('invokes createProcessor without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateProcessorRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createProcessor = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createProcessor(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createProcessor without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateProcessorRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createProcessor = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createProcessor(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IProcessor, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IProcessor, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createProcessor with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateProcessorRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createProcessor = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createProcessor(request), expectedError);
            const actualRequest = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createProcessor with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateProcessorRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createProcessor = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createProcessor(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateProcessorProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateProcessorProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateProcessorProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateProcessorProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateProcessor', () => {
        it('invokes updateProcessor without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateProcessorRequest()
            );
            request.processor ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateProcessorRequest', ['processor', 'name']);
            request.processor.name = defaultValue1;
            const expectedHeaderRequestParams = `processor.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateProcessor = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateProcessor(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateProcessor without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateProcessorRequest()
            );
            request.processor ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateProcessorRequest', ['processor', 'name']);
            request.processor.name = defaultValue1;
            const expectedHeaderRequestParams = `processor.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateProcessor = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateProcessor(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IProcessor, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IProcessor, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateProcessor with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateProcessorRequest()
            );
            request.processor ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateProcessorRequest', ['processor', 'name']);
            request.processor.name = defaultValue1;
            const expectedHeaderRequestParams = `processor.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateProcessor = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateProcessor(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateProcessor with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateProcessorRequest()
            );
            request.processor ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateProcessorRequest', ['processor', 'name']);
            request.processor.name = defaultValue1;
            const expectedHeaderRequestParams = `processor.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateProcessor = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateProcessor(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateProcessorProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateProcessorProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateProcessorProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateProcessorProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteProcessor', () => {
        it('invokes deleteProcessor without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteProcessor = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteProcessor(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteProcessor without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteProcessor = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteProcessor(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteProcessor with call error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteProcessor = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteProcessor(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteProcessor with LRO error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteProcessorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteProcessorRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteProcessor = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteProcessor(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteProcessor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteProcessorProgress without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteProcessorProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteProcessorProgress with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteProcessorProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listApplications', () => {
        it('invokes listApplications without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
            ];
            client.innerApiCalls.listApplications = stubSimpleCall(expectedResponse);
            const [response] = await client.listApplications(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listApplications without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
            ];
            client.innerApiCalls.listApplications = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listApplications(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IApplication[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listApplications with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listApplications = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listApplications(request), expectedError);
            const actualRequest = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listApplications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listApplicationsStream without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
            ];
            client.descriptors.page.listApplications.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listApplicationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Application[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Application) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listApplications.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApplications, request));
            assert(
                (client.descriptors.page.listApplications.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listApplicationsStream with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listApplications.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listApplicationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Application[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Application) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listApplications.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApplications, request));
            assert(
                (client.descriptors.page.listApplications.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listApplications without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Application()),
            ];
            client.descriptors.page.listApplications.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IApplication[] = [];
            const iterable = client.listApplicationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listApplications.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listApplications.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listApplications with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListApplicationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListApplicationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listApplications.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listApplicationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IApplication[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listApplications.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listApplications.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listInstances', () => {
        it('invokes listInstances without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCall(expectedResponse);
            const [response] = await client.listInstances(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listInstances without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listInstances(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IInstance[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listInstances with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listInstances = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listInstances(request), expectedError);
            const actualRequest = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listInstancesStream without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
            ];
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listInstancesStream with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listInstances without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Instance()),
            ];
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IInstance[] = [];
            const iterable = client.listInstancesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listInstances with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListInstancesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListInstancesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listInstancesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IInstance[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDrafts', () => {
        it('invokes listDrafts without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
            ];
            client.innerApiCalls.listDrafts = stubSimpleCall(expectedResponse);
            const [response] = await client.listDrafts(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDrafts without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
            ];
            client.innerApiCalls.listDrafts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDrafts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDraft[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDrafts with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDrafts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDrafts(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDrafts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDraftsStream without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
            ];
            client.descriptors.page.listDrafts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDraftsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Draft[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Draft) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDrafts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDrafts, request));
            assert(
                (client.descriptors.page.listDrafts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDraftsStream with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDrafts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDraftsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Draft[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Draft) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDrafts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDrafts, request));
            assert(
                (client.descriptors.page.listDrafts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDrafts without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Draft()),
            ];
            client.descriptors.page.listDrafts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IDraft[] = [];
            const iterable = client.listDraftsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDrafts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDrafts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDrafts with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDraftsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDraftsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDrafts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDraftsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IDraft[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDrafts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDrafts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listProcessors', () => {
        it('invokes listProcessors without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
            ];
            client.innerApiCalls.listProcessors = stubSimpleCall(expectedResponse);
            const [response] = await client.listProcessors(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listProcessors without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
            ];
            client.innerApiCalls.listProcessors = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listProcessors(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IProcessor[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listProcessors with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listProcessors = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listProcessors(request), expectedError);
            const actualRequest = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listProcessors as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listProcessorsStream without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
            ];
            client.descriptors.page.listProcessors.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listProcessorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Processor[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Processor) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listProcessors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProcessors, request));
            assert(
                (client.descriptors.page.listProcessors.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listProcessorsStream with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listProcessors.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listProcessorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Processor[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Processor) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listProcessors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProcessors, request));
            assert(
                (client.descriptors.page.listProcessors.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listProcessors without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Processor()),
            ];
            client.descriptors.page.listProcessors.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IProcessor[] = [];
            const iterable = client.listProcessorsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listProcessors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listProcessors.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listProcessors with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListProcessorsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListProcessorsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listProcessors.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listProcessorsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IProcessor[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listProcessors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listProcessors.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('analysis', () => {
            const fakePath = "/rendered/path/analysis";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                analysis: "analysisValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.analysisPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.analysisPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('analysisPath', () => {
                const result = client.analysisPath("projectValue", "locationValue", "clusterValue", "analysisValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.analysisPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnalysisName', () => {
                const result = client.matchProjectFromAnalysisName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnalysisName', () => {
                const result = client.matchLocationFromAnalysisName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromAnalysisName', () => {
                const result = client.matchClusterFromAnalysisName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnalysisFromAnalysisName', () => {
                const result = client.matchAnalysisFromAnalysisName(fakePath);
                assert.strictEqual(result, "analysisValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('annotation', () => {
            const fakePath = "/rendered/path/annotation";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
                annotation: "annotationValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.annotationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationPath', () => {
                const result = client.annotationPath("projectNumberValue", "locationValue", "corpusValue", "assetValue", "annotationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAnnotationName', () => {
                const result = client.matchProjectNumberFromAnnotationName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationName', () => {
                const result = client.matchLocationFromAnnotationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAnnotationName', () => {
                const result = client.matchCorpusFromAnnotationName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAnnotationName', () => {
                const result = client.matchAssetFromAnnotationName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationFromAnnotationName', () => {
                const result = client.matchAnnotationFromAnnotationName(fakePath);
                assert.strictEqual(result, "annotationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('application', () => {
            const fakePath = "/rendered/path/application";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.applicationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.applicationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('applicationPath', () => {
                const result = client.applicationPath("projectValue", "locationValue", "applicationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.applicationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApplicationName', () => {
                const result = client.matchProjectFromApplicationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApplicationName', () => {
                const result = client.matchLocationFromApplicationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromApplicationName', () => {
                const result = client.matchApplicationFromApplicationName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("projectNumberValue", "locationValue", "corpusValue", "assetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAssetName', () => {
                const result = client.matchProjectNumberFromAssetName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAssetName', () => {
                const result = client.matchLocationFromAssetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAssetName', () => {
                const result = client.matchCorpusFromAssetName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAssetName', () => {
                const result = client.matchAssetFromAssetName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('channel', () => {
            const fakePath = "/rendered/path/channel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                channel: "channelValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.channelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.channelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('channelPath', () => {
                const result = client.channelPath("projectValue", "locationValue", "clusterValue", "channelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.channelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromChannelName', () => {
                const result = client.matchProjectFromChannelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromChannelName', () => {
                const result = client.matchLocationFromChannelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromChannelName', () => {
                const result = client.matchClusterFromChannelName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChannelFromChannelName', () => {
                const result = client.matchChannelFromChannelName(fakePath);
                assert.strictEqual(result, "channelValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('corpus', () => {
            const fakePath = "/rendered/path/corpus";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.corpusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.corpusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('corpusPath', () => {
                const result = client.corpusPath("projectNumberValue", "locationValue", "corpusValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.corpusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromCorpusName', () => {
                const result = client.matchProjectNumberFromCorpusName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCorpusName', () => {
                const result = client.matchLocationFromCorpusName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromCorpusName', () => {
                const result = client.matchCorpusFromCorpusName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataSchema', () => {
            const fakePath = "/rendered/path/dataSchema";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                data_schema: "dataSchemaValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dataSchemaPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataSchemaPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataSchemaPath', () => {
                const result = client.dataSchemaPath("projectNumberValue", "locationValue", "corpusValue", "dataSchemaValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataSchemaPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromDataSchemaName', () => {
                const result = client.matchProjectNumberFromDataSchemaName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataSchemaName', () => {
                const result = client.matchLocationFromDataSchemaName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromDataSchemaName', () => {
                const result = client.matchCorpusFromDataSchemaName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSchemaFromDataSchemaName', () => {
                const result = client.matchDataSchemaFromDataSchemaName(fakePath);
                assert.strictEqual(result, "dataSchemaValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('draft', () => {
            const fakePath = "/rendered/path/draft";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                draft: "draftValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.draftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.draftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('draftPath', () => {
                const result = client.draftPath("projectValue", "locationValue", "applicationValue", "draftValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.draftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDraftName', () => {
                const result = client.matchProjectFromDraftName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDraftName', () => {
                const result = client.matchLocationFromDraftName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromDraftName', () => {
                const result = client.matchApplicationFromDraftName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDraftFromDraftName', () => {
                const result = client.matchDraftFromDraftName(fakePath);
                assert.strictEqual(result, "draftValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('event', () => {
            const fakePath = "/rendered/path/event";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                event: "eventValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.eventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.eventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('eventPath', () => {
                const result = client.eventPath("projectValue", "locationValue", "clusterValue", "eventValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.eventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEventName', () => {
                const result = client.matchProjectFromEventName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEventName', () => {
                const result = client.matchLocationFromEventName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromEventName', () => {
                const result = client.matchClusterFromEventName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEventFromEventName', () => {
                const result = client.matchEventFromEventName(fakePath);
                assert.strictEqual(result, "eventValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                instance: "instanceValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "applicationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromInstanceName', () => {
                const result = client.matchApplicationFromInstanceName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('processor', () => {
            const fakePath = "/rendered/path/processor";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                processor: "processorValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.processorPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.processorPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('processorPath', () => {
                const result = client.processorPath("projectValue", "locationValue", "processorValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.processorPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProcessorName', () => {
                const result = client.matchProjectFromProcessorName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProcessorName', () => {
                const result = client.matchLocationFromProcessorName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProcessorFromProcessorName', () => {
                const result = client.matchProcessorFromProcessorName(fakePath);
                assert.strictEqual(result, "processorValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchConfig', () => {
            const fakePath = "/rendered/path/searchConfig";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                search_config: "searchConfigValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchConfigPath', () => {
                const result = client.searchConfigPath("projectNumberValue", "locationValue", "corpusValue", "searchConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromSearchConfigName', () => {
                const result = client.matchProjectNumberFromSearchConfigName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSearchConfigName', () => {
                const result = client.matchLocationFromSearchConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromSearchConfigName', () => {
                const result = client.matchCorpusFromSearchConfigName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchConfigFromSearchConfigName', () => {
                const result = client.matchSearchConfigFromSearchConfigName(fakePath);
                assert.strictEqual(result, "searchConfigValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('series', () => {
            const fakePath = "/rendered/path/series";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                series: "seriesValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.seriesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.seriesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('seriesPath', () => {
                const result = client.seriesPath("projectValue", "locationValue", "clusterValue", "seriesValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.seriesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSeriesName', () => {
                const result = client.matchProjectFromSeriesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSeriesName', () => {
                const result = client.matchLocationFromSeriesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromSeriesName', () => {
                const result = client.matchClusterFromSeriesName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeriesFromSeriesName', () => {
                const result = client.matchSeriesFromSeriesName(fakePath);
                assert.strictEqual(result, "seriesValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('stream', () => {
            const fakePath = "/rendered/path/stream";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                stream: "streamValue",
            };
            const client = new appplatformModule.v1alpha1.AppPlatformClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.streamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.streamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('streamPath', () => {
                const result = client.streamPath("projectValue", "locationValue", "clusterValue", "streamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.streamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromStreamName', () => {
                const result = client.matchProjectFromStreamName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromStreamName', () => {
                const result = client.matchLocationFromStreamName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromStreamName', () => {
                const result = client.matchClusterFromStreamName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStreamFromStreamName', () => {
                const result = client.matchStreamFromStreamName(fakePath);
                assert.strictEqual(result, "streamValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
