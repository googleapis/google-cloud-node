// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as streamsserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.StreamsServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = streamsserviceModule.v1alpha1.StreamsServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = streamsserviceModule.v1alpha1.StreamsServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = streamsserviceModule.v1alpha1.StreamsServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.streamsServiceStub, undefined);
            await client.initialize();
            assert(client.streamsServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.streamsServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.streamsServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getCluster', () => {
        it('invokes getCluster without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Cluster()
            );
            client.innerApiCalls.getCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.getCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCluster without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Cluster()
            );
            client.innerApiCalls.getCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCluster(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ICluster|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCluster with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCluster with closed client', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getCluster(request), expectedError);
        });
    });

    describe('getStream', () => {
        it('invokes getStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Stream()
            );
            client.innerApiCalls.getStream = stubSimpleCall(expectedResponse);
            const [response] = await client.getStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getStream without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Stream()
            );
            client.innerApiCalls.getStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getStream(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getStream with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getStream(request), expectedError);
            const actualRequest = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getStream with closed client', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getStream(request), expectedError);
        });
    });

    describe('generateStreamHlsToken', () => {
        it('invokes generateStreamHlsToken without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest', ['stream']);
            request.stream = defaultValue1;
            const expectedHeaderRequestParams = `stream=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenResponse()
            );
            client.innerApiCalls.generateStreamHlsToken = stubSimpleCall(expectedResponse);
            const [response] = await client.generateStreamHlsToken(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateStreamHlsToken without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest', ['stream']);
            request.stream = defaultValue1;
            const expectedHeaderRequestParams = `stream=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenResponse()
            );
            client.innerApiCalls.generateStreamHlsToken = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.generateStreamHlsToken(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IGenerateStreamHlsTokenResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateStreamHlsToken with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest', ['stream']);
            request.stream = defaultValue1;
            const expectedHeaderRequestParams = `stream=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.generateStreamHlsToken = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.generateStreamHlsToken(request), expectedError);
            const actualRequest = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateStreamHlsToken as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateStreamHlsToken with closed client', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateStreamHlsTokenRequest', ['stream']);
            request.stream = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.generateStreamHlsToken(request), expectedError);
        });
    });

    describe('getEvent', () => {
        it('invokes getEvent without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Event()
            );
            client.innerApiCalls.getEvent = stubSimpleCall(expectedResponse);
            const [response] = await client.getEvent(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getEvent without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Event()
            );
            client.innerApiCalls.getEvent = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEvent(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IEvent|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getEvent with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getEvent = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getEvent with closed client', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getEvent(request), expectedError);
        });
    });

    describe('getSeries', () => {
        it('invokes getSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Series()
            );
            client.innerApiCalls.getSeries = stubSimpleCall(expectedResponse);
            const [response] = await client.getSeries(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSeries without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Series()
            );
            client.innerApiCalls.getSeries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSeries(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISeries|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSeries with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSeries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSeries(request), expectedError);
            const actualRequest = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSeries with closed client', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getSeries(request), expectedError);
        });
    });

    describe('createCluster', () => {
        it('invokes createCluster without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCluster without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCluster with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCluster with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateClusterProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateClusterProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateCluster', () => {
        it('invokes updateCluster without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateClusterRequest()
            );
            request.cluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateClusterRequest', ['cluster', 'name']);
            request.cluster.name = defaultValue1;
            const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCluster without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateClusterRequest()
            );
            request.cluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateClusterRequest', ['cluster', 'name']);
            request.cluster.name = defaultValue1;
            const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ICluster, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCluster with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateClusterRequest()
            );
            request.cluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateClusterRequest', ['cluster', 'name']);
            request.cluster.name = defaultValue1;
            const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCluster with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateClusterRequest()
            );
            request.cluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateClusterRequest', ['cluster', 'name']);
            request.cluster.name = defaultValue1;
            const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateClusterProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateClusterProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteCluster', () => {
        it('invokes deleteCluster without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCluster without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCluster with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCluster with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteClusterProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteClusterProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createStream', () => {
        it('invokes createStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateStreamRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createStream without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateStreamRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createStream with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateStreamRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createStream(request), expectedError);
            const actualRequest = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createStream with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateStreamRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createStream(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateStreamProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateStreamProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateStream', () => {
        it('invokes updateStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateStreamRequest()
            );
            request.stream ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateStreamRequest', ['stream', 'name']);
            request.stream.name = defaultValue1;
            const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateStream without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateStreamRequest()
            );
            request.stream ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateStreamRequest', ['stream', 'name']);
            request.stream.name = defaultValue1;
            const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IStream, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateStream with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateStreamRequest()
            );
            request.stream ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateStreamRequest', ['stream', 'name']);
            request.stream.name = defaultValue1;
            const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateStream(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateStream with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateStreamRequest()
            );
            request.stream ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateStreamRequest', ['stream', 'name']);
            request.stream.name = defaultValue1;
            const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateStream(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateStreamProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateStreamProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteStream', () => {
        it('invokes deleteStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteStream without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteStream with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteStream(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteStream with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteStreamRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteStreamRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteStream(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteStreamProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteStreamProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createEvent', () => {
        it('invokes createEvent without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createEvent = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createEvent(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createEvent without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createEvent = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createEvent(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createEvent with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createEvent = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createEvent with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createEvent = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createEvent(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateEventProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateEventProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateEventProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateEventProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateEvent', () => {
        it('invokes updateEvent without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateEventRequest()
            );
            request.event ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateEventRequest', ['event', 'name']);
            request.event.name = defaultValue1;
            const expectedHeaderRequestParams = `event.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateEvent = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateEvent(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateEvent without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateEventRequest()
            );
            request.event ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateEventRequest', ['event', 'name']);
            request.event.name = defaultValue1;
            const expectedHeaderRequestParams = `event.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateEvent = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateEvent(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IEvent, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateEvent with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateEventRequest()
            );
            request.event ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateEventRequest', ['event', 'name']);
            request.event.name = defaultValue1;
            const expectedHeaderRequestParams = `event.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateEvent = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateEvent with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateEventRequest()
            );
            request.event ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateEventRequest', ['event', 'name']);
            request.event.name = defaultValue1;
            const expectedHeaderRequestParams = `event.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateEvent = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateEvent(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateEventProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateEventProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateEventProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateEventProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteEvent', () => {
        it('invokes deleteEvent without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteEvent = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteEvent(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteEvent without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteEvent = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteEvent(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteEvent with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteEvent = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteEvent with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteEventRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteEvent = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteEvent(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteEventProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteEventProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteEventProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteEventProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createSeries', () => {
        it('invokes createSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createSeries = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createSeries(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSeries without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createSeries = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSeries(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSeries with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSeries = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createSeries(request), expectedError);
            const actualRequest = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSeries with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSeries = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createSeries(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateSeriesProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateSeriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateSeriesProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateSeriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateSeries', () => {
        it('invokes updateSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSeriesRequest()
            );
            request.series ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSeriesRequest', ['series', 'name']);
            request.series.name = defaultValue1;
            const expectedHeaderRequestParams = `series.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateSeries = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateSeries(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSeries without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSeriesRequest()
            );
            request.series ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSeriesRequest', ['series', 'name']);
            request.series.name = defaultValue1;
            const expectedHeaderRequestParams = `series.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateSeries = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSeries(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ISeries, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSeries with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSeriesRequest()
            );
            request.series ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSeriesRequest', ['series', 'name']);
            request.series.name = defaultValue1;
            const expectedHeaderRequestParams = `series.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSeries = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateSeries(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSeries with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSeriesRequest()
            );
            request.series ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSeriesRequest', ['series', 'name']);
            request.series.name = defaultValue1;
            const expectedHeaderRequestParams = `series.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSeries = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateSeries(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateSeriesProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateSeriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateSeriesProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateSeriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteSeries', () => {
        it('invokes deleteSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteSeries = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteSeries(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSeries without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteSeries = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSeries(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSeries with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSeries = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteSeries(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSeries with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSeriesRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSeries = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteSeries(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteSeriesProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteSeriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteSeriesProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteSeriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('materializeChannel', () => {
        it('invokes materializeChannel without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.MaterializeChannelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.MaterializeChannelRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.materializeChannel = stubLongRunningCall(expectedResponse);
            const [operation] = await client.materializeChannel(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes materializeChannel without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.MaterializeChannelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.MaterializeChannelRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.materializeChannel = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.materializeChannel(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.IChannel, protos.google.cloud.visionai.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes materializeChannel with call error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.MaterializeChannelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.MaterializeChannelRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.materializeChannel = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.materializeChannel(request), expectedError);
            const actualRequest = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes materializeChannel with LRO error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.MaterializeChannelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.MaterializeChannelRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.materializeChannel = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.materializeChannel(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.materializeChannel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkMaterializeChannelProgress without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkMaterializeChannelProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkMaterializeChannelProgress with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkMaterializeChannelProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listClusters', () => {
        it('invokes listClusters without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
            ];
            client.innerApiCalls.listClusters = stubSimpleCall(expectedResponse);
            const [response] = await client.listClusters(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listClusters without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
            ];
            client.innerApiCalls.listClusters = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listClusters(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ICluster[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listClusters with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listClusters = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listClusters(request), expectedError);
            const actualRequest = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listClustersStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
            ];
            client.descriptors.page.listClusters.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Cluster[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Cluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClusters, request));
            assert(
                (client.descriptors.page.listClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listClustersStream with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listClusters.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Cluster[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Cluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClusters, request));
            assert(
                (client.descriptors.page.listClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listClusters without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Cluster()),
            ];
            client.descriptors.page.listClusters.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.ICluster[] = [];
            const iterable = client.listClustersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listClusters with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listClusters.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listClustersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.ICluster[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listStreams', () => {
        it('invokes listStreams without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
            ];
            client.innerApiCalls.listStreams = stubSimpleCall(expectedResponse);
            const [response] = await client.listStreams(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listStreams without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
            ];
            client.innerApiCalls.listStreams = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listStreams(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IStream[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listStreams with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listStreams = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listStreams(request), expectedError);
            const actualRequest = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listStreamsStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
            ];
            client.descriptors.page.listStreams.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Stream[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Stream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStreams, request));
            assert(
                (client.descriptors.page.listStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listStreamsStream with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listStreams.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Stream[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Stream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStreams, request));
            assert(
                (client.descriptors.page.listStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listStreams without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Stream()),
            ];
            client.descriptors.page.listStreams.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IStream[] = [];
            const iterable = client.listStreamsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listStreams with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListStreamsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListStreamsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listStreams.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listStreamsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IStream[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listEvents', () => {
        it('invokes listEvents without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
            ];
            client.innerApiCalls.listEvents = stubSimpleCall(expectedResponse);
            const [response] = await client.listEvents(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEvents without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
            ];
            client.innerApiCalls.listEvents = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listEvents(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IEvent[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEvents with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listEvents = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listEvents(request), expectedError);
            const actualRequest = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEventsStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
            ];
            client.descriptors.page.listEvents.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listEventsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Event[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Event) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listEvents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEvents, request));
            assert(
                (client.descriptors.page.listEvents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listEventsStream with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listEvents.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listEventsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Event[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Event) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listEvents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEvents, request));
            assert(
                (client.descriptors.page.listEvents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listEvents without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Event()),
            ];
            client.descriptors.page.listEvents.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IEvent[] = [];
            const iterable = client.listEventsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listEvents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listEvents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listEvents with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listEvents.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listEventsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IEvent[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listEvents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listEvents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listSeries', () => {
        it('invokes listSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
            ];
            client.innerApiCalls.listSeries = stubSimpleCall(expectedResponse);
            const [response] = await client.listSeries(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSeries without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
            ];
            client.innerApiCalls.listSeries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSeries(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISeries[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSeries with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listSeries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSeries(request), expectedError);
            const actualRequest = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSeries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSeriesStream without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
            ];
            client.descriptors.page.listSeries.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSeriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Series[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Series) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSeries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSeries, request));
            assert(
                (client.descriptors.page.listSeries.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listSeriesStream with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSeries.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSeriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Series[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Series) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSeries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSeries, request));
            assert(
                (client.descriptors.page.listSeries.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listSeries without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Series()),
            ];
            client.descriptors.page.listSeries.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.ISeries[] = [];
            const iterable = client.listSeriesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSeries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSeries.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listSeries with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSeriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSeriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSeries.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSeriesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.ISeries[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSeries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSeries.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('analysis', () => {
            const fakePath = "/rendered/path/analysis";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                analysis: "analysisValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.analysisPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.analysisPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('analysisPath', () => {
                const result = client.analysisPath("projectValue", "locationValue", "clusterValue", "analysisValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.analysisPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnalysisName', () => {
                const result = client.matchProjectFromAnalysisName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnalysisName', () => {
                const result = client.matchLocationFromAnalysisName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromAnalysisName', () => {
                const result = client.matchClusterFromAnalysisName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnalysisFromAnalysisName', () => {
                const result = client.matchAnalysisFromAnalysisName(fakePath);
                assert.strictEqual(result, "analysisValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('annotation', () => {
            const fakePath = "/rendered/path/annotation";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
                annotation: "annotationValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.annotationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationPath', () => {
                const result = client.annotationPath("projectNumberValue", "locationValue", "corpusValue", "assetValue", "annotationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAnnotationName', () => {
                const result = client.matchProjectNumberFromAnnotationName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationName', () => {
                const result = client.matchLocationFromAnnotationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAnnotationName', () => {
                const result = client.matchCorpusFromAnnotationName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAnnotationName', () => {
                const result = client.matchAssetFromAnnotationName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationFromAnnotationName', () => {
                const result = client.matchAnnotationFromAnnotationName(fakePath);
                assert.strictEqual(result, "annotationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('application', () => {
            const fakePath = "/rendered/path/application";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.applicationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.applicationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('applicationPath', () => {
                const result = client.applicationPath("projectValue", "locationValue", "applicationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.applicationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApplicationName', () => {
                const result = client.matchProjectFromApplicationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApplicationName', () => {
                const result = client.matchLocationFromApplicationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromApplicationName', () => {
                const result = client.matchApplicationFromApplicationName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("projectNumberValue", "locationValue", "corpusValue", "assetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAssetName', () => {
                const result = client.matchProjectNumberFromAssetName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAssetName', () => {
                const result = client.matchLocationFromAssetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAssetName', () => {
                const result = client.matchCorpusFromAssetName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAssetName', () => {
                const result = client.matchAssetFromAssetName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('channel', () => {
            const fakePath = "/rendered/path/channel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                channel: "channelValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.channelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.channelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('channelPath', () => {
                const result = client.channelPath("projectValue", "locationValue", "clusterValue", "channelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.channelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromChannelName', () => {
                const result = client.matchProjectFromChannelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromChannelName', () => {
                const result = client.matchLocationFromChannelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromChannelName', () => {
                const result = client.matchClusterFromChannelName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChannelFromChannelName', () => {
                const result = client.matchChannelFromChannelName(fakePath);
                assert.strictEqual(result, "channelValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('corpus', () => {
            const fakePath = "/rendered/path/corpus";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.corpusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.corpusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('corpusPath', () => {
                const result = client.corpusPath("projectNumberValue", "locationValue", "corpusValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.corpusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromCorpusName', () => {
                const result = client.matchProjectNumberFromCorpusName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCorpusName', () => {
                const result = client.matchLocationFromCorpusName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromCorpusName', () => {
                const result = client.matchCorpusFromCorpusName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataSchema', () => {
            const fakePath = "/rendered/path/dataSchema";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                data_schema: "dataSchemaValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dataSchemaPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataSchemaPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataSchemaPath', () => {
                const result = client.dataSchemaPath("projectNumberValue", "locationValue", "corpusValue", "dataSchemaValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataSchemaPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromDataSchemaName', () => {
                const result = client.matchProjectNumberFromDataSchemaName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataSchemaName', () => {
                const result = client.matchLocationFromDataSchemaName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromDataSchemaName', () => {
                const result = client.matchCorpusFromDataSchemaName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSchemaFromDataSchemaName', () => {
                const result = client.matchDataSchemaFromDataSchemaName(fakePath);
                assert.strictEqual(result, "dataSchemaValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('draft', () => {
            const fakePath = "/rendered/path/draft";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                draft: "draftValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.draftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.draftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('draftPath', () => {
                const result = client.draftPath("projectValue", "locationValue", "applicationValue", "draftValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.draftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDraftName', () => {
                const result = client.matchProjectFromDraftName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDraftName', () => {
                const result = client.matchLocationFromDraftName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromDraftName', () => {
                const result = client.matchApplicationFromDraftName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDraftFromDraftName', () => {
                const result = client.matchDraftFromDraftName(fakePath);
                assert.strictEqual(result, "draftValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('event', () => {
            const fakePath = "/rendered/path/event";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                event: "eventValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.eventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.eventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('eventPath', () => {
                const result = client.eventPath("projectValue", "locationValue", "clusterValue", "eventValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.eventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEventName', () => {
                const result = client.matchProjectFromEventName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEventName', () => {
                const result = client.matchLocationFromEventName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromEventName', () => {
                const result = client.matchClusterFromEventName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEventFromEventName', () => {
                const result = client.matchEventFromEventName(fakePath);
                assert.strictEqual(result, "eventValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                instance: "instanceValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "applicationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromInstanceName', () => {
                const result = client.matchApplicationFromInstanceName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('processor', () => {
            const fakePath = "/rendered/path/processor";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                processor: "processorValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.processorPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.processorPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('processorPath', () => {
                const result = client.processorPath("projectValue", "locationValue", "processorValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.processorPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProcessorName', () => {
                const result = client.matchProjectFromProcessorName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProcessorName', () => {
                const result = client.matchLocationFromProcessorName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProcessorFromProcessorName', () => {
                const result = client.matchProcessorFromProcessorName(fakePath);
                assert.strictEqual(result, "processorValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchConfig', () => {
            const fakePath = "/rendered/path/searchConfig";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                search_config: "searchConfigValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchConfigPath', () => {
                const result = client.searchConfigPath("projectNumberValue", "locationValue", "corpusValue", "searchConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromSearchConfigName', () => {
                const result = client.matchProjectNumberFromSearchConfigName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSearchConfigName', () => {
                const result = client.matchLocationFromSearchConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromSearchConfigName', () => {
                const result = client.matchCorpusFromSearchConfigName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchConfigFromSearchConfigName', () => {
                const result = client.matchSearchConfigFromSearchConfigName(fakePath);
                assert.strictEqual(result, "searchConfigValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('series', () => {
            const fakePath = "/rendered/path/series";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                series: "seriesValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.seriesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.seriesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('seriesPath', () => {
                const result = client.seriesPath("projectValue", "locationValue", "clusterValue", "seriesValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.seriesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSeriesName', () => {
                const result = client.matchProjectFromSeriesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSeriesName', () => {
                const result = client.matchLocationFromSeriesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromSeriesName', () => {
                const result = client.matchClusterFromSeriesName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeriesFromSeriesName', () => {
                const result = client.matchSeriesFromSeriesName(fakePath);
                assert.strictEqual(result, "seriesValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('stream', () => {
            const fakePath = "/rendered/path/stream";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                stream: "streamValue",
            };
            const client = new streamsserviceModule.v1alpha1.StreamsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.streamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.streamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('streamPath', () => {
                const result = client.streamPath("projectValue", "locationValue", "clusterValue", "streamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.streamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromStreamName', () => {
                const result = client.matchProjectFromStreamName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromStreamName', () => {
                const result = client.matchLocationFromStreamName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromStreamName', () => {
                const result = client.matchClusterFromStreamName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStreamFromStreamName', () => {
                const result = client.matchStreamFromStreamName(fakePath);
                assert.strictEqual(result, "streamValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
