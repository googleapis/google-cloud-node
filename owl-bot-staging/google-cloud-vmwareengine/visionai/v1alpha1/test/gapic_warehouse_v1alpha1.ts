// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as warehouseModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.WarehouseClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = warehouseModule.v1alpha1.WarehouseClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = warehouseModule.v1alpha1.WarehouseClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = warehouseModule.v1alpha1.WarehouseClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.warehouseStub, undefined);
            await client.initialize();
            assert(client.warehouseStub);
        });

        it('has close method for the initialized client', done => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.warehouseStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.warehouseStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('createAsset', () => {
        it('invokes createAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAssetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.createAsset = stubSimpleCall(expectedResponse);
            const [response] = await client.createAsset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAsset without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAssetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.createAsset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAsset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAsset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAsset with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAssetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createAsset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createAsset(request), expectedError);
            const actualRequest = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAsset with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAssetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createAsset(request), expectedError);
        });
    });

    describe('updateAsset', () => {
        it('invokes updateAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAssetRequest()
            );
            request.asset ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAssetRequest', ['asset', 'name']);
            request.asset.name = defaultValue1;
            const expectedHeaderRequestParams = `asset.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.updateAsset = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAsset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAsset without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAssetRequest()
            );
            request.asset ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAssetRequest', ['asset', 'name']);
            request.asset.name = defaultValue1;
            const expectedHeaderRequestParams = `asset.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.updateAsset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAsset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAsset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAsset with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAssetRequest()
            );
            request.asset ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAssetRequest', ['asset', 'name']);
            request.asset.name = defaultValue1;
            const expectedHeaderRequestParams = `asset.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAsset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAsset(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAsset with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAssetRequest()
            );
            request.asset ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAssetRequest', ['asset', 'name']);
            request.asset.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateAsset(request), expectedError);
        });
    });

    describe('getAsset', () => {
        it('invokes getAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.getAsset = stubSimpleCall(expectedResponse);
            const [response] = await client.getAsset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAsset without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Asset()
            );
            client.innerApiCalls.getAsset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAsset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAsset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAsset with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getAsset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAsset(request), expectedError);
            const actualRequest = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAsset with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getAsset(request), expectedError);
        });
    });

    describe('getCorpus', () => {
        it('invokes getCorpus without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Corpus()
            );
            client.innerApiCalls.getCorpus = stubSimpleCall(expectedResponse);
            const [response] = await client.getCorpus(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCorpus without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Corpus()
            );
            client.innerApiCalls.getCorpus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCorpus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ICorpus|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCorpus with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCorpus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCorpus(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCorpus with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getCorpus(request), expectedError);
        });
    });

    describe('updateCorpus', () => {
        it('invokes updateCorpus without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateCorpusRequest()
            );
            request.corpus ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateCorpusRequest', ['corpus', 'name']);
            request.corpus.name = defaultValue1;
            const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Corpus()
            );
            client.innerApiCalls.updateCorpus = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCorpus(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCorpus without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateCorpusRequest()
            );
            request.corpus ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateCorpusRequest', ['corpus', 'name']);
            request.corpus.name = defaultValue1;
            const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Corpus()
            );
            client.innerApiCalls.updateCorpus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCorpus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ICorpus|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCorpus with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateCorpusRequest()
            );
            request.corpus ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateCorpusRequest', ['corpus', 'name']);
            request.corpus.name = defaultValue1;
            const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCorpus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCorpus(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCorpus with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateCorpusRequest()
            );
            request.corpus ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateCorpusRequest', ['corpus', 'name']);
            request.corpus.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateCorpus(request), expectedError);
        });
    });

    describe('deleteCorpus', () => {
        it('invokes deleteCorpus without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteCorpus = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteCorpus(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCorpus without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteCorpus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCorpus(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCorpus with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCorpus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteCorpus(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCorpus with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteCorpusRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteCorpus(request), expectedError);
        });
    });

    describe('createDataSchema', () => {
        it('invokes createDataSchema without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.createDataSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.createDataSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSchema without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.createDataSchema = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDataSchema(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDataSchema|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSchema with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDataSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createDataSchema(request), expectedError);
            const actualRequest = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSchema with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateDataSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createDataSchema(request), expectedError);
        });
    });

    describe('updateDataSchema', () => {
        it('invokes updateDataSchema without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest()
            );
            request.dataSchema ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest', ['dataSchema', 'name']);
            request.dataSchema.name = defaultValue1;
            const expectedHeaderRequestParams = `data_schema.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.updateDataSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.updateDataSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataSchema without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest()
            );
            request.dataSchema ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest', ['dataSchema', 'name']);
            request.dataSchema.name = defaultValue1;
            const expectedHeaderRequestParams = `data_schema.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.updateDataSchema = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDataSchema(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDataSchema|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataSchema with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest()
            );
            request.dataSchema ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest', ['dataSchema', 'name']);
            request.dataSchema.name = defaultValue1;
            const expectedHeaderRequestParams = `data_schema.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDataSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateDataSchema(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataSchema with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest()
            );
            request.dataSchema ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateDataSchemaRequest', ['dataSchema', 'name']);
            request.dataSchema.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateDataSchema(request), expectedError);
        });
    });

    describe('getDataSchema', () => {
        it('invokes getDataSchema without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.getDataSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.getDataSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataSchema without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DataSchema()
            );
            client.innerApiCalls.getDataSchema = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDataSchema(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDataSchema|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataSchema with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDataSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDataSchema(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataSchema with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getDataSchema(request), expectedError);
        });
    });

    describe('deleteDataSchema', () => {
        it('invokes deleteDataSchema without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDataSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSchema without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataSchema = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDataSchema(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSchema with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDataSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDataSchema(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSchema as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSchema with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteDataSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteDataSchema(request), expectedError);
        });
    });

    describe('createAnnotation', () => {
        it('invokes createAnnotation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAnnotationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.createAnnotation = stubSimpleCall(expectedResponse);
            const [response] = await client.createAnnotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAnnotation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAnnotationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.createAnnotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAnnotation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAnnotation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAnnotation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAnnotationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createAnnotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createAnnotation(request), expectedError);
            const actualRequest = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAnnotation with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateAnnotationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createAnnotation(request), expectedError);
        });
    });

    describe('getAnnotation', () => {
        it('invokes getAnnotation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.getAnnotation = stubSimpleCall(expectedResponse);
            const [response] = await client.getAnnotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAnnotation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.getAnnotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAnnotation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAnnotation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAnnotation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getAnnotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAnnotation(request), expectedError);
            const actualRequest = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAnnotation with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getAnnotation(request), expectedError);
        });
    });

    describe('updateAnnotation', () => {
        it('invokes updateAnnotation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest()
            );
            request.annotation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest', ['annotation', 'name']);
            request.annotation.name = defaultValue1;
            const expectedHeaderRequestParams = `annotation.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.updateAnnotation = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAnnotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAnnotation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest()
            );
            request.annotation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest', ['annotation', 'name']);
            request.annotation.name = defaultValue1;
            const expectedHeaderRequestParams = `annotation.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.Annotation()
            );
            client.innerApiCalls.updateAnnotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAnnotation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAnnotation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAnnotation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest()
            );
            request.annotation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest', ['annotation', 'name']);
            request.annotation.name = defaultValue1;
            const expectedHeaderRequestParams = `annotation.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAnnotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAnnotation(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAnnotation with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest()
            );
            request.annotation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateAnnotationRequest', ['annotation', 'name']);
            request.annotation.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateAnnotation(request), expectedError);
        });
    });

    describe('deleteAnnotation', () => {
        it('invokes deleteAnnotation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteAnnotation = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAnnotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAnnotation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteAnnotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAnnotation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAnnotation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAnnotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAnnotation(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAnnotation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAnnotation with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAnnotationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteAnnotation(request), expectedError);
        });
    });

    describe('clipAsset', () => {
        it('invokes clipAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ClipAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetResponse()
            );
            client.innerApiCalls.clipAsset = stubSimpleCall(expectedResponse);
            const [response] = await client.clipAsset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes clipAsset without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ClipAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetResponse()
            );
            client.innerApiCalls.clipAsset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.clipAsset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IClipAssetResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes clipAsset with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ClipAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.clipAsset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.clipAsset(request), expectedError);
            const actualRequest = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.clipAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes clipAsset with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ClipAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ClipAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.clipAsset(request), expectedError);
        });
    });

    describe('generateHlsUri', () => {
        it('invokes generateHlsUri without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriResponse()
            );
            client.innerApiCalls.generateHlsUri = stubSimpleCall(expectedResponse);
            const [response] = await client.generateHlsUri(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateHlsUri without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriResponse()
            );
            client.innerApiCalls.generateHlsUri = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.generateHlsUri(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IGenerateHlsUriResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateHlsUri with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.generateHlsUri = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.generateHlsUri(request), expectedError);
            const actualRequest = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateHlsUri as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateHlsUri with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GenerateHlsUriRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.generateHlsUri(request), expectedError);
        });
    });

    describe('createSearchConfig', () => {
        it('invokes createSearchConfig without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.createSearchConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.createSearchConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSearchConfig without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.createSearchConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSearchConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISearchConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSearchConfig with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSearchConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSearchConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSearchConfig with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateSearchConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createSearchConfig(request), expectedError);
        });
    });

    describe('updateSearchConfig', () => {
        it('invokes updateSearchConfig without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest()
            );
            request.searchConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest', ['searchConfig', 'name']);
            request.searchConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `search_config.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.updateSearchConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSearchConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSearchConfig without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest()
            );
            request.searchConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest', ['searchConfig', 'name']);
            request.searchConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `search_config.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.updateSearchConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSearchConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISearchConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSearchConfig with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest()
            );
            request.searchConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest', ['searchConfig', 'name']);
            request.searchConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `search_config.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSearchConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSearchConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSearchConfig with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest()
            );
            request.searchConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.UpdateSearchConfigRequest', ['searchConfig', 'name']);
            request.searchConfig.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateSearchConfig(request), expectedError);
        });
    });

    describe('getSearchConfig', () => {
        it('invokes getSearchConfig without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.getSearchConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getSearchConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSearchConfig without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchConfig()
            );
            client.innerApiCalls.getSearchConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSearchConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISearchConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSearchConfig with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSearchConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSearchConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSearchConfig with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.GetSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.GetSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getSearchConfig(request), expectedError);
        });
    });

    describe('deleteSearchConfig', () => {
        it('invokes deleteSearchConfig without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSearchConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSearchConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSearchConfig without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSearchConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSearchConfig(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSearchConfig with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSearchConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSearchConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSearchConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSearchConfig with closed client', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteSearchConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteSearchConfig(request), expectedError);
        });
    });

    describe('deleteAsset', () => {
        it('invokes deleteAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteAsset = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteAsset(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAsset without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteAsset = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAsset(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.visionai.v1alpha1.IDeleteAssetMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAsset with call error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAsset = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteAsset(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAsset with LRO error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.DeleteAssetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.DeleteAssetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAsset = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteAsset(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAsset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteAssetProgress without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteAssetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteAssetProgress with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteAssetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createCorpus', () => {
        it('invokes createCorpus without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateCorpusRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCorpus = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCorpus(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCorpus without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateCorpusRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCorpus = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCorpus(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.visionai.v1alpha1.ICorpus, protos.google.cloud.visionai.v1alpha1.ICreateCorpusMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCorpus with call error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateCorpusRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCorpus = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCorpus(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCorpus with LRO error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.CreateCorpusRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.CreateCorpusRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCorpus = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCorpus(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCorpus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateCorpusProgress without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateCorpusProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateCorpusProgress with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateCorpusProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('ingestAsset', () => {
        it('invokes ingestAsset without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.IngestAssetRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.IngestAssetResponse()
            );
            client.innerApiCalls.ingestAsset = stubBidiStreamingCall(expectedResponse);
            const stream = client.ingestAsset();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.IngestAssetResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.ingestAsset as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes ingestAsset with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.IngestAssetRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.ingestAsset = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.ingestAsset();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.IngestAssetResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.ingestAsset as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('listAssets', () => {
        it('invokes listAssets without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
            ];
            client.innerApiCalls.listAssets = stubSimpleCall(expectedResponse);
            const [response] = await client.listAssets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAssets without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
            ];
            client.innerApiCalls.listAssets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAssets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAsset[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAssets with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAssets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAssets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAssetsStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
            ];
            client.descriptors.page.listAssets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAssetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Asset[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Asset) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAssets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAssets, request));
            assert(
                (client.descriptors.page.listAssets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAssetsStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAssets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAssetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Asset[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Asset) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAssets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAssets, request));
            assert(
                (client.descriptors.page.listAssets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAssets without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Asset()),
            ];
            client.descriptors.page.listAssets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IAsset[] = [];
            const iterable = client.listAssetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAssets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAssets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAssets with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAssetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAssets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAssetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IAsset[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAssets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAssets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listCorpora', () => {
        it('invokes listCorpora without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
            ];
            client.innerApiCalls.listCorpora = stubSimpleCall(expectedResponse);
            const [response] = await client.listCorpora(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCorpora without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
            ];
            client.innerApiCalls.listCorpora = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCorpora(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ICorpus[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCorpora with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCorpora = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCorpora(request), expectedError);
            const actualRequest = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCorpora as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCorporaStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
            ];
            client.descriptors.page.listCorpora.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCorporaStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Corpus[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Corpus) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCorpora.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCorpora, request));
            assert(
                (client.descriptors.page.listCorpora.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listCorporaStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCorpora.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCorporaStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Corpus[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Corpus) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCorpora.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCorpora, request));
            assert(
                (client.descriptors.page.listCorpora.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listCorpora without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Corpus()),
            ];
            client.descriptors.page.listCorpora.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.ICorpus[] = [];
            const iterable = client.listCorporaAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCorpora.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCorpora.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listCorpora with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListCorporaRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListCorporaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCorpora.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCorporaAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.ICorpus[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCorpora.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCorpora.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDataSchemas', () => {
        it('invokes listDataSchemas without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
            ];
            client.innerApiCalls.listDataSchemas = stubSimpleCall(expectedResponse);
            const [response] = await client.listDataSchemas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSchemas without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
            ];
            client.innerApiCalls.listDataSchemas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDataSchemas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IDataSchema[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSchemas with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDataSchemas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDataSchemas(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSchemas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSchemasStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
            ];
            client.descriptors.page.listDataSchemas.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDataSchemasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.DataSchema[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.DataSchema) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDataSchemas.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSchemas, request));
            assert(
                (client.descriptors.page.listDataSchemas.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDataSchemasStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDataSchemas.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDataSchemasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.DataSchema[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.DataSchema) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDataSchemas.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSchemas, request));
            assert(
                (client.descriptors.page.listDataSchemas.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDataSchemas without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.DataSchema()),
            ];
            client.descriptors.page.listDataSchemas.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IDataSchema[] = [];
            const iterable = client.listDataSchemasAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSchemas.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDataSchemas.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDataSchemas with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListDataSchemasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListDataSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDataSchemas.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDataSchemasAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IDataSchema[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSchemas.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDataSchemas.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listAnnotations', () => {
        it('invokes listAnnotations without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
            ];
            client.innerApiCalls.listAnnotations = stubSimpleCall(expectedResponse);
            const [response] = await client.listAnnotations(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAnnotations without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
            ];
            client.innerApiCalls.listAnnotations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAnnotations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.IAnnotation[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAnnotations with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAnnotations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAnnotations(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAnnotations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAnnotationsStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
            ];
            client.descriptors.page.listAnnotations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAnnotationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Annotation[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Annotation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAnnotations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAnnotations, request));
            assert(
                (client.descriptors.page.listAnnotations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAnnotationsStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAnnotations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAnnotationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.Annotation[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.Annotation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAnnotations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAnnotations, request));
            assert(
                (client.descriptors.page.listAnnotations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAnnotations without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.Annotation()),
            ];
            client.descriptors.page.listAnnotations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.IAnnotation[] = [];
            const iterable = client.listAnnotationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAnnotations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAnnotations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAnnotations with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListAnnotationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListAnnotationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAnnotations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAnnotationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.IAnnotation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAnnotations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAnnotations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listSearchConfigs', () => {
        it('invokes listSearchConfigs without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
            ];
            client.innerApiCalls.listSearchConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listSearchConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSearchConfigs without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
            ];
            client.innerApiCalls.listSearchConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSearchConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISearchConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSearchConfigs with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listSearchConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSearchConfigs(request), expectedError);
            const actualRequest = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSearchConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSearchConfigsStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
            ];
            client.descriptors.page.listSearchConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSearchConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.SearchConfig[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SearchConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSearchConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSearchConfigs, request));
            assert(
                (client.descriptors.page.listSearchConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listSearchConfigsStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSearchConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSearchConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.SearchConfig[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SearchConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSearchConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSearchConfigs, request));
            assert(
                (client.descriptors.page.listSearchConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listSearchConfigs without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchConfig()),
            ];
            client.descriptors.page.listSearchConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.ISearchConfig[] = [];
            const iterable = client.listSearchConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSearchConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSearchConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listSearchConfigs with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.ListSearchConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSearchConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSearchConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.ISearchConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSearchConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSearchConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('searchAssets', () => {
        it('invokes searchAssets without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
            ];
            client.innerApiCalls.searchAssets = stubSimpleCall(expectedResponse);
            const [response] = await client.searchAssets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes searchAssets without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
            ];
            client.innerApiCalls.searchAssets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.searchAssets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.visionai.v1alpha1.ISearchResultItem[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes searchAssets with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.searchAssets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.searchAssets(request), expectedError);
            const actualRequest = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.searchAssets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes searchAssetsStream without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
            ];
            client.descriptors.page.searchAssets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.searchAssetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.SearchResultItem[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SearchResultItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.searchAssets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.searchAssets, request));
            assert(
                (client.descriptors.page.searchAssets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes searchAssetsStream with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.searchAssets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.searchAssetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.visionai.v1alpha1.SearchResultItem[] = [];
                stream.on('data', (response: protos.google.cloud.visionai.v1alpha1.SearchResultItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.searchAssets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.searchAssets, request));
            assert(
                (client.descriptors.page.searchAssets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with searchAssets without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
              generateSampleMessage(new protos.google.cloud.visionai.v1alpha1.SearchResultItem()),
            ];
            client.descriptors.page.searchAssets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.visionai.v1alpha1.ISearchResultItem[] = [];
            const iterable = client.searchAssetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.searchAssets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.searchAssets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with searchAssets with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.visionai.v1alpha1.SearchAssetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.visionai.v1alpha1.SearchAssetsRequest', ['corpus']);
            request.corpus = defaultValue1;
            const expectedHeaderRequestParams = `corpus=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.searchAssets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.searchAssetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.visionai.v1alpha1.ISearchResultItem[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.searchAssets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.searchAssets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('analysis', () => {
            const fakePath = "/rendered/path/analysis";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                analysis: "analysisValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.analysisPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.analysisPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('analysisPath', () => {
                const result = client.analysisPath("projectValue", "locationValue", "clusterValue", "analysisValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.analysisPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnalysisName', () => {
                const result = client.matchProjectFromAnalysisName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnalysisName', () => {
                const result = client.matchLocationFromAnalysisName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromAnalysisName', () => {
                const result = client.matchClusterFromAnalysisName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnalysisFromAnalysisName', () => {
                const result = client.matchAnalysisFromAnalysisName(fakePath);
                assert.strictEqual(result, "analysisValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('annotation', () => {
            const fakePath = "/rendered/path/annotation";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
                annotation: "annotationValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.annotationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationPath', () => {
                const result = client.annotationPath("projectNumberValue", "locationValue", "corpusValue", "assetValue", "annotationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAnnotationName', () => {
                const result = client.matchProjectNumberFromAnnotationName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationName', () => {
                const result = client.matchLocationFromAnnotationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAnnotationName', () => {
                const result = client.matchCorpusFromAnnotationName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAnnotationName', () => {
                const result = client.matchAssetFromAnnotationName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationFromAnnotationName', () => {
                const result = client.matchAnnotationFromAnnotationName(fakePath);
                assert.strictEqual(result, "annotationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('application', () => {
            const fakePath = "/rendered/path/application";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.applicationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.applicationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('applicationPath', () => {
                const result = client.applicationPath("projectValue", "locationValue", "applicationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.applicationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApplicationName', () => {
                const result = client.matchProjectFromApplicationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApplicationName', () => {
                const result = client.matchLocationFromApplicationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromApplicationName', () => {
                const result = client.matchApplicationFromApplicationName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                asset: "assetValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("projectNumberValue", "locationValue", "corpusValue", "assetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromAssetName', () => {
                const result = client.matchProjectNumberFromAssetName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAssetName', () => {
                const result = client.matchLocationFromAssetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromAssetName', () => {
                const result = client.matchCorpusFromAssetName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAssetName', () => {
                const result = client.matchAssetFromAssetName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('channel', () => {
            const fakePath = "/rendered/path/channel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                channel: "channelValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.channelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.channelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('channelPath', () => {
                const result = client.channelPath("projectValue", "locationValue", "clusterValue", "channelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.channelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromChannelName', () => {
                const result = client.matchProjectFromChannelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromChannelName', () => {
                const result = client.matchLocationFromChannelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromChannelName', () => {
                const result = client.matchClusterFromChannelName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChannelFromChannelName', () => {
                const result = client.matchChannelFromChannelName(fakePath);
                assert.strictEqual(result, "channelValue");
                assert((client.pathTemplates.channelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('corpus', () => {
            const fakePath = "/rendered/path/corpus";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.corpusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.corpusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('corpusPath', () => {
                const result = client.corpusPath("projectNumberValue", "locationValue", "corpusValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.corpusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromCorpusName', () => {
                const result = client.matchProjectNumberFromCorpusName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCorpusName', () => {
                const result = client.matchLocationFromCorpusName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromCorpusName', () => {
                const result = client.matchCorpusFromCorpusName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.corpusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataSchema', () => {
            const fakePath = "/rendered/path/dataSchema";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                data_schema: "dataSchemaValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dataSchemaPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataSchemaPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataSchemaPath', () => {
                const result = client.dataSchemaPath("projectNumberValue", "locationValue", "corpusValue", "dataSchemaValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataSchemaPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromDataSchemaName', () => {
                const result = client.matchProjectNumberFromDataSchemaName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataSchemaName', () => {
                const result = client.matchLocationFromDataSchemaName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromDataSchemaName', () => {
                const result = client.matchCorpusFromDataSchemaName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSchemaFromDataSchemaName', () => {
                const result = client.matchDataSchemaFromDataSchemaName(fakePath);
                assert.strictEqual(result, "dataSchemaValue");
                assert((client.pathTemplates.dataSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('draft', () => {
            const fakePath = "/rendered/path/draft";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                draft: "draftValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.draftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.draftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('draftPath', () => {
                const result = client.draftPath("projectValue", "locationValue", "applicationValue", "draftValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.draftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDraftName', () => {
                const result = client.matchProjectFromDraftName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDraftName', () => {
                const result = client.matchLocationFromDraftName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromDraftName', () => {
                const result = client.matchApplicationFromDraftName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDraftFromDraftName', () => {
                const result = client.matchDraftFromDraftName(fakePath);
                assert.strictEqual(result, "draftValue");
                assert((client.pathTemplates.draftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('event', () => {
            const fakePath = "/rendered/path/event";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                event: "eventValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.eventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.eventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('eventPath', () => {
                const result = client.eventPath("projectValue", "locationValue", "clusterValue", "eventValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.eventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEventName', () => {
                const result = client.matchProjectFromEventName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEventName', () => {
                const result = client.matchLocationFromEventName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromEventName', () => {
                const result = client.matchClusterFromEventName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEventFromEventName', () => {
                const result = client.matchEventFromEventName(fakePath);
                assert.strictEqual(result, "eventValue");
                assert((client.pathTemplates.eventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                application: "applicationValue",
                instance: "instanceValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "applicationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromInstanceName', () => {
                const result = client.matchApplicationFromInstanceName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('processor', () => {
            const fakePath = "/rendered/path/processor";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                processor: "processorValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.processorPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.processorPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('processorPath', () => {
                const result = client.processorPath("projectValue", "locationValue", "processorValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.processorPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProcessorName', () => {
                const result = client.matchProjectFromProcessorName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProcessorName', () => {
                const result = client.matchLocationFromProcessorName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProcessorFromProcessorName', () => {
                const result = client.matchProcessorFromProcessorName(fakePath);
                assert.strictEqual(result, "processorValue");
                assert((client.pathTemplates.processorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchConfig', () => {
            const fakePath = "/rendered/path/searchConfig";
            const expectedParameters = {
                project_number: "projectNumberValue",
                location: "locationValue",
                corpus: "corpusValue",
                search_config: "searchConfigValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchConfigPath', () => {
                const result = client.searchConfigPath("projectNumberValue", "locationValue", "corpusValue", "searchConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectNumberFromSearchConfigName', () => {
                const result = client.matchProjectNumberFromSearchConfigName(fakePath);
                assert.strictEqual(result, "projectNumberValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSearchConfigName', () => {
                const result = client.matchLocationFromSearchConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCorpusFromSearchConfigName', () => {
                const result = client.matchCorpusFromSearchConfigName(fakePath);
                assert.strictEqual(result, "corpusValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchConfigFromSearchConfigName', () => {
                const result = client.matchSearchConfigFromSearchConfigName(fakePath);
                assert.strictEqual(result, "searchConfigValue");
                assert((client.pathTemplates.searchConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('series', () => {
            const fakePath = "/rendered/path/series";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                series: "seriesValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.seriesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.seriesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('seriesPath', () => {
                const result = client.seriesPath("projectValue", "locationValue", "clusterValue", "seriesValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.seriesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSeriesName', () => {
                const result = client.matchProjectFromSeriesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSeriesName', () => {
                const result = client.matchLocationFromSeriesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromSeriesName', () => {
                const result = client.matchClusterFromSeriesName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeriesFromSeriesName', () => {
                const result = client.matchSeriesFromSeriesName(fakePath);
                assert.strictEqual(result, "seriesValue");
                assert((client.pathTemplates.seriesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('stream', () => {
            const fakePath = "/rendered/path/stream";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                stream: "streamValue",
            };
            const client = new warehouseModule.v1alpha1.WarehouseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.streamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.streamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('streamPath', () => {
                const result = client.streamPath("projectValue", "locationValue", "clusterValue", "streamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.streamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromStreamName', () => {
                const result = client.matchProjectFromStreamName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromStreamName', () => {
                const result = client.matchLocationFromStreamName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromStreamName', () => {
                const result = client.matchClusterFromStreamName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStreamFromStreamName', () => {
                const result = client.matchStreamFromStreamName(fakePath);
                assert.strictEqual(result, "streamValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
