// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, detectionTime) {
  // [START timeseriesinsights_v1_generated_TimeseriesInsightsController_QueryDataSet_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Loaded DataSet to be queried in the format of
   *  "projects/{project}/datasets/{dataset}"
   */
  // const name = 'abc123'
  /**
   *  Required. This is the point in time that we want to probe for anomalies.
   *  The corresponding TimeseriesPoint google.cloud.timeseriesinsights.v1.TimeseriesPoint  is referred to as the
   *  detection point.
   *  **NOTE**: As with any other time series point, the value is given by
   *  aggregating all events in the slice that are in the
   *  detectionTime, detectionTime + granularity) time interval, where
   *  the granularity is specified in the
   *  timeseriesParams.granularity google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity  field.
   */
  // const detectionTime = {}
  /**
   *  How many slices are returned in
   *  QueryDataSetResponse.slices google.cloud.timeseriesinsights.v1.QueryDataSetResponse.slices.
   *  The returned slices are tentatively the ones with the highest
   *  anomaly scores google.cloud.timeseriesinsights.v1.EvaluatedSlice.anomaly_score  in the dataset that match
   *  the query, but it is not guaranteed.
   *  Reducing this number will improve query performance, both in terms of
   *  latency and resource usage.
   *  Defaults to 50.
   */
  // const numReturnedSlices = 1234
  /**
   *  Parameters controlling how we will split the dataset into the slices that
   *  we will analyze.
   */
  // const slicingParams = {}
  /**
   *  Parameters controlling how we will build the time series used to predict
   *  the detectionTime google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time  value for each slice.
   */
  // const timeseriesParams = {}
  /**
   *  Parameters that control the time series forecasting models, such as the
   *  sensitivity of the anomaly detection.
   */
  // const forecastParams = {}
  /**
   *  If specified, we will return the actual and forecasted time for all
   *  returned slices.
   *  The time series are returned in the
   *  EvaluatedSlice.history google.cloud.timeseriesinsights.v1.EvaluatedSlice.history  and
   *  EvaluatedSlice.forecast google.cloud.timeseriesinsights.v1.EvaluatedSlice.forecast  fields.
   */
  // const returnTimeseries = true

  // Imports the Timeseriesinsights library
  const {TimeseriesInsightsControllerClient} = require('@google-cloud/timeseriesinsights').v1;

  // Instantiates a client
  const timeseriesinsightsClient = new TimeseriesInsightsControllerClient();

  async function callQueryDataSet() {
    // Construct request
    const request = {
      name,
      detectionTime,
    };

    // Run request
    const response = await timeseriesinsightsClient.queryDataSet(request);
    console.log(response);
  }

  callQueryDataSet();
  // [END timeseriesinsights_v1_generated_TimeseriesInsightsController_QueryDataSet_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
