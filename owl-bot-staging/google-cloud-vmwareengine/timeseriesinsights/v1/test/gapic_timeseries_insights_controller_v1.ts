// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as timeseriesinsightscontrollerModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.TimeseriesInsightsControllerClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.timeseriesInsightsControllerStub, undefined);
            await client.initialize();
            assert(client.timeseriesInsightsControllerStub);
        });

        it('has close method for the initialized client', done => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.timeseriesInsightsControllerStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.timeseriesInsightsControllerStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('createDataSet', () => {
        it('invokes createDataSet without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.CreateDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.CreateDataSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DataSet()
            );
            client.innerApiCalls.createDataSet = stubSimpleCall(expectedResponse);
            const [response] = await client.createDataSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSet without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.CreateDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.CreateDataSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DataSet()
            );
            client.innerApiCalls.createDataSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDataSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IDataSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSet with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.CreateDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.CreateDataSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDataSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createDataSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDataSet with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.CreateDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.CreateDataSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createDataSet(request), expectedError);
        });
    });

    describe('deleteDataSet', () => {
        it('invokes deleteDataSet without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataSet = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDataSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSet without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDataSet(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSet with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDataSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDataSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataSet with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.DeleteDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteDataSet(request), expectedError);
        });
    });

    describe('appendEvents', () => {
        it('invokes appendEvents without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.AppendEventsRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsResponse()
            );
            client.innerApiCalls.appendEvents = stubSimpleCall(expectedResponse);
            const [response] = await client.appendEvents(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes appendEvents without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.AppendEventsRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsResponse()
            );
            client.innerApiCalls.appendEvents = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.appendEvents(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes appendEvents with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.AppendEventsRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.appendEvents = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.appendEvents(request), expectedError);
            const actualRequest = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.appendEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes appendEvents with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.AppendEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.AppendEventsRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.appendEvents(request), expectedError);
        });
    });

    describe('queryDataSet', () => {
        it('invokes queryDataSet without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.QueryDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetResponse()
            );
            client.innerApiCalls.queryDataSet = stubSimpleCall(expectedResponse);
            const [response] = await client.queryDataSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryDataSet without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.QueryDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetResponse()
            );
            client.innerApiCalls.queryDataSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryDataSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryDataSet with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.QueryDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryDataSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryDataSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryDataSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryDataSet with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.QueryDataSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.QueryDataSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.queryDataSet(request), expectedError);
        });
    });

    describe('evaluateSlice', () => {
        it('invokes evaluateSlice without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluatedSlice()
            );
            client.innerApiCalls.evaluateSlice = stubSimpleCall(expectedResponse);
            const [response] = await client.evaluateSlice(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateSlice without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluatedSlice()
            );
            client.innerApiCalls.evaluateSlice = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.evaluateSlice(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateSlice with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.evaluateSlice = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.evaluateSlice(request), expectedError);
            const actualRequest = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateSlice as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateSlice with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateSliceRequest', ['dataset']);
            request.dataset = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.evaluateSlice(request), expectedError);
        });
    });

    describe('evaluateTimeseries', () => {
        it('invokes evaluateTimeseries without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluatedSlice()
            );
            client.innerApiCalls.evaluateTimeseries = stubSimpleCall(expectedResponse);
            const [response] = await client.evaluateTimeseries(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateTimeseries without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluatedSlice()
            );
            client.innerApiCalls.evaluateTimeseries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.evaluateTimeseries(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateTimeseries with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.evaluateTimeseries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.evaluateTimeseries(request), expectedError);
            const actualRequest = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.evaluateTimeseries as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes evaluateTimeseries with closed client', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.evaluateTimeseries(request), expectedError);
        });
    });

    describe('listDataSets', () => {
        it('invokes listDataSets without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
            ];
            client.innerApiCalls.listDataSets = stubSimpleCall(expectedResponse);
            const [response] = await client.listDataSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSets without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
            ];
            client.innerApiCalls.listDataSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDataSets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.timeseriesinsights.v1.IDataSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSets with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDataSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDataSets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDataSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDataSetsStream without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
            ];
            client.descriptors.page.listDataSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDataSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.timeseriesinsights.v1.DataSet[] = [];
                stream.on('data', (response: protos.google.cloud.timeseriesinsights.v1.DataSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDataSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSets, request));
            assert(
                (client.descriptors.page.listDataSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDataSetsStream with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDataSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDataSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.timeseriesinsights.v1.DataSet[] = [];
                stream.on('data', (response: protos.google.cloud.timeseriesinsights.v1.DataSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDataSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSets, request));
            assert(
                (client.descriptors.page.listDataSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDataSets without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
              generateSampleMessage(new protos.google.cloud.timeseriesinsights.v1.DataSet()),
            ];
            client.descriptors.page.listDataSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.timeseriesinsights.v1.IDataSet[] = [];
            const iterable = client.listDataSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDataSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDataSets with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.timeseriesinsights.v1.ListDataSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.timeseriesinsights.v1.ListDataSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDataSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDataSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.timeseriesinsights.v1.IDataSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDataSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectDataset', () => {
            const fakePath = "/rendered/path/projectDataset";
            const expectedParameters = {
                project: "projectValue",
                dataset: "datasetValue",
            };
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectDatasetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectDatasetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectDatasetPath', () => {
                const result = client.projectDatasetPath("projectValue", "datasetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectDatasetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectDatasetName', () => {
                const result = client.matchProjectFromProjectDatasetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectDatasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromProjectDatasetName', () => {
                const result = client.matchDatasetFromProjectDatasetName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.projectDatasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationDataset', () => {
            const fakePath = "/rendered/path/projectLocationDataset";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
            };
            const client = new timeseriesinsightscontrollerModule.v1.TimeseriesInsightsControllerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationDatasetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationDatasetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationDatasetPath', () => {
                const result = client.projectLocationDatasetPath("projectValue", "locationValue", "datasetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationDatasetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationDatasetName', () => {
                const result = client.matchProjectFromProjectLocationDatasetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationDatasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationDatasetName', () => {
                const result = client.matchLocationFromProjectLocationDatasetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationDatasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromProjectLocationDatasetName', () => {
                const result = client.matchDatasetFromProjectLocationDatasetName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.projectLocationDatasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
