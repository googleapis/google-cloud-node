// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/timeseries_insights_controller_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './timeseries_insights_controller_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1
 */
export class TimeseriesInsightsControllerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  timeseriesInsightsControllerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TimeseriesInsightsControllerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TimeseriesInsightsControllerClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TimeseriesInsightsControllerClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectDatasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/datasets/{dataset}'
      ),
      projectLocationDatasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDataSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'datasets')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.timeseriesinsights.v1.TimeseriesInsightsController', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.timeseriesInsightsControllerStub) {
      return this.timeseriesInsightsControllerStub;
    }

    // Put together the "service stub" for
    // google.cloud.timeseriesinsights.v1.TimeseriesInsightsController.
    this.timeseriesInsightsControllerStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.timeseriesinsights.v1.TimeseriesInsightsController') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.timeseriesinsights.v1.TimeseriesInsightsController,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const timeseriesInsightsControllerStubMethods =
        ['listDataSets', 'createDataSet', 'deleteDataSet', 'appendEvents', 'queryDataSet', 'evaluateSlice', 'evaluateTimeseries'];
    for (const methodName of timeseriesInsightsControllerStubMethods) {
      const callPromise = this.timeseriesInsightsControllerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.timeseriesInsightsControllerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'timeseriesinsights.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'timeseriesinsights.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Create a {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet} from data stored on Cloud
 * Storage.
 *
 * The data must stay immutable while we process the
 * {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet} creation; otherwise, undefined outcomes
 * might result.  For more information, see {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Client project name which will own this DataSet in the format of
 *   'projects/{project}'.
 * @param {google.cloud.timeseriesinsights.v1.DataSet} request.dataset
 *   Required. Dataset to be loaded.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DataSet]{@link google.cloud.timeseriesinsights.v1.DataSet}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.create_data_set.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_CreateDataSet_async
 */
  createDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IDataSet,
        protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|undefined, {}|undefined
      ]>;
  createDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IDataSet,
          protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  createDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IDataSet,
          protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  createDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.timeseriesinsights.v1.IDataSet,
          protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.timeseriesinsights.v1.IDataSet,
          protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IDataSet,
        protos.google.cloud.timeseriesinsights.v1.ICreateDataSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createDataSet(request, options, callback);
  }
/**
 * Delete a {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet} from the system.
 *
 * **NOTE**: If the {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet} is still being
 * processed, it will be aborted and deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Dataset name in the format of "projects/{project}/datasets/{dataset}"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.delete_data_set.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_DeleteDataSet_async
 */
  deleteDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|undefined, {}|undefined
      ]>;
  deleteDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  deleteDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  deleteDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.timeseriesinsights.v1.IDeleteDataSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteDataSet(request, options, callback);
  }
/**
 * Append events to a `LOADED` {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number[]} request.events
 *   Events to be appended.
 *
 *   Note:
 *
 *   0. The {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet} must be shown in a `LOADED` state
 *      in the results of `list` method; otherwise, all events from
 *      the append request will be dropped, and a `NOT_FOUND` status will be
 *      returned.
 *   0. All events in a single request must have the same
 *      {@link google.cloud.timeseriesinsights.v1.Event.group_id|groupId} if set; otherwise, an
 *      `INVALID_ARGUMENT` status will be returned.
 *   0. If {@link google.cloud.timeseriesinsights.v1.Event.group_id|groupId} is not set (or 0), there
 *      should be only 1 event; otherwise, an `INVALID_ARGUMENT` status will be
 *      returned.
 *   0. The events must be newer than the current time minus
 *      {@link google.cloud.timeseriesinsights.v1.DataSet.ttl|DataSet TTL} or they will be dropped.
 * @param {string} request.dataset
 *   Required. The DataSet to which we want to append to in the format of
 *   "projects/{project}/datasets/{dataset}"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AppendEventsResponse]{@link google.cloud.timeseriesinsights.v1.AppendEventsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.append_events.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_AppendEvents_async
 */
  appendEvents(
      request?: protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
        protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|undefined, {}|undefined
      ]>;
  appendEvents(
      request: protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|null|undefined,
          {}|null|undefined>): void;
  appendEvents(
      request: protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|null|undefined,
          {}|null|undefined>): void;
  appendEvents(
      request?: protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
          protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IAppendEventsResponse,
        protos.google.cloud.timeseriesinsights.v1.IAppendEventsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'dataset': request.dataset ?? '',
    });
    this.initialize();
    return this.innerApiCalls.appendEvents(request, options, callback);
  }
/**
 * Execute a Timeseries Insights query over a loaded
 * {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Loaded DataSet to be queried in the format of
 *   "projects/{project}/datasets/{dataset}"
 * @param {google.protobuf.Timestamp} request.detectionTime
 *   Required. This is the point in time that we want to probe for anomalies.
 *
 *   The corresponding {@link google.cloud.timeseriesinsights.v1.TimeseriesPoint|TimeseriesPoint} is referred to as the
 *   detection point.
 *
 *   **NOTE**: As with any other time series point, the value is given by
 *   aggregating all events in the slice that are in the
 *   [detectionTime, detectionTime + granularity) time interval, where
 *   the granularity is specified in the
 *   {@link google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity|timeseriesParams.granularity} field.
 * @param {number} request.numReturnedSlices
 *   How many slices are returned in
 *   {@link google.cloud.timeseriesinsights.v1.QueryDataSetResponse.slices|QueryDataSetResponse.slices}.
 *
 *   The returned slices are tentatively the ones with the highest
 *   {@link google.cloud.timeseriesinsights.v1.EvaluatedSlice.anomaly_score|anomaly scores} in the dataset that match
 *   the query, but it is not guaranteed.
 *
 *   Reducing this number will improve query performance, both in terms of
 *   latency and resource usage.
 *
 *   Defaults to 50.
 * @param {google.cloud.timeseriesinsights.v1.SlicingParams} request.slicingParams
 *   Parameters controlling how we will split the dataset into the slices that
 *   we will analyze.
 * @param {google.cloud.timeseriesinsights.v1.TimeseriesParams} request.timeseriesParams
 *   Parameters controlling how we will build the time series used to predict
 *   the {@link google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time|detectionTime} value for each slice.
 * @param {google.cloud.timeseriesinsights.v1.ForecastParams} request.forecastParams
 *   Parameters that control the time series forecasting models, such as the
 *   sensitivity of the anomaly detection.
 * @param {boolean} request.returnTimeseries
 *   If specified, we will return the actual and forecasted time for all
 *   returned slices.
 *
 *   The time series are returned in the
 *   {@link google.cloud.timeseriesinsights.v1.EvaluatedSlice.history|EvaluatedSlice.history} and
 *   {@link google.cloud.timeseriesinsights.v1.EvaluatedSlice.forecast|EvaluatedSlice.forecast} fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [QueryDataSetResponse]{@link google.cloud.timeseriesinsights.v1.QueryDataSetResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.query_data_set.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_QueryDataSet_async
 */
  queryDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
        protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|undefined, {}|undefined
      ]>;
  queryDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  queryDataSet(
      request: protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|null|undefined,
          {}|null|undefined>): void;
  queryDataSet(
      request?: protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
          protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IQueryDataSetResponse,
        protos.google.cloud.timeseriesinsights.v1.IQueryDataSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.queryDataSet(request, options, callback);
  }
/**
 * Evaluate an explicit slice from a loaded {@link google.cloud.timeseriesinsights.v1.DataSet|DataSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.dataset
 *   Required. Loaded DataSet to be queried in the format of
 *   "projects/{project}/datasets/{dataset}"
 * @param {number[]} request.pinnedDimensions
 *   Required. Dimensions with pinned values that specify the slice for which we will
 *   fetch the time series.
 * @param {google.protobuf.Timestamp} request.detectionTime
 *   Required. This is the point in time that we want to probe for anomalies.
 *
 *   See documentation for
 *   {@link google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time|QueryDataSetRequest.detectionTime}.
 * @param {google.cloud.timeseriesinsights.v1.TimeseriesParams} request.timeseriesParams
 *   Parameters controlling how we will build the time series used to predict
 *   the {@link google.cloud.timeseriesinsights.v1.EvaluateSliceRequest.detection_time|detectionTime} value for this slice.
 * @param {google.cloud.timeseriesinsights.v1.ForecastParams} request.forecastParams
 *   Parameters that control the time series forecasting models, such as the
 *   sensitivity of the anomaly detection.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EvaluatedSlice]{@link google.cloud.timeseriesinsights.v1.EvaluatedSlice}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.evaluate_slice.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_EvaluateSlice_async
 */
  evaluateSlice(
      request?: protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
        protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|undefined, {}|undefined
      ]>;
  evaluateSlice(
      request: protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|null|undefined,
          {}|null|undefined>): void;
  evaluateSlice(
      request: protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|null|undefined,
          {}|null|undefined>): void;
  evaluateSlice(
      request?: protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
        protos.google.cloud.timeseriesinsights.v1.IEvaluateSliceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'dataset': request.dataset ?? '',
    });
    this.initialize();
    return this.innerApiCalls.evaluateSlice(request, options, callback);
  }
/**
 * Evaluate an explicit timeseries.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Client project name in the format of 'projects/{project}'.
 * @param {google.cloud.timeseriesinsights.v1.Timeseries} request.timeseries
 *   Evaluate this time series without requiring it was previously loaded in
 *   a data set.
 *
 *   The evaluated time series point is the last one, analogous to calling
 *   evaluateSlice or query with
 *   {@link google.cloud.timeseriesinsights.v1.EvaluateSliceRequest.detection_time|detectionTime} set to
 *   `timeseries.point(timeseries.point_size() - 1).time`.
 *
 *   The length of the time series must be at least 10.
 *
 *   All points must have the same time offset relative to the granularity. For
 *   example, if the {@link google.cloud.timeseriesinsights.v1.EvaluateTimeseriesRequest.granularity|granularity} is "5s", then the following
 *   point.time sequences are valid:
 *   - "100s", "105s", "120s", "125s" (no offset)
 *   - "102s", "107s", "122s", "127s" (offset is "2s")
 *   However, the following sequence is invalid as it has inconsistent offsets:
 *   - "100s", "105s", "122s", "127s" (offsets are either "0s" or "2s")
 * @param {google.protobuf.Duration} request.granularity
 *   The granularity of the time series (time distance between two consecutive
 *   points).
 * @param {google.cloud.timeseriesinsights.v1.ForecastParams} request.forecastParams
 *   The forecast parameters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EvaluatedSlice]{@link google.cloud.timeseriesinsights.v1.EvaluatedSlice}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.evaluate_timeseries.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_EvaluateTimeseries_async
 */
  evaluateTimeseries(
      request?: protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
        protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|undefined, {}|undefined
      ]>;
  evaluateTimeseries(
      request: protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|null|undefined,
          {}|null|undefined>): void;
  evaluateTimeseries(
      request: protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest,
      callback: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|null|undefined,
          {}|null|undefined>): void;
  evaluateTimeseries(
      request?: protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
          protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IEvaluatedSlice,
        protos.google.cloud.timeseriesinsights.v1.IEvaluateTimeseriesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.evaluateTimeseries(request, options, callback);
  }

 /**
 * Lists {@link google.cloud.timeseriesinsights.v1.DataSet|DataSets} under the project.
 *
 * The order of the results is unspecified but deterministic. Newly created
 * {@link google.cloud.timeseriesinsights.v1.DataSet|DataSets} will not necessarily be added to the end
 * of this list.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Project owning the DataSet in the format of "projects/{project}".
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [DataSet]{@link google.cloud.timeseriesinsights.v1.DataSet}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDataSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDataSets(
      request?: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IDataSet[],
        protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest|null,
        protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse
      ]>;
  listDataSets(
      request: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse|null|undefined,
          protos.google.cloud.timeseriesinsights.v1.IDataSet>): void;
  listDataSets(
      request: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse|null|undefined,
          protos.google.cloud.timeseriesinsights.v1.IDataSet>): void;
  listDataSets(
      request?: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse|null|undefined,
          protos.google.cloud.timeseriesinsights.v1.IDataSet>,
      callback?: PaginationCallback<
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
          protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse|null|undefined,
          protos.google.cloud.timeseriesinsights.v1.IDataSet>):
      Promise<[
        protos.google.cloud.timeseriesinsights.v1.IDataSet[],
        protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest|null,
        protos.google.cloud.timeseriesinsights.v1.IListDataSetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listDataSets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Project owning the DataSet in the format of "projects/{project}".
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [DataSet]{@link google.cloud.timeseriesinsights.v1.DataSet} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDataSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDataSetsStream(
      request?: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSets.createStream(
      this.innerApiCalls.listDataSets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDataSets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Project owning the DataSet in the format of "projects/{project}".
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [DataSet]{@link google.cloud.timeseriesinsights.v1.DataSet}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/timeseries_insights_controller.list_data_sets.js</caption>
 * region_tag:timeseriesinsights_v1_generated_TimeseriesInsightsController_ListDataSets_async
 */
  listDataSetsAsync(
      request?: protos.google.cloud.timeseriesinsights.v1.IListDataSetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.timeseriesinsights.v1.IDataSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSets.asyncIterate(
      this.innerApiCalls['listDataSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.timeseriesinsights.v1.IDataSet>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectDataset resource name string.
   *
   * @param {string} project
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  projectDatasetPath(project:string,dataset:string) {
    return this.pathTemplates.projectDatasetPathTemplate.render({
      project: project,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from ProjectDataset resource.
   *
   * @param {string} projectDatasetName
   *   A fully-qualified path representing project_dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDatasetName(projectDatasetName: string) {
    return this.pathTemplates.projectDatasetPathTemplate.match(projectDatasetName).project;
  }

  /**
   * Parse the dataset from ProjectDataset resource.
   *
   * @param {string} projectDatasetName
   *   A fully-qualified path representing project_dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromProjectDatasetName(projectDatasetName: string) {
    return this.pathTemplates.projectDatasetPathTemplate.match(projectDatasetName).dataset;
  }

  /**
   * Return a fully-qualified projectLocationDataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  projectLocationDatasetPath(project:string,location:string,dataset:string) {
    return this.pathTemplates.projectLocationDatasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from ProjectLocationDataset resource.
   *
   * @param {string} projectLocationDatasetName
   *   A fully-qualified path representing project_location_dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDatasetName(projectLocationDatasetName: string) {
    return this.pathTemplates.projectLocationDatasetPathTemplate.match(projectLocationDatasetName).project;
  }

  /**
   * Parse the location from ProjectLocationDataset resource.
   *
   * @param {string} projectLocationDatasetName
   *   A fully-qualified path representing project_location_dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDatasetName(projectLocationDatasetName: string) {
    return this.pathTemplates.projectLocationDatasetPathTemplate.match(projectLocationDatasetName).location;
  }

  /**
   * Parse the dataset from ProjectLocationDataset resource.
   *
   * @param {string} projectLocationDatasetName
   *   A fully-qualified path representing project_location_dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromProjectLocationDatasetName(projectLocationDatasetName: string) {
    return this.pathTemplates.projectLocationDatasetPathTemplate.match(projectLocationDatasetName).dataset;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.timeseriesInsightsControllerStub && !this._terminated) {
      return this.timeseriesInsightsControllerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
