// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as lfpstoreserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta.LfpStoreServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'merchantapi.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = lfpstoreserviceModule.v1beta.LfpStoreServiceClient.servicePath;
                assert.strictEqual(servicePath, 'merchantapi.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = lfpstoreserviceModule.v1beta.LfpStoreServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'merchantapi.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'merchantapi.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'merchantapi.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'merchantapi.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'merchantapi.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = lfpstoreserviceModule.v1beta.LfpStoreServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.lfpStoreServiceStub, undefined);
            await client.initialize();
            assert(client.lfpStoreServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.lfpStoreServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.lfpStoreServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getLfpStore', () => {
        it('invokes getLfpStore without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.LfpStore()
            );
            client.innerApiCalls.getLfpStore = stubSimpleCall(expectedResponse);
            const [response] = await client.getLfpStore(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getLfpStore without error using callback', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.LfpStore()
            );
            client.innerApiCalls.getLfpStore = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLfpStore(
                    request,
                    (err?: Error|null, result?: protos.google.shopping.merchant.lfp.v1beta.ILfpStore|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getLfpStore with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getLfpStore = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLfpStore(request), expectedError);
            const actualRequest = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getLfpStore with closed client', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.GetLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getLfpStore(request), expectedError);
        });
    });

    describe('insertLfpStore', () => {
        it('invokes insertLfpStore without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.LfpStore()
            );
            client.innerApiCalls.insertLfpStore = stubSimpleCall(expectedResponse);
            const [response] = await client.insertLfpStore(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertLfpStore without error using callback', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.LfpStore()
            );
            client.innerApiCalls.insertLfpStore = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertLfpStore(
                    request,
                    (err?: Error|null, result?: protos.google.shopping.merchant.lfp.v1beta.ILfpStore|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertLfpStore with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertLfpStore = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertLfpStore(request), expectedError);
            const actualRequest = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertLfpStore with closed client', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.InsertLfpStoreRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.insertLfpStore(request), expectedError);
        });
    });

    describe('deleteLfpStore', () => {
        it('invokes deleteLfpStore without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteLfpStore = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteLfpStore(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteLfpStore without error using callback', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteLfpStore = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteLfpStore(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteLfpStore with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteLfpStore = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteLfpStore(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteLfpStore as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteLfpStore with closed client', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.DeleteLfpStoreRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteLfpStore(request), expectedError);
        });
    });

    describe('listLfpStores', () => {
        it('invokes listLfpStores without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
            ];
            client.innerApiCalls.listLfpStores = stubSimpleCall(expectedResponse);
            const [response] = await client.listLfpStores(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listLfpStores without error using callback', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
            ];
            client.innerApiCalls.listLfpStores = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listLfpStores(
                    request,
                    (err?: Error|null, result?: protos.google.shopping.merchant.lfp.v1beta.ILfpStore[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listLfpStores with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listLfpStores = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listLfpStores(request), expectedError);
            const actualRequest = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listLfpStores as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listLfpStoresStream without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
            ];
            client.descriptors.page.listLfpStores.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listLfpStoresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.shopping.merchant.lfp.v1beta.LfpStore[] = [];
                stream.on('data', (response: protos.google.shopping.merchant.lfp.v1beta.LfpStore) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listLfpStores.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLfpStores, request));
            assert(
                (client.descriptors.page.listLfpStores.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listLfpStoresStream with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listLfpStores.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listLfpStoresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.shopping.merchant.lfp.v1beta.LfpStore[] = [];
                stream.on('data', (response: protos.google.shopping.merchant.lfp.v1beta.LfpStore) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listLfpStores.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLfpStores, request));
            assert(
                (client.descriptors.page.listLfpStores.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listLfpStores without error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
              generateSampleMessage(new protos.google.shopping.merchant.lfp.v1beta.LfpStore()),
            ];
            client.descriptors.page.listLfpStores.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.shopping.merchant.lfp.v1beta.ILfpStore[] = [];
            const iterable = client.listLfpStoresAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listLfpStores.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listLfpStores.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listLfpStores with error', async () => {
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.shopping.merchant.lfp.v1beta.ListLfpStoresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listLfpStores.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLfpStoresAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.shopping.merchant.lfp.v1beta.ILfpStore[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listLfpStores.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listLfpStores.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('account', () => {
            const fakePath = "/rendered/path/account";
            const expectedParameters = {
                account: "accountValue",
            };
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountPath', () => {
                const result = client.accountPath("accountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromAccountName', () => {
                const result = client.matchAccountFromAccountName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.accountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('lfpInventory', () => {
            const fakePath = "/rendered/path/lfpInventory";
            const expectedParameters = {
                account: "accountValue",
                target_merchant: "targetMerchantValue",
                store_code: "storeCodeValue",
                offer: "offerValue",
            };
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.lfpInventoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.lfpInventoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('lfpInventoryPath', () => {
                const result = client.lfpInventoryPath("accountValue", "targetMerchantValue", "storeCodeValue", "offerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.lfpInventoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromLfpInventoryName', () => {
                const result = client.matchAccountFromLfpInventoryName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.lfpInventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTargetMerchantFromLfpInventoryName', () => {
                const result = client.matchTargetMerchantFromLfpInventoryName(fakePath);
                assert.strictEqual(result, "targetMerchantValue");
                assert((client.pathTemplates.lfpInventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStoreCodeFromLfpInventoryName', () => {
                const result = client.matchStoreCodeFromLfpInventoryName(fakePath);
                assert.strictEqual(result, "storeCodeValue");
                assert((client.pathTemplates.lfpInventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOfferFromLfpInventoryName', () => {
                const result = client.matchOfferFromLfpInventoryName(fakePath);
                assert.strictEqual(result, "offerValue");
                assert((client.pathTemplates.lfpInventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('lfpSale', () => {
            const fakePath = "/rendered/path/lfpSale";
            const expectedParameters = {
                account: "accountValue",
                sale: "saleValue",
            };
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.lfpSalePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.lfpSalePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('lfpSalePath', () => {
                const result = client.lfpSalePath("accountValue", "saleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.lfpSalePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromLfpSaleName', () => {
                const result = client.matchAccountFromLfpSaleName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.lfpSalePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSaleFromLfpSaleName', () => {
                const result = client.matchSaleFromLfpSaleName(fakePath);
                assert.strictEqual(result, "saleValue");
                assert((client.pathTemplates.lfpSalePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('lfpStore', () => {
            const fakePath = "/rendered/path/lfpStore";
            const expectedParameters = {
                account: "accountValue",
                target_merchant: "targetMerchantValue",
                store_code: "storeCodeValue",
            };
            const client = new lfpstoreserviceModule.v1beta.LfpStoreServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.lfpStorePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.lfpStorePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('lfpStorePath', () => {
                const result = client.lfpStorePath("accountValue", "targetMerchantValue", "storeCodeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.lfpStorePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromLfpStoreName', () => {
                const result = client.matchAccountFromLfpStoreName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.lfpStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTargetMerchantFromLfpStoreName', () => {
                const result = client.matchTargetMerchantFromLfpStoreName(fakePath);
                assert.strictEqual(result, "targetMerchantValue");
                assert((client.pathTemplates.lfpStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStoreCodeFromLfpStoreName', () => {
                const result = client.matchStoreCodeFromLfpStoreName(fakePath);
                assert.strictEqual(result, "storeCodeValue");
                assert((client.pathTemplates.lfpStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
