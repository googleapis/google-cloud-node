// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/backup_d_r_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './backup_d_r_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The BackupDR Service
 * @class
 * @memberof v1
 */
export class BackupDRClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  backupDRStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BackupDRClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BackupDRClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BackupDRClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'backupdr.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupVaults/{backupvault}/dataSources/{datasource}/backups/{backup}'
      ),
      backupPlanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPlans/{backup_plan}'
      ),
      backupPlanAssociationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPlanAssociations/{backup_plan_association}'
      ),
      backupVaultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupVaults/{backupvault}'
      ),
      dataSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupVaults/{backupvault}/dataSources/{datasource}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      managementServerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/managementServers/{managementserver}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listManagementServers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'managementServers'),
      listBackupVaults:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backupVaults'),
      fetchUsableBackupVaults:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backupVaults'),
      listDataSources:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dataSources'),
      listBackups:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backups'),
      listBackupPlans:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backupPlans'),
      listBackupPlanAssociations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backupPlanAssociations')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1/{resource=projects/*/locations/*/managementServers/*}:getIamPolicy',},{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/*/managementServers/*}:setIamPolicy',body: '*',},{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/*/managementServers/*}:testIamPermissions',body: '*',},{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createManagementServerResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.ManagementServer') as gax.protobuf.Type;
    const createManagementServerMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteManagementServerResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteManagementServerMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const createBackupVaultResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.BackupVault') as gax.protobuf.Type;
    const createBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const updateBackupVaultResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.BackupVault') as gax.protobuf.Type;
    const updateBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteBackupVaultResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const updateDataSourceResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.DataSource') as gax.protobuf.Type;
    const updateDataSourceMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const updateBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.Backup') as gax.protobuf.Type;
    const updateBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.Backup') as gax.protobuf.Type;
    const deleteBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const restoreBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.RestoreBackupResponse') as gax.protobuf.Type;
    const restoreBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const createBackupPlanResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.BackupPlan') as gax.protobuf.Type;
    const createBackupPlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteBackupPlanResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteBackupPlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const createBackupPlanAssociationResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.BackupPlanAssociation') as gax.protobuf.Type;
    const createBackupPlanAssociationMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteBackupPlanAssociationResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteBackupPlanAssociationMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const triggerBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.BackupPlanAssociation') as gax.protobuf.Type;
    const triggerBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;
    const initializeServiceResponse = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.InitializeServiceResponse') as gax.protobuf.Type;
    const initializeServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.backupdr.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createManagementServer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createManagementServerResponse.decode.bind(createManagementServerResponse),
        createManagementServerMetadata.decode.bind(createManagementServerMetadata)),
      deleteManagementServer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteManagementServerResponse.decode.bind(deleteManagementServerResponse),
        deleteManagementServerMetadata.decode.bind(deleteManagementServerMetadata)),
      createBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupVaultResponse.decode.bind(createBackupVaultResponse),
        createBackupVaultMetadata.decode.bind(createBackupVaultMetadata)),
      updateBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupVaultResponse.decode.bind(updateBackupVaultResponse),
        updateBackupVaultMetadata.decode.bind(updateBackupVaultMetadata)),
      deleteBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupVaultResponse.decode.bind(deleteBackupVaultResponse),
        deleteBackupVaultMetadata.decode.bind(deleteBackupVaultMetadata)),
      updateDataSource: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDataSourceResponse.decode.bind(updateDataSourceResponse),
        updateDataSourceMetadata.decode.bind(updateDataSourceMetadata)),
      updateBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupResponse.decode.bind(updateBackupResponse),
        updateBackupMetadata.decode.bind(updateBackupMetadata)),
      deleteBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupResponse.decode.bind(deleteBackupResponse),
        deleteBackupMetadata.decode.bind(deleteBackupMetadata)),
      restoreBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreBackupResponse.decode.bind(restoreBackupResponse),
        restoreBackupMetadata.decode.bind(restoreBackupMetadata)),
      createBackupPlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupPlanResponse.decode.bind(createBackupPlanResponse),
        createBackupPlanMetadata.decode.bind(createBackupPlanMetadata)),
      deleteBackupPlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupPlanResponse.decode.bind(deleteBackupPlanResponse),
        deleteBackupPlanMetadata.decode.bind(deleteBackupPlanMetadata)),
      createBackupPlanAssociation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupPlanAssociationResponse.decode.bind(createBackupPlanAssociationResponse),
        createBackupPlanAssociationMetadata.decode.bind(createBackupPlanAssociationMetadata)),
      deleteBackupPlanAssociation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupPlanAssociationResponse.decode.bind(deleteBackupPlanAssociationResponse),
        deleteBackupPlanAssociationMetadata.decode.bind(deleteBackupPlanAssociationMetadata)),
      triggerBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        triggerBackupResponse.decode.bind(triggerBackupResponse),
        triggerBackupMetadata.decode.bind(triggerBackupMetadata)),
      initializeService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        initializeServiceResponse.decode.bind(initializeServiceResponse),
        initializeServiceMetadata.decode.bind(initializeServiceMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.backupdr.v1.BackupDR', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.backupDRStub) {
      return this.backupDRStub;
    }

    // Put together the "service stub" for
    // google.cloud.backupdr.v1.BackupDR.
    this.backupDRStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.backupdr.v1.BackupDR') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.backupdr.v1.BackupDR,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const backupDRStubMethods =
        ['listManagementServers', 'getManagementServer', 'createManagementServer', 'deleteManagementServer', 'createBackupVault', 'listBackupVaults', 'fetchUsableBackupVaults', 'getBackupVault', 'updateBackupVault', 'deleteBackupVault', 'listDataSources', 'getDataSource', 'updateDataSource', 'listBackups', 'getBackup', 'updateBackup', 'deleteBackup', 'restoreBackup', 'createBackupPlan', 'getBackupPlan', 'listBackupPlans', 'deleteBackupPlan', 'createBackupPlanAssociation', 'getBackupPlanAssociation', 'listBackupPlanAssociations', 'deleteBackupPlanAssociation', 'triggerBackup', 'initializeService'];
    for (const methodName of backupDRStubMethods) {
      const callPromise = this.backupDRStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.backupDRStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'backupdr.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'backupdr.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single ManagementServer.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the management server resource name, in the format
 *   'projects/{project_id}/locations/{location}/managementServers/{resource_name}'
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.ManagementServer|ManagementServer}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_management_server.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetManagementServer_async
 */
  getManagementServer(
      request?: protos.google.cloud.backupdr.v1.IGetManagementServerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IManagementServer,
        protos.google.cloud.backupdr.v1.IGetManagementServerRequest|undefined, {}|undefined
      ]>;
  getManagementServer(
      request: protos.google.cloud.backupdr.v1.IGetManagementServerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IManagementServer,
          protos.google.cloud.backupdr.v1.IGetManagementServerRequest|null|undefined,
          {}|null|undefined>): void;
  getManagementServer(
      request: protos.google.cloud.backupdr.v1.IGetManagementServerRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IManagementServer,
          protos.google.cloud.backupdr.v1.IGetManagementServerRequest|null|undefined,
          {}|null|undefined>): void;
  getManagementServer(
      request?: protos.google.cloud.backupdr.v1.IGetManagementServerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IManagementServer,
          protos.google.cloud.backupdr.v1.IGetManagementServerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IManagementServer,
          protos.google.cloud.backupdr.v1.IGetManagementServerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IManagementServer,
        protos.google.cloud.backupdr.v1.IGetManagementServerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getManagementServer(request, options, callback);
  }
/**
 * Gets details of a BackupVault.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the backupvault store resource name, in the format
 *   'projects/{project_id}/locations/{location}/backupVaults/{resource_name}'
 * @param {google.cloud.backupdr.v1.BackupVaultView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   Vault
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetBackupVault_async
 */
  getBackupVault(
      request?: protos.google.cloud.backupdr.v1.IGetBackupVaultRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault,
        protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|undefined, {}|undefined
      ]>;
  getBackupVault(
      request: protos.google.cloud.backupdr.v1.IGetBackupVaultRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupVault,
          protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupVault(
      request: protos.google.cloud.backupdr.v1.IGetBackupVaultRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupVault,
          protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupVault(
      request?: protos.google.cloud.backupdr.v1.IGetBackupVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IBackupVault,
          protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IBackupVault,
          protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault,
        protos.google.cloud.backupdr.v1.IGetBackupVaultRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getBackupVault(request, options, callback);
  }
/**
 * Gets details of a DataSource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the data source resource name, in the format
 *   'projects/{project_id}/locations/{location}/backupVaults/{resource_name}/dataSource/{resource_name}'
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.DataSource|DataSource}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_data_source.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetDataSource_async
 */
  getDataSource(
      request?: protos.google.cloud.backupdr.v1.IGetDataSourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IDataSource,
        protos.google.cloud.backupdr.v1.IGetDataSourceRequest|undefined, {}|undefined
      ]>;
  getDataSource(
      request: protos.google.cloud.backupdr.v1.IGetDataSourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IDataSource,
          protos.google.cloud.backupdr.v1.IGetDataSourceRequest|null|undefined,
          {}|null|undefined>): void;
  getDataSource(
      request: protos.google.cloud.backupdr.v1.IGetDataSourceRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IDataSource,
          protos.google.cloud.backupdr.v1.IGetDataSourceRequest|null|undefined,
          {}|null|undefined>): void;
  getDataSource(
      request?: protos.google.cloud.backupdr.v1.IGetDataSourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IDataSource,
          protos.google.cloud.backupdr.v1.IGetDataSourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IDataSource,
          protos.google.cloud.backupdr.v1.IGetDataSourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IDataSource,
        protos.google.cloud.backupdr.v1.IGetDataSourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getDataSource(request, options, callback);
  }
/**
 * Gets details of a Backup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the data source resource name, in the format
 *   'projects/{project_id}/locations/{location}/backupVaults/{backupVault}/dataSources/{datasource}/backups/{backup}'
 * @param {google.cloud.backupdr.v1.BackupView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.Backup|Backup}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetBackup_async
 */
  getBackup(
      request?: protos.google.cloud.backupdr.v1.IGetBackupRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackup,
        protos.google.cloud.backupdr.v1.IGetBackupRequest|undefined, {}|undefined
      ]>;
  getBackup(
      request: protos.google.cloud.backupdr.v1.IGetBackupRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackup,
          protos.google.cloud.backupdr.v1.IGetBackupRequest|null|undefined,
          {}|null|undefined>): void;
  getBackup(
      request: protos.google.cloud.backupdr.v1.IGetBackupRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackup,
          protos.google.cloud.backupdr.v1.IGetBackupRequest|null|undefined,
          {}|null|undefined>): void;
  getBackup(
      request?: protos.google.cloud.backupdr.v1.IGetBackupRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IBackup,
          protos.google.cloud.backupdr.v1.IGetBackupRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IBackup,
          protos.google.cloud.backupdr.v1.IGetBackupRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackup,
        protos.google.cloud.backupdr.v1.IGetBackupRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }
/**
 * Gets details of a single BackupPlan.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the `BackupPlan` to retrieve.
 *
 *   Format: `projects/{project}/locations/{location}/backupPlans/{backup_plan}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.BackupPlan|BackupPlan}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_backup_plan.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetBackupPlan_async
 */
  getBackupPlan(
      request?: protos.google.cloud.backupdr.v1.IGetBackupPlanRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlan,
        protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|undefined, {}|undefined
      ]>;
  getBackupPlan(
      request: protos.google.cloud.backupdr.v1.IGetBackupPlanRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlan,
          protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupPlan(
      request: protos.google.cloud.backupdr.v1.IGetBackupPlanRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlan,
          protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupPlan(
      request?: protos.google.cloud.backupdr.v1.IGetBackupPlanRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IBackupPlan,
          protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlan,
          protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlan,
        protos.google.cloud.backupdr.v1.IGetBackupPlanRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getBackupPlan(request, options, callback);
  }
/**
 * Gets details of a single BackupPlanAssociation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the backup plan association resource, in the format
 *   `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.backupdr.v1.BackupPlanAssociation|BackupPlanAssociation}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.get_backup_plan_association.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_GetBackupPlanAssociation_async
 */
  getBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
        protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|undefined, {}|undefined
      ]>;
  getBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
          protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest,
      callback: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
          protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|null|undefined,
          {}|null|undefined>): void;
  getBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
          protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
          protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlanAssociation,
        protos.google.cloud.backupdr.v1.IGetBackupPlanAssociationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getBackupPlanAssociation(request, options, callback);
  }

/**
 * Creates a new ManagementServer in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The management server project and location in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR
 *   locations map to Google Cloud regions, for example **us-central1**.
 * @param {string} request.managementServerId
 *   Required. The name of the management server to create. The name must be
 *   unique for the specified project and location.
 * @param {google.cloud.backupdr.v1.ManagementServer} request.managementServer
 *   Required. A [management server
 *   resource][google.cloud.backupdr.v1.ManagementServer]
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_management_server.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateManagementServer_async
 */
  createManagementServer(
      request?: protos.google.cloud.backupdr.v1.ICreateManagementServerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createManagementServer(
      request: protos.google.cloud.backupdr.v1.ICreateManagementServerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createManagementServer(
      request: protos.google.cloud.backupdr.v1.ICreateManagementServerRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createManagementServer(
      request?: protos.google.cloud.backupdr.v1.ICreateManagementServerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IManagementServer, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createManagementServer(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createManagementServer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_management_server.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateManagementServer_async
 */
  async checkCreateManagementServerProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.ManagementServer, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createManagementServer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.ManagementServer, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Deletes a single ManagementServer.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_management_server.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteManagementServer_async
 */
  deleteManagementServer(
      request?: protos.google.cloud.backupdr.v1.IDeleteManagementServerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteManagementServer(
      request: protos.google.cloud.backupdr.v1.IDeleteManagementServerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteManagementServer(
      request: protos.google.cloud.backupdr.v1.IDeleteManagementServerRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteManagementServer(
      request?: protos.google.cloud.backupdr.v1.IDeleteManagementServerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteManagementServer(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteManagementServer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_management_server.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteManagementServer_async
 */
  async checkDeleteManagementServerProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteManagementServer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Creates a new BackupVault in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.backupVaultId
 *   Required. ID of the requesting object
 *   If auto-generating ID server-side, remove this field and
 *   backup_vault_id from the method_signature of Create RPC
 * @param {google.cloud.backupdr.v1.BackupVault} request.backupVault
 *   Required. The resource being created
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.validateOnly]
 *   Optional. Only validate the request, but do not perform mutations.
 *   The default is 'false'.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupVault_async
 */
  createBackupVault(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupVaultRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createBackupVault(
      request: protos.google.cloud.backupdr.v1.ICreateBackupVaultRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupVault(
      request: protos.google.cloud.backupdr.v1.ICreateBackupVaultRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupVault(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createBackupVault(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createBackupVault()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupVault_async
 */
  async checkCreateBackupVaultProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.BackupVault, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBackupVault, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.BackupVault, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Updates the settings of a BackupVault.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   BackupVault resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then the request will fail.
 * @param {google.cloud.backupdr.v1.BackupVault} request.backupVault
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.validateOnly]
 *   Optional. Only validate the request, but do not perform mutations.
 *   The default is 'false'.
 * @param {boolean} [request.force]
 *   Optional. If set to true, will not check plan duration against backup vault
 *   enforcement duration.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateBackupVault_async
 */
  updateBackupVault(
      request?: protos.google.cloud.backupdr.v1.IUpdateBackupVaultRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateBackupVault(
      request: protos.google.cloud.backupdr.v1.IUpdateBackupVaultRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBackupVault(
      request: protos.google.cloud.backupdr.v1.IUpdateBackupVaultRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBackupVault(
      request?: protos.google.cloud.backupdr.v1.IUpdateBackupVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupVault, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'backup_vault.name': request.backupVault!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateBackupVault(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateBackupVault()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateBackupVault_async
 */
  async checkUpdateBackupVaultProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.BackupVault, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateBackupVault, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.BackupVault, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Deletes a BackupVault.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.force]
 *   Optional. If set to true, any data source from this backup vault will also
 *   be deleted.
 * @param {string} request.etag
 *   The current etag of the backup vault.
 *   If an etag is provided and does not match the current etag of the
 *   connection, deletion will be blocked.
 * @param {boolean} [request.validateOnly]
 *   Optional. Only validate the request, but do not perform mutations.
 *   The default is 'false'.
 * @param {boolean} [request.allowMissing]
 *   Optional. If true and the BackupVault is not found, the request will
 *   succeed but no action will be taken.
 * @param {boolean} [request.ignoreBackupPlanReferences]
 *   Optional. If set to true, backupvault deletion will proceed even if there
 *   are backup plans referencing the backupvault. The default is 'false'.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupVault_async
 */
  deleteBackupVault(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupVaultRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteBackupVault(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupVaultRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupVault(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupVaultRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupVault(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBackupVault(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteBackupVault()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_vault.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupVault_async
 */
  async checkDeleteBackupVaultProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteBackupVault, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Updates the settings of a DataSource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   DataSource resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then the request will fail.
 * @param {google.cloud.backupdr.v1.DataSource} request.dataSource
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.allowMissing]
 *   Optional. Enable upsert.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_data_source.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateDataSource_async
 */
  updateDataSource(
      request?: protos.google.cloud.backupdr.v1.IUpdateDataSourceRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateDataSource(
      request: protos.google.cloud.backupdr.v1.IUpdateDataSourceRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDataSource(
      request: protos.google.cloud.backupdr.v1.IUpdateDataSourceRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDataSource(
      request?: protos.google.cloud.backupdr.v1.IUpdateDataSourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IDataSource, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'data_source.name': request.dataSource!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateDataSource(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateDataSource()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_data_source.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateDataSource_async
 */
  async checkUpdateDataSourceProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.DataSource, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDataSource, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.DataSource, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Updates the settings of a Backup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask is used to specify the fields to be overwritten in the
 *   Backup resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then the request will fail.
 * @param {google.cloud.backupdr.v1.Backup} request.backup
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateBackup_async
 */
  updateBackup(
      request?: protos.google.cloud.backupdr.v1.IUpdateBackupRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateBackup(
      request: protos.google.cloud.backupdr.v1.IUpdateBackupRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBackup(
      request: protos.google.cloud.backupdr.v1.IUpdateBackupRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBackup(
      request?: protos.google.cloud.backupdr.v1.IUpdateBackupRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'backup.name': request.backup!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateBackup(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateBackup()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.update_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_UpdateBackup_async
 */
  async checkUpdateBackupProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.Backup, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateBackup, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.Backup, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Deletes a Backup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackup_async
 */
  deleteBackup(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteBackup(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackup(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackup(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackup, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteBackup()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackup_async
 */
  async checkDeleteBackupProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.Backup, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteBackup, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.Backup, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Restore from a Backup
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the Backup instance, in the format
 *   'projects/* /locations/* /backupVaults/* /dataSources/* /backups/'.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {google.cloud.backupdr.v1.ComputeInstanceTargetEnvironment} request.computeInstanceTargetEnvironment
 *   Compute Engine target environment to be used during restore.
 * @param {google.cloud.backupdr.v1.ComputeInstanceRestoreProperties} request.computeInstanceRestoreProperties
 *   Compute Engine instance properties to be overridden during restore.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.restore_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_RestoreBackup_async
 */
  restoreBackup(
      request?: protos.google.cloud.backupdr.v1.IRestoreBackupRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  restoreBackup(
      request: protos.google.cloud.backupdr.v1.IRestoreBackupRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restoreBackup(
      request: protos.google.cloud.backupdr.v1.IRestoreBackupRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restoreBackup(
      request?: protos.google.cloud.backupdr.v1.IRestoreBackupRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IRestoreBackupResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.restoreBackup(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `restoreBackup()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.restore_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_RestoreBackup_async
 */
  async checkRestoreBackupProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.RestoreBackupResponse, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreBackup, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.RestoreBackupResponse, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Create a BackupPlan
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The `BackupPlan` project and location in the format
 *   `projects/{project}/locations/{location}`. In Cloud BackupDR locations
 *   map to GCP regions, for example **us-central1**.
 * @param {string} request.backupPlanId
 *   Required. The name of the `BackupPlan` to create. The name must be unique
 *   for the specified project and location.The name must start with a lowercase
 *   letter followed by up to 62 lowercase letters, numbers, or hyphens.
 *   Pattern, /{@link protos.a-z0-9-|a-z}{,62}/.
 * @param {google.cloud.backupdr.v1.BackupPlan} request.backupPlan
 *   Required. The `BackupPlan` resource object to create.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_plan.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupPlan_async
 */
  createBackupPlan(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupPlanRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createBackupPlan(
      request: protos.google.cloud.backupdr.v1.ICreateBackupPlanRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupPlan(
      request: protos.google.cloud.backupdr.v1.ICreateBackupPlanRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupPlan(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupPlanRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlan, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createBackupPlan(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createBackupPlan()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_plan.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupPlan_async
 */
  async checkCreateBackupPlanProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.BackupPlan, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBackupPlan, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.BackupPlan, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Deletes a single BackupPlan.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the `BackupPlan` to delete.
 *
 *   Format: `projects/{project}/locations/{location}/backupPlans/{backup_plan}`
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_plan.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupPlan_async
 */
  deleteBackupPlan(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupPlanRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteBackupPlan(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupPlanRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupPlan(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupPlanRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupPlan(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupPlanRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBackupPlan(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteBackupPlan()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_plan.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupPlan_async
 */
  async checkDeleteBackupPlanProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteBackupPlan, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Create a BackupPlanAssociation
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The backup plan association project and location in the format
 *   `projects/{project_id}/locations/{location}`. In Cloud BackupDR locations
 *   map to GCP regions, for example **us-central1**.
 * @param {string} request.backupPlanAssociationId
 *   Required. The name of the backup plan association to create. The name must
 *   be unique for the specified project and location.
 * @param {google.cloud.backupdr.v1.BackupPlanAssociation} request.backupPlanAssociation
 *   Required. The resource being created
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_plan_association.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupPlanAssociation_async
 */
  createBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupPlanAssociationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.ICreateBackupPlanAssociationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.ICreateBackupPlanAssociationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.ICreateBackupPlanAssociationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createBackupPlanAssociation(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createBackupPlanAssociation()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.create_backup_plan_association.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_CreateBackupPlanAssociation_async
 */
  async checkCreateBackupPlanAssociationProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.BackupPlanAssociation, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBackupPlanAssociation, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.BackupPlanAssociation, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Deletes a single BackupPlanAssociation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the backup plan association resource, in the format
 *   `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_plan_association.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupPlanAssociation_async
 */
  deleteBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupPlanAssociationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupPlanAssociationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupPlanAssociation(
      request: protos.google.cloud.backupdr.v1.IDeleteBackupPlanAssociationRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBackupPlanAssociation(
      request?: protos.google.cloud.backupdr.v1.IDeleteBackupPlanAssociationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBackupPlanAssociation(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteBackupPlanAssociation()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.delete_backup_plan_association.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_DeleteBackupPlanAssociation_async
 */
  async checkDeleteBackupPlanAssociationProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteBackupPlanAssociation, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Triggers a new Backup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the backup plan association resource, in the format
 *   `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
 * @param {string} request.ruleId
 *   Required. backup rule_id for which a backup needs to be triggered.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.trigger_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_TriggerBackup_async
 */
  triggerBackup(
      request?: protos.google.cloud.backupdr.v1.ITriggerBackupRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  triggerBackup(
      request: protos.google.cloud.backupdr.v1.ITriggerBackupRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  triggerBackup(
      request: protos.google.cloud.backupdr.v1.ITriggerBackupRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  triggerBackup(
      request?: protos.google.cloud.backupdr.v1.ITriggerBackupRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IBackupPlanAssociation, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.triggerBackup(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `triggerBackup()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.trigger_backup.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_TriggerBackup_async
 */
  async checkTriggerBackupProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.BackupPlanAssociation, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.triggerBackup, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.BackupPlanAssociation, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
/**
 * Initializes the service related config for a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the serviceConfig used to initialize the
 *   service. Format:
 *   `projects/{project_id}/locations/{location}/serviceConfig`.
 * @param {string} request.resourceType
 *   Required. The resource type to which the default service config will be
 *   applied. Examples include, "compute.googleapis.com/Instance" and
 *   "storage.googleapis.com/Bucket".
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and t
 *   he request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.initialize_service.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_InitializeService_async
 */
  initializeService(
      request?: protos.google.cloud.backupdr.v1.IInitializeServiceRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  initializeService(
      request: protos.google.cloud.backupdr.v1.IInitializeServiceRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  initializeService(
      request: protos.google.cloud.backupdr.v1.IInitializeServiceRequest,
      callback: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  initializeService(
      request?: protos.google.cloud.backupdr.v1.IInitializeServiceRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.backupdr.v1.IInitializeServiceResponse, protos.google.cloud.backupdr.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.initializeService(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `initializeService()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.initialize_service.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_InitializeService_async
 */
  async checkInitializeServiceProgress(name: string): Promise<LROperation<protos.google.cloud.backupdr.v1.InitializeServiceResponse, protos.google.cloud.backupdr.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.initializeService, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.backupdr.v1.InitializeServiceResponse, protos.google.cloud.backupdr.v1.OperationMetadata>;
  }
 /**
 * Lists ManagementServers in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve management servers
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud BackupDR, locations map to Google Cloud regions, for example
 *   **us-central1**. To retrieve management servers for all locations, use "-"
 *   for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.ManagementServer|ManagementServer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listManagementServersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listManagementServers(
      request?: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IManagementServer[],
        protos.google.cloud.backupdr.v1.IListManagementServersRequest|null,
        protos.google.cloud.backupdr.v1.IListManagementServersResponse
      ]>;
  listManagementServers(
      request: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListManagementServersRequest,
          protos.google.cloud.backupdr.v1.IListManagementServersResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IManagementServer>): void;
  listManagementServers(
      request: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListManagementServersRequest,
          protos.google.cloud.backupdr.v1.IListManagementServersResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IManagementServer>): void;
  listManagementServers(
      request?: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListManagementServersRequest,
          protos.google.cloud.backupdr.v1.IListManagementServersResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IManagementServer>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListManagementServersRequest,
          protos.google.cloud.backupdr.v1.IListManagementServersResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IManagementServer>):
      Promise<[
        protos.google.cloud.backupdr.v1.IManagementServer[],
        protos.google.cloud.backupdr.v1.IListManagementServersRequest|null,
        protos.google.cloud.backupdr.v1.IListManagementServersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listManagementServers(request, options, callback);
  }

/**
 * Equivalent to `listManagementServers`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve management servers
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud BackupDR, locations map to Google Cloud regions, for example
 *   **us-central1**. To retrieve management servers for all locations, use "-"
 *   for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.ManagementServer|ManagementServer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listManagementServersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listManagementServersStream(
      request?: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listManagementServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listManagementServers.createStream(
      this.innerApiCalls.listManagementServers as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listManagementServers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve management servers
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud BackupDR, locations map to Google Cloud regions, for example
 *   **us-central1**. To retrieve management servers for all locations, use "-"
 *   for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.ManagementServer|ManagementServer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_management_servers.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListManagementServers_async
 */
  listManagementServersAsync(
      request?: protos.google.cloud.backupdr.v1.IListManagementServersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IManagementServer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listManagementServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listManagementServers.asyncIterate(
      this.innerApiCalls['listManagementServers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IManagementServer>;
  }
 /**
 * Lists BackupVaults in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupVaultView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   Vault.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBackupVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupVaults(
      request?: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault[],
        protos.google.cloud.backupdr.v1.IListBackupVaultsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupVaultsResponse
      ]>;
  listBackupVaults(
      request: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IListBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>): void;
  listBackupVaults(
      request: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IListBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>): void;
  listBackupVaults(
      request?: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IListBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IListBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault[],
        protos.google.cloud.backupdr.v1.IListBackupVaultsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupVaultsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listBackupVaults(request, options, callback);
  }

/**
 * Equivalent to `listBackupVaults`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupVaultView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   Vault.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBackupVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupVaultsStream(
      request?: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupVaults.createStream(
      this.innerApiCalls.listBackupVaults as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBackupVaults`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupVaultView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   Vault.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_backup_vaults.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListBackupVaults_async
 */
  listBackupVaultsAsync(
      request?: protos.google.cloud.backupdr.v1.IListBackupVaultsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IBackupVault>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupVaults.asyncIterate(
      this.innerApiCalls['listBackupVaults'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IBackupVault>;
  }
 /**
 * FetchUsableBackupVaults lists usable BackupVaults in a given project and
 * location. Usable BackupVault are the ones that user has
 * backupdr.backupVaults.get permission.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `fetchUsableBackupVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  fetchUsableBackupVaults(
      request?: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault[],
        protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest|null,
        protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse
      ]>;
  fetchUsableBackupVaults(
      request: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>): void;
  fetchUsableBackupVaults(
      request: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>): void;
  fetchUsableBackupVaults(
      request?: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
          protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupVault>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupVault[],
        protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest|null,
        protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.fetchUsableBackupVaults(request, options, callback);
  }

/**
 * Equivalent to `fetchUsableBackupVaults`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `fetchUsableBackupVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  fetchUsableBackupVaultsStream(
      request?: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['fetchUsableBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchUsableBackupVaults.createStream(
      this.innerApiCalls.fetchUsableBackupVaults as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `fetchUsableBackupVaults`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backupvault stores
 *   information, in the format 'projects/{project_id}/locations/{location}'. In
 *   Cloud Backup and DR, locations map to Google Cloud regions, for example
 *   **us-central1**.
 *   To retrieve backupvault stores for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.BackupVault|BackupVault}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.fetch_usable_backup_vaults.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_FetchUsableBackupVaults_async
 */
  fetchUsableBackupVaultsAsync(
      request?: protos.google.cloud.backupdr.v1.IFetchUsableBackupVaultsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IBackupVault>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['fetchUsableBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchUsableBackupVaults.asyncIterate(
      this.innerApiCalls['fetchUsableBackupVaults'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IBackupVault>;
  }
 /**
 * Lists DataSources in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve data
 *   sources information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.DataSource|DataSource}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDataSourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDataSources(
      request?: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IDataSource[],
        protos.google.cloud.backupdr.v1.IListDataSourcesRequest|null,
        protos.google.cloud.backupdr.v1.IListDataSourcesResponse
      ]>;
  listDataSources(
      request: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
          protos.google.cloud.backupdr.v1.IListDataSourcesResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IDataSource>): void;
  listDataSources(
      request: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
          protos.google.cloud.backupdr.v1.IListDataSourcesResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IDataSource>): void;
  listDataSources(
      request?: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
          protos.google.cloud.backupdr.v1.IListDataSourcesResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IDataSource>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
          protos.google.cloud.backupdr.v1.IListDataSourcesResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IDataSource>):
      Promise<[
        protos.google.cloud.backupdr.v1.IDataSource[],
        protos.google.cloud.backupdr.v1.IListDataSourcesRequest|null,
        protos.google.cloud.backupdr.v1.IListDataSourcesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listDataSources(request, options, callback);
  }

/**
 * Equivalent to `listDataSources`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve data
 *   sources information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.DataSource|DataSource} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDataSourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDataSourcesStream(
      request?: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSources.createStream(
      this.innerApiCalls.listDataSources as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDataSources`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve data
 *   sources information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.DataSource|DataSource}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_data_sources.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListDataSources_async
 */
  listDataSourcesAsync(
      request?: protos.google.cloud.backupdr.v1.IListDataSourcesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IDataSource>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSources.asyncIterate(
      this.innerApiCalls['listDataSources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IDataSource>;
  }
 /**
 * Lists Backups in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup
 *   information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.Backup|Backup}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBackupsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackups(
      request?: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackup[],
        protos.google.cloud.backupdr.v1.IListBackupsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupsResponse
      ]>;
  listBackups(
      request: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupsRequest,
          protos.google.cloud.backupdr.v1.IListBackupsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackup>): void;
  listBackups(
      request: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupsRequest,
          protos.google.cloud.backupdr.v1.IListBackupsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackup>): void;
  listBackups(
      request?: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupsRequest,
          protos.google.cloud.backupdr.v1.IListBackupsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackup>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupsRequest,
          protos.google.cloud.backupdr.v1.IListBackupsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackup>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackup[],
        protos.google.cloud.backupdr.v1.IListBackupsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

/**
 * Equivalent to `listBackups`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup
 *   information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.Backup|Backup} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBackupsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupsStream(
      request?: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBackups`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup
 *   information, in the format
 *   'projects/{project_id}/locations/{location}'. In Cloud Backup and DR,
 *   locations map to Google Cloud regions, for example **us-central1**.
 *   To retrieve data sources for all locations, use "-" for the
 *   '{location}' value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {google.cloud.backupdr.v1.BackupView} [request.view]
 *   Optional. Reserved for future use to provide a BASIC & FULL view of Backup
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_backups.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListBackups_async
 */
  listBackupsAsync(
      request?: protos.google.cloud.backupdr.v1.IListBackupsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IBackup>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IBackup>;
  }
 /**
 * Lists BackupPlans in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve `BackupPlans`
 *   information. Format: `projects/{project}/locations/{location}`. In Cloud
 *   BackupDR, locations map to GCP regions, for e.g. **us-central1**. To
 *   retrieve backup plans for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `BackupPlans` to return in a single
 *   response. If not specified, a default value will be chosen by the service.
 *   Note that the response may include a partial list and a caller should
 *   only rely on the response's
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   to determine if there are more instances left to be queried.
 * @param {string} [request.pageToken]
 *   Optional. The value of
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   received from a previous `ListBackupPlans` call.
 *   Provide this to retrieve the subsequent page in a multi-page list of
 *   results. When paginating, all other parameters provided to
 *   `ListBackupPlans` must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Field match expression used to filter the results.
 * @param {string} [request.orderBy]
 *   Optional. Field by which to sort the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.BackupPlan|BackupPlan}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBackupPlansAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupPlans(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlan[],
        protos.google.cloud.backupdr.v1.IListBackupPlansRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupPlansResponse
      ]>;
  listBackupPlans(
      request: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlansResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlan>): void;
  listBackupPlans(
      request: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlansResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlan>): void;
  listBackupPlans(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlansResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlan>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlansResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlan>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlan[],
        protos.google.cloud.backupdr.v1.IListBackupPlansRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupPlansResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listBackupPlans(request, options, callback);
  }

/**
 * Equivalent to `listBackupPlans`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve `BackupPlans`
 *   information. Format: `projects/{project}/locations/{location}`. In Cloud
 *   BackupDR, locations map to GCP regions, for e.g. **us-central1**. To
 *   retrieve backup plans for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `BackupPlans` to return in a single
 *   response. If not specified, a default value will be chosen by the service.
 *   Note that the response may include a partial list and a caller should
 *   only rely on the response's
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   to determine if there are more instances left to be queried.
 * @param {string} [request.pageToken]
 *   Optional. The value of
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   received from a previous `ListBackupPlans` call.
 *   Provide this to retrieve the subsequent page in a multi-page list of
 *   results. When paginating, all other parameters provided to
 *   `ListBackupPlans` must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Field match expression used to filter the results.
 * @param {string} [request.orderBy]
 *   Optional. Field by which to sort the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.BackupPlan|BackupPlan} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBackupPlansAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupPlansStream(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlans.createStream(
      this.innerApiCalls.listBackupPlans as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBackupPlans`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve `BackupPlans`
 *   information. Format: `projects/{project}/locations/{location}`. In Cloud
 *   BackupDR, locations map to GCP regions, for e.g. **us-central1**. To
 *   retrieve backup plans for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `BackupPlans` to return in a single
 *   response. If not specified, a default value will be chosen by the service.
 *   Note that the response may include a partial list and a caller should
 *   only rely on the response's
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   to determine if there are more instances left to be queried.
 * @param {string} [request.pageToken]
 *   Optional. The value of
 *   {@link protos.google.cloud.backupdr.v1.ListBackupPlansResponse.next_page_token|next_page_token}
 *   received from a previous `ListBackupPlans` call.
 *   Provide this to retrieve the subsequent page in a multi-page list of
 *   results. When paginating, all other parameters provided to
 *   `ListBackupPlans` must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Field match expression used to filter the results.
 * @param {string} [request.orderBy]
 *   Optional. Field by which to sort the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.BackupPlan|BackupPlan}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_backup_plans.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListBackupPlans_async
 */
  listBackupPlansAsync(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlansRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IBackupPlan>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlans.asyncIterate(
      this.innerApiCalls['listBackupPlans'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IBackupPlan>;
  }
 /**
 * Lists BackupPlanAssociations in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup Plan
 *   Associations information, in the format
 *   `projects/{project_id}/locations/{location}`. In Cloud BackupDR, locations
 *   map to GCP regions, for example **us-central1**. To retrieve backup plan
 *   associations for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.backupdr.v1.BackupPlanAssociation|BackupPlanAssociation}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBackupPlanAssociationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupPlanAssociations(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlanAssociation[],
        protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse
      ]>;
  listBackupPlanAssociations(
      request: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation>): void;
  listBackupPlanAssociations(
      request: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation>): void;
  listBackupPlanAssociations(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation>,
      callback?: PaginationCallback<
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
          protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse|null|undefined,
          protos.google.cloud.backupdr.v1.IBackupPlanAssociation>):
      Promise<[
        protos.google.cloud.backupdr.v1.IBackupPlanAssociation[],
        protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest|null,
        protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listBackupPlanAssociations(request, options, callback);
  }

/**
 * Equivalent to `listBackupPlanAssociations`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup Plan
 *   Associations information, in the format
 *   `projects/{project_id}/locations/{location}`. In Cloud BackupDR, locations
 *   map to GCP regions, for example **us-central1**. To retrieve backup plan
 *   associations for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.backupdr.v1.BackupPlanAssociation|BackupPlanAssociation} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBackupPlanAssociationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBackupPlanAssociationsStream(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupPlanAssociations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlanAssociations.createStream(
      this.innerApiCalls.listBackupPlanAssociations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBackupPlanAssociations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location for which to retrieve backup Plan
 *   Associations information, in the format
 *   `projects/{project_id}/locations/{location}`. In Cloud BackupDR, locations
 *   map to GCP regions, for example **us-central1**. To retrieve backup plan
 *   associations for all locations, use "-" for the
 *   `{location}` value.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.backupdr.v1.BackupPlanAssociation|BackupPlanAssociation}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/backup_d_r.list_backup_plan_associations.js</caption>
 * region_tag:backupdr_v1_generated_BackupDR_ListBackupPlanAssociations_async
 */
  listBackupPlanAssociationsAsync(
      request?: protos.google.cloud.backupdr.v1.IListBackupPlanAssociationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.backupdr.v1.IBackupPlanAssociation>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBackupPlanAssociations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlanAssociations.asyncIterate(
      this.innerApiCalls['listBackupPlanAssociations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.backupdr.v1.IBackupPlanAssociation>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backupvault
   * @param {string} datasource
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(project:string,location:string,backupvault:string,datasource:string,backup:string) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      location: location,
      backupvault: backupvault,
      datasource: datasource,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the location from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).location;
  }

  /**
   * Parse the backupvault from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backupvault.
   */
  matchBackupvaultFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backupvault;
  }

  /**
   * Parse the datasource from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the datasource.
   */
  matchDatasourceFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).datasource;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified backupPlan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_plan
   * @returns {string} Resource name string.
   */
  backupPlanPath(project:string,location:string,backupPlan:string) {
    return this.pathTemplates.backupPlanPathTemplate.render({
      project: project,
      location: location,
      backup_plan: backupPlan,
    });
  }

  /**
   * Parse the project from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName).project;
  }

  /**
   * Parse the location from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName).location;
  }

  /**
   * Parse the backup_plan from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the backup_plan.
   */
  matchBackupPlanFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName).backup_plan;
  }

  /**
   * Return a fully-qualified backupPlanAssociation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_plan_association
   * @returns {string} Resource name string.
   */
  backupPlanAssociationPath(project:string,location:string,backupPlanAssociation:string) {
    return this.pathTemplates.backupPlanAssociationPathTemplate.render({
      project: project,
      location: location,
      backup_plan_association: backupPlanAssociation,
    });
  }

  /**
   * Parse the project from BackupPlanAssociation resource.
   *
   * @param {string} backupPlanAssociationName
   *   A fully-qualified path representing BackupPlanAssociation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupPlanAssociationName(backupPlanAssociationName: string) {
    return this.pathTemplates.backupPlanAssociationPathTemplate.match(backupPlanAssociationName).project;
  }

  /**
   * Parse the location from BackupPlanAssociation resource.
   *
   * @param {string} backupPlanAssociationName
   *   A fully-qualified path representing BackupPlanAssociation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupPlanAssociationName(backupPlanAssociationName: string) {
    return this.pathTemplates.backupPlanAssociationPathTemplate.match(backupPlanAssociationName).location;
  }

  /**
   * Parse the backup_plan_association from BackupPlanAssociation resource.
   *
   * @param {string} backupPlanAssociationName
   *   A fully-qualified path representing BackupPlanAssociation resource.
   * @returns {string} A string representing the backup_plan_association.
   */
  matchBackupPlanAssociationFromBackupPlanAssociationName(backupPlanAssociationName: string) {
    return this.pathTemplates.backupPlanAssociationPathTemplate.match(backupPlanAssociationName).backup_plan_association;
  }

  /**
   * Return a fully-qualified backupVault resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backupvault
   * @returns {string} Resource name string.
   */
  backupVaultPath(project:string,location:string,backupvault:string) {
    return this.pathTemplates.backupVaultPathTemplate.render({
      project: project,
      location: location,
      backupvault: backupvault,
    });
  }

  /**
   * Parse the project from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName).project;
  }

  /**
   * Parse the location from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName).location;
  }

  /**
   * Parse the backupvault from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the backupvault.
   */
  matchBackupvaultFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName).backupvault;
  }

  /**
   * Return a fully-qualified dataSource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backupvault
   * @param {string} datasource
   * @returns {string} Resource name string.
   */
  dataSourcePath(project:string,location:string,backupvault:string,datasource:string) {
    return this.pathTemplates.dataSourcePathTemplate.render({
      project: project,
      location: location,
      backupvault: backupvault,
      datasource: datasource,
    });
  }

  /**
   * Parse the project from DataSource resource.
   *
   * @param {string} dataSourceName
   *   A fully-qualified path representing DataSource resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataSourceName(dataSourceName: string) {
    return this.pathTemplates.dataSourcePathTemplate.match(dataSourceName).project;
  }

  /**
   * Parse the location from DataSource resource.
   *
   * @param {string} dataSourceName
   *   A fully-qualified path representing DataSource resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataSourceName(dataSourceName: string) {
    return this.pathTemplates.dataSourcePathTemplate.match(dataSourceName).location;
  }

  /**
   * Parse the backupvault from DataSource resource.
   *
   * @param {string} dataSourceName
   *   A fully-qualified path representing DataSource resource.
   * @returns {string} A string representing the backupvault.
   */
  matchBackupvaultFromDataSourceName(dataSourceName: string) {
    return this.pathTemplates.dataSourcePathTemplate.match(dataSourceName).backupvault;
  }

  /**
   * Parse the datasource from DataSource resource.
   *
   * @param {string} dataSourceName
   *   A fully-qualified path representing DataSource resource.
   * @returns {string} A string representing the datasource.
   */
  matchDatasourceFromDataSourceName(dataSourceName: string) {
    return this.pathTemplates.dataSourcePathTemplate.match(dataSourceName).datasource;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified managementServer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} managementserver
   * @returns {string} Resource name string.
   */
  managementServerPath(project:string,location:string,managementserver:string) {
    return this.pathTemplates.managementServerPathTemplate.render({
      project: project,
      location: location,
      managementserver: managementserver,
    });
  }

  /**
   * Parse the project from ManagementServer resource.
   *
   * @param {string} managementServerName
   *   A fully-qualified path representing ManagementServer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromManagementServerName(managementServerName: string) {
    return this.pathTemplates.managementServerPathTemplate.match(managementServerName).project;
  }

  /**
   * Parse the location from ManagementServer resource.
   *
   * @param {string} managementServerName
   *   A fully-qualified path representing ManagementServer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromManagementServerName(managementServerName: string) {
    return this.pathTemplates.managementServerPathTemplate.match(managementServerName).location;
  }

  /**
   * Parse the managementserver from ManagementServer resource.
   *
   * @param {string} managementServerName
   *   A fully-qualified path representing ManagementServer resource.
   * @returns {string} A string representing the managementserver.
   */
  matchManagementserverFromManagementServerName(managementServerName: string) {
    return this.pathTemplates.managementServerPathTemplate.match(managementServerName).managementserver;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.backupDRStub && !this._terminated) {
      return this.backupDRStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
