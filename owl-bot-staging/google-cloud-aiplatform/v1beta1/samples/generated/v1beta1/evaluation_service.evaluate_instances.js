// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(location) {
  // [START aiplatform_v1beta1_generated_EvaluationService_EvaluateInstances_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Auto metric instances.
   *  Instances and metric spec for exact match metric.
   */
  // const exactMatchInput = {}
  /**
   *  Instances and metric spec for bleu metric.
   */
  // const bleuInput = {}
  /**
   *  Instances and metric spec for rouge metric.
   */
  // const rougeInput = {}
  /**
   *  LLM-based metric instance.
   *  General text generation metrics, applicable to other categories.
   *  Input for fluency metric.
   */
  // const fluencyInput = {}
  /**
   *  Input for coherence metric.
   */
  // const coherenceInput = {}
  /**
   *  Input for safety metric.
   */
  // const safetyInput = {}
  /**
   *  Input for groundedness metric.
   */
  // const groundednessInput = {}
  /**
   *  Input for fulfillment metric.
   */
  // const fulfillmentInput = {}
  /**
   *  Input for summarization quality metric.
   */
  // const summarizationQualityInput = {}
  /**
   *  Input for pairwise summarization quality metric.
   */
  // const pairwiseSummarizationQualityInput = {}
  /**
   *  Input for summarization helpfulness metric.
   */
  // const summarizationHelpfulnessInput = {}
  /**
   *  Input for summarization verbosity metric.
   */
  // const summarizationVerbosityInput = {}
  /**
   *  Input for question answering quality metric.
   */
  // const questionAnsweringQualityInput = {}
  /**
   *  Input for pairwise question answering quality metric.
   */
  // const pairwiseQuestionAnsweringQualityInput = {}
  /**
   *  Input for question answering relevance metric.
   */
  // const questionAnsweringRelevanceInput = {}
  /**
   *  Input for question answering helpfulness
   *  metric.
   */
  // const questionAnsweringHelpfulnessInput = {}
  /**
   *  Input for question answering correctness
   *  metric.
   */
  // const questionAnsweringCorrectnessInput = {}
  /**
   *  Tool call metric instances.
   *  Input for tool call valid metric.
   */
  // const toolCallValidInput = {}
  /**
   *  Input for tool name match metric.
   */
  // const toolNameMatchInput = {}
  /**
   *  Input for tool parameter key match metric.
   */
  // const toolParameterKeyMatchInput = {}
  /**
   *  Input for tool parameter key value match metric.
   */
  // const toolParameterKvMatchInput = {}
  /**
   *  Required. The resource name of the Location to evaluate the instances.
   *  Format: `projects/{project}/locations/{location}`
   */
  // const location = 'abc123'

  // Imports the Aiplatform library
  const {EvaluationServiceClient} = require('@google-cloud/aiplatform').v1beta1;

  // Instantiates a client
  const aiplatformClient = new EvaluationServiceClient();

  async function callEvaluateInstances() {
    // Construct request
    const request = {
      location,
    };

    // Run request
    const response = await aiplatformClient.evaluateInstances(request);
    console.log(response);
  }

  callEvaluateInstances();
  // [END aiplatform_v1beta1_generated_EvaluationService_EvaluateInstances_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
