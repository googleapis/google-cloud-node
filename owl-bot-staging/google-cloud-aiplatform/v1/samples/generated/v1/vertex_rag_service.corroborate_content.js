// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START aiplatform_v1_generated_VertexRagService_CorroborateContent_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the Location from which to corroborate text.
   *  The users must have permission to make a call in the project.
   *  Format:
   *  `projects/{project}/locations/{location}`.
   */
  // const parent = 'abc123'
  /**
   *  Optional. Input content to corroborate, only text format is supported for
   *  now.
   */
  // const content = {}
  /**
   *  Optional. Facts used to generate the text can also be used to corroborate
   *  the text.
   */
  // const facts = [1,2,3,4]
  /**
   *  Optional. Parameters that can be set to override default settings per
   *  request.
   */
  // const parameters = {}

  // Imports the Aiplatform library
  const {VertexRagServiceClient} = require('@google-cloud/aiplatform').v1;

  // Instantiates a client
  const aiplatformClient = new VertexRagServiceClient();

  async function callCorroborateContent() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const response = await aiplatformClient.corroborateContent(request);
    console.log(response);
  }

  callCorroborateContent();
  // [END aiplatform_v1_generated_VertexRagService_CorroborateContent_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
