// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START aiplatform_v1_generated_ScheduleService_ListSchedules_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the Location to list the Schedules from.
   *  Format: `projects/{project}/locations/{location}`
   */
  // const parent = 'abc123'
  /**
   *  Lists the Schedules that match the filter expression. The following
   *  fields are supported:
   *  * `display_name`: Supports `=`, `!=` comparisons, and `:` wildcard.
   *  * `state`: Supports `=` and `!=` comparisons.
   *  * `request`: Supports existence of the <request_type> check.
   *        (e.g. `create_pipeline_job_request:*` --> Schedule has
   *        create_pipeline_job_request).
   *  * `create_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   *        Values must be in RFC 3339 format.
   *  * `start_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   *        Values must be in RFC 3339 format.
   *  * `end_time`: Supports `=`, `!=`, `<`, `>`, `<=`, `>=` comparisons and `:*`
   *        existence check. Values must be in RFC 3339 format.
   *  * `next_run_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=`
   *        comparisons. Values must be in RFC 3339 format.
   *  Filter expressions can be combined together using logical operators
   *  (`NOT`, `AND` & `OR`).
   *  The syntax to define filter expression is based on
   *  https://google.aip.dev/160.
   *  Examples:
   *  * `state="ACTIVE" AND display_name:"my_schedule_*"`
   *  * `NOT display_name="my_schedule"`
   *  * `create_time>"2021-05-18T00:00:00Z"`
   *  * `end_time>"2021-05-18T00:00:00Z" OR NOT end_time:*`
   *  * `create_pipeline_job_request:*`
   */
  // const filter = 'abc123'
  /**
   *  The standard list page size.
   *  Default to 100 if not specified.
   */
  // const pageSize = 1234
  /**
   *  The standard list page token.
   *  Typically obtained via
   *  ListSchedulesResponse.next_page_token google.cloud.aiplatform.v1.ListSchedulesResponse.next_page_token 
   *  of the previous
   *  ScheduleService.ListSchedules google.cloud.aiplatform.v1.ScheduleService.ListSchedules 
   *  call.
   */
  // const pageToken = 'abc123'
  /**
   *  A comma-separated list of fields to order by. The default sort order is in
   *  ascending order. Use "desc" after a field name for descending. You can have
   *  multiple order_by fields provided.
   *  For example, using "create_time desc, end_time" will order results by
   *  create time in descending order, and if there are multiple schedules having
   *  the same create time, order them by the end time in ascending order.
   *  If order_by is not specified, it will order by default with create_time in
   *  descending order.
   *  Supported fields:
   *    * `create_time`
   *    * `start_time`
   *    * `end_time`
   *    * `next_run_time`
   */
  // const orderBy = 'abc123'

  // Imports the Aiplatform library
  const {ScheduleServiceClient} = require('@google-cloud/aiplatform').v1;

  // Instantiates a client
  const aiplatformClient = new ScheduleServiceClient();

  async function callListSchedules() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await aiplatformClient.listSchedulesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListSchedules();
  // [END aiplatform_v1_generated_ScheduleService_ListSchedules_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
