// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as modelarmorModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ModelArmorClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new modelarmorModule.v1.ModelArmorClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'modelarmor.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new modelarmorModule.v1.ModelArmorClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = modelarmorModule.v1.ModelArmorClient.servicePath;
                assert.strictEqual(servicePath, 'modelarmor.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = modelarmorModule.v1.ModelArmorClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'modelarmor.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new modelarmorModule.v1.ModelArmorClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'modelarmor.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new modelarmorModule.v1.ModelArmorClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'modelarmor.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new modelarmorModule.v1.ModelArmorClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'modelarmor.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new modelarmorModule.v1.ModelArmorClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'modelarmor.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new modelarmorModule.v1.ModelArmorClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = modelarmorModule.v1.ModelArmorClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new modelarmorModule.v1.ModelArmorClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.modelArmorStub, undefined);
            await client.initialize();
            assert(client.modelArmorStub);
        });

        it('has close method for the initialized client', done => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.modelArmorStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.modelArmorStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getTemplate', () => {
        it('invokes getTemplate without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.getTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.getTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTemplate without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.getTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ITemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTemplate with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTemplate with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getTemplate(request), expectedError);
        });
    });

    describe('createTemplate', () => {
        it('invokes createTemplate without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.CreateTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.CreateTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.createTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.createTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTemplate without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.CreateTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.CreateTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.createTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ITemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTemplate with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.CreateTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.CreateTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTemplate with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.CreateTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.CreateTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createTemplate(request), expectedError);
        });
    });

    describe('updateTemplate', () => {
        it('invokes updateTemplate without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateTemplateRequest()
            );
            request.template ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateTemplateRequest', ['template', 'name']);
            request.template.name = defaultValue1;
            const expectedHeaderRequestParams = `template.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.updateTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTemplate without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateTemplateRequest()
            );
            request.template ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateTemplateRequest', ['template', 'name']);
            request.template.name = defaultValue1;
            const expectedHeaderRequestParams = `template.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.Template()
            );
            client.innerApiCalls.updateTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ITemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTemplate with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateTemplateRequest()
            );
            request.template ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateTemplateRequest', ['template', 'name']);
            request.template.name = defaultValue1;
            const expectedHeaderRequestParams = `template.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTemplate with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateTemplateRequest()
            );
            request.template ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateTemplateRequest', ['template', 'name']);
            request.template.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateTemplate(request), expectedError);
        });
    });

    describe('deleteTemplate', () => {
        it('invokes deleteTemplate without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.DeleteTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.DeleteTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTemplate without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.DeleteTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.DeleteTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTemplate with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.DeleteTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.DeleteTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTemplate with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.DeleteTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.DeleteTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteTemplate(request), expectedError);
        });
    });

    describe('getFloorSetting', () => {
        it('invokes getFloorSetting without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetFloorSettingRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetFloorSettingRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.FloorSetting()
            );
            client.innerApiCalls.getFloorSetting = stubSimpleCall(expectedResponse);
            const [response] = await client.getFloorSetting(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFloorSetting without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetFloorSettingRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetFloorSettingRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.FloorSetting()
            );
            client.innerApiCalls.getFloorSetting = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getFloorSetting(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.IFloorSetting|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFloorSetting with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetFloorSettingRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetFloorSettingRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getFloorSetting = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getFloorSetting(request), expectedError);
            const actualRequest = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFloorSetting with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.GetFloorSettingRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.GetFloorSettingRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getFloorSetting(request), expectedError);
        });
    });

    describe('updateFloorSetting', () => {
        it('invokes updateFloorSetting without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateFloorSettingRequest()
            );
            request.floorSetting ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateFloorSettingRequest', ['floorSetting', 'name']);
            request.floorSetting.name = defaultValue1;
            const expectedHeaderRequestParams = `floor_setting.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.FloorSetting()
            );
            client.innerApiCalls.updateFloorSetting = stubSimpleCall(expectedResponse);
            const [response] = await client.updateFloorSetting(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFloorSetting without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateFloorSettingRequest()
            );
            request.floorSetting ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateFloorSettingRequest', ['floorSetting', 'name']);
            request.floorSetting.name = defaultValue1;
            const expectedHeaderRequestParams = `floor_setting.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.FloorSetting()
            );
            client.innerApiCalls.updateFloorSetting = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateFloorSetting(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.IFloorSetting|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFloorSetting with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateFloorSettingRequest()
            );
            request.floorSetting ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateFloorSettingRequest', ['floorSetting', 'name']);
            request.floorSetting.name = defaultValue1;
            const expectedHeaderRequestParams = `floor_setting.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateFloorSetting = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateFloorSetting(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFloorSetting as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFloorSetting with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.UpdateFloorSettingRequest()
            );
            request.floorSetting ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.UpdateFloorSettingRequest', ['floorSetting', 'name']);
            request.floorSetting.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateFloorSetting(request), expectedError);
        });
    });

    describe('sanitizeUserPrompt', () => {
        it('invokes sanitizeUserPrompt without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeUserPromptRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptResponse()
            );
            client.innerApiCalls.sanitizeUserPrompt = stubSimpleCall(expectedResponse);
            const [response] = await client.sanitizeUserPrompt(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeUserPrompt without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeUserPromptRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptResponse()
            );
            client.innerApiCalls.sanitizeUserPrompt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.sanitizeUserPrompt(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ISanitizeUserPromptResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeUserPrompt with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeUserPromptRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.sanitizeUserPrompt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.sanitizeUserPrompt(request), expectedError);
            const actualRequest = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeUserPrompt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeUserPrompt with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeUserPromptRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeUserPromptRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.sanitizeUserPrompt(request), expectedError);
        });
    });

    describe('sanitizeModelResponse', () => {
        it('invokes sanitizeModelResponse without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeModelResponseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseResponse()
            );
            client.innerApiCalls.sanitizeModelResponse = stubSimpleCall(expectedResponse);
            const [response] = await client.sanitizeModelResponse(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeModelResponse without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeModelResponseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseResponse()
            );
            client.innerApiCalls.sanitizeModelResponse = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.sanitizeModelResponse(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ISanitizeModelResponseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeModelResponse with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeModelResponseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.sanitizeModelResponse = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.sanitizeModelResponse(request), expectedError);
            const actualRequest = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.sanitizeModelResponse as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes sanitizeModelResponse with closed client', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.SanitizeModelResponseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.SanitizeModelResponseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.sanitizeModelResponse(request), expectedError);
        });
    });

    describe('listTemplates', () => {
        it('invokes listTemplates without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
            ];
            client.innerApiCalls.listTemplates = stubSimpleCall(expectedResponse);
            const [response] = await client.listTemplates(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTemplates without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
            ];
            client.innerApiCalls.listTemplates = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTemplates(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.modelarmor.v1.ITemplate[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTemplates with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listTemplates = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTemplates(request), expectedError);
            const actualRequest = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTemplatesStream without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
            ];
            client.descriptors.page.listTemplates.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.modelarmor.v1.Template[] = [];
                stream.on('data', (response: protos.google.cloud.modelarmor.v1.Template) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTemplates, request));
            assert(
                (client.descriptors.page.listTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listTemplatesStream with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listTemplates.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.modelarmor.v1.Template[] = [];
                stream.on('data', (response: protos.google.cloud.modelarmor.v1.Template) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTemplates, request));
            assert(
                (client.descriptors.page.listTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listTemplates without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
              generateSampleMessage(new protos.google.cloud.modelarmor.v1.Template()),
            ];
            client.descriptors.page.listTemplates.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.modelarmor.v1.ITemplate[] = [];
            const iterable = client.listTemplatesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listTemplates with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.modelarmor.v1.ListTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.modelarmor.v1.ListTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listTemplates.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTemplatesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.modelarmor.v1.ITemplate[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('folderLocationFloorSetting', () => {
            const fakePath = "/rendered/path/folderLocationFloorSetting";
            const expectedParameters = {
                folder: "folderValue",
                location: "locationValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderLocationFloorSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderLocationFloorSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderLocationFloorSettingPath', () => {
                const result = client.folderLocationFloorSettingPath("folderValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderLocationFloorSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderLocationFloorSettingName', () => {
                const result = client.matchFolderFromFolderLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFolderLocationFloorSettingName', () => {
                const result = client.matchLocationFromFolderLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.folderLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationLocationFloorSetting', () => {
            const fakePath = "/rendered/path/organizationLocationFloorSetting";
            const expectedParameters = {
                organization: "organizationValue",
                location: "locationValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationLocationFloorSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationLocationFloorSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationLocationFloorSettingPath', () => {
                const result = client.organizationLocationFloorSettingPath("organizationValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationLocationFloorSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationLocationFloorSettingName', () => {
                const result = client.matchOrganizationFromOrganizationLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOrganizationLocationFloorSettingName', () => {
                const result = client.matchLocationFromOrganizationLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.organizationLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationFloorSetting', () => {
            const fakePath = "/rendered/path/projectLocationFloorSetting";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationFloorSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationFloorSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationFloorSettingPath', () => {
                const result = client.projectLocationFloorSettingPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationFloorSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationFloorSettingName', () => {
                const result = client.matchProjectFromProjectLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationFloorSettingName', () => {
                const result = client.matchLocationFromProjectLocationFloorSettingName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationFloorSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('template', () => {
            const fakePath = "/rendered/path/template";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                template: "templateValue",
            };
            const client = new modelarmorModule.v1.ModelArmorClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.templatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.templatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('templatePath', () => {
                const result = client.templatePath("projectValue", "locationValue", "templateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.templatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTemplateName', () => {
                const result = client.matchProjectFromTemplateName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.templatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTemplateName', () => {
                const result = client.matchLocationFromTemplateName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.templatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTemplateFromTemplateName', () => {
                const result = client.matchTemplateFromTemplateName(fakePath);
                assert.strictEqual(result, "templateValue");
                assert((client.pathTemplates.templatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
