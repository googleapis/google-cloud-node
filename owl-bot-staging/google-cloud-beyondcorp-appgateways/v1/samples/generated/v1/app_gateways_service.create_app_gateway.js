// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, appGateway) {
  // [START beyondcorp_v1_generated_AppGatewaysService_CreateAppGateway_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource project name of the AppGateway location using the
   *  form: `projects/{project_id}/locations/{location_id}`
   */
  // const parent = 'abc123'
  /**
   *  Optional. User-settable AppGateway resource ID.
   *   * Must start with a letter.
   *   * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *   * Must end with a number or a letter.
   */
  // const appGatewayId = 'abc123'
  /**
   *  Required. A BeyondCorp AppGateway resource.
   */
  // const appGateway = {}
  /**
   *  Optional. An optional request ID to identify requests. Specify a unique
   *  request ID so that if you must retry your request, the server will know to
   *  ignore the request if it has already been completed. The server will
   *  guarantee that for at least 60 minutes since the first request.
   *  For example, consider a situation where you make an initial request and t
   *  he request times out. If you make the request again with the same request
   *  ID, the server can check if original operation with the same request ID
   *  was received, and if so, will ignore the second request. This prevents
   *  clients from accidentally creating duplicate commitments.
   *  The request ID must be a valid UUID with the exception that zero UUID is
   *  not supported (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'
  /**
   *  Optional. If set, validates request by executing a dry-run which would not
   *  alter the resource in any way.
   */
  // const validateOnly = true

  // Imports the Appgateways library
  const {AppGatewaysServiceClient} = require('@google-cloud/appgateways').v1;

  // Instantiates a client
  const appgatewaysClient = new AppGatewaysServiceClient();

  async function callCreateAppGateway() {
    // Construct request
    const request = {
      parent,
      appGateway,
    };

    // Run request
    const [operation] = await appgatewaysClient.createAppGateway(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callCreateAppGateway();
  // [END beyondcorp_v1_generated_AppGatewaysService_CreateAppGateway_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
