// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(placement, branch, visitorId) {
  // [START retail_v2alpha_generated_ConversationalSearchService_ConversationalSearch_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the search engine placement, such as
   *  `projects/* /locations/global/catalogs/default_catalog/placements/default_search`
   *  or
   *  `projects/* /locations/global/catalogs/default_catalog/servingConfigs/default_serving_config`
   *  This field is used to identify the serving config name and the set
   *  of models that will be used to make the search.
   */
  // const placement = 'abc123'
  /**
   *  Required. The branch resource name, such as
   *  `projects/* /locations/global/catalogs/default_catalog/branches/0`.
   *  Use "default_branch" as the branch ID or leave this field empty, to search
   *  products under the default branch.
   */
  // const branch = 'abc123'
  /**
   *  Optional. Raw search query to be searched for.
   *  If this field is empty, the request is considered a category browsing
   *  request.
   */
  // const query = 'abc123'
  /**
   *  Optional. The categories associated with a category page. Must be set for
   *  category navigation queries to achieve good search quality. The format
   *  should be the same as
   *  UserEvent.page_categories google.cloud.retail.v2alpha.UserEvent.page_categories;
   *  To represent full path of category, use '>' sign to separate different
   *  hierarchies. If '>' is part of the category name, replace it with
   *  other character(s).
   *  Category pages include special pages such as sales or promotions. For
   *  instance, a special sale page may have the category hierarchy:
   *  "pageCategories" : "Sales > 2017 Black Friday Deals".
   */
  // const pageCategories = ['abc','def']
  /**
   *  Optional. This field specifies the conversation id, which maintains the
   *  state of the conversation between client side and server side. Use the
   *  value from the previous
   *  ConversationalSearchResponse.conversation_id google.cloud.retail.v2alpha.ConversationalSearchResponse.conversation_id.
   *  For the initial request, this should be empty.
   */
  // const conversationId = 'abc123'
  /**
   *  Optional. Search parameters.
   */
  // const searchParams = {}
  /**
   *  Required. A unique identifier for tracking visitors. For example, this
   *  could be implemented with an HTTP cookie, which should be able to uniquely
   *  identify a visitor on a single device. This unique identifier should not
   *  change if the visitor logs in or out of the website.
   *  This should be the same identifier as
   *  UserEvent.visitor_id google.cloud.retail.v2alpha.UserEvent.visitor_id.
   *  The field must be a UTF-8 encoded string with a length limit of 128
   *  characters. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  // const visitorId = 'abc123'
  /**
   *  Optional. User information.
   */
  // const userInfo = {}
  /**
   *  Optional. This field specifies all conversational filtering related
   *  parameters.
   */
  // const conversationalFilteringSpec = {}

  // Imports the Retail library
  const {ConversationalSearchServiceClient} = require('@google-cloud/retail').v2alpha;

  // Instantiates a client
  const retailClient = new ConversationalSearchServiceClient();

  async function callConversationalSearch() {
    // Construct request
    const request = {
      placement,
      branch,
      visitorId,
    };

    // Run request
    const stream = await retailClient.conversationalSearch(request);
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
  }

  callConversationalSearch();
  // [END retail_v2alpha_generated_ConversationalSearchService_ConversationalSearch_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
