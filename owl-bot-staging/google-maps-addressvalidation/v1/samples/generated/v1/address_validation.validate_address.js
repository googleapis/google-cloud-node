// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(address) {
  // [START addressvalidation_v1_generated_AddressValidation_ValidateAddress_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The address being validated. Unformatted addresses should be
   *  submitted via `address_lines` google.type.PostalAddress.address_lines.
   *  The total length of the fields in this input must not exceed 280
   *  characters.
   *  Supported regions can be found in the
   *  FAQ (https://developers.google.com/maps/documentation/address-validation/faq#which_regions_are_currently_supported).
   *  The language_code google.type.PostalAddress.language_code  value in the
   *  input address is reserved for future uses and is ignored today. The
   *  validated address result will be populated based on the preferred language
   *  for the given address, as identified by the system.
   *  The Address Validation API ignores the values in
   *  recipients google.type.PostalAddress.recipients  and
   *  organization google.type.PostalAddress.organization. Any values in those
   *  fields will be discarded and not returned. Please do not set them.
   */
  // const address = {}
  /**
   *  This field must be empty for the first address validation request. If
   *  more requests are necessary to fully validate a single address (for
   *  example if the changes the user makes after the initial validation need to
   *  be re-validated), then each followup request must populate this field with
   *  the
   *  response_id google.maps.addressvalidation.v1.ValidateAddressResponse.response_id 
   *  from the very first response in the validation sequence.
   */
  // const previousResponseId = 'abc123'
  /**
   *  Enables USPS CASS compatible mode. This affects _only_ the
   *  google.maps.addressvalidation.v1.ValidationResult.usps_data  field of
   *  google.maps.addressvalidation.v1.ValidationResult. Note: for USPS CASS
   *  enabled requests for addresses in Puerto Rico, a
   *  google.type.PostalAddress.region_code  of the `address` must be provided
   *  as "PR", or an google.type.PostalAddress.administrative_area  of the
   *  `address` must be provided as "Puerto Rico" (case-insensitive) or "PR".
   *  It's recommended to use a componentized `address`, or alternatively specify
   *  at least two google.type.PostalAddress.address_lines  where the first line
   *  contains the street number and name and the second line contains the city,
   *  state, and zip code.
   */
  // const enableUspsCass = true

  // Imports the Addressvalidation library
  const {AddressValidationClient} = require('@googlemaps/addressvalidation').v1;

  // Instantiates a client
  const addressvalidationClient = new AddressValidationClient();

  async function callValidateAddress() {
    // Construct request
    const request = {
      address,
    };

    // Run request
    const response = await addressvalidationClient.validateAddress(request);
    console.log(response);
  }

  callValidateAddress();
  // [END addressvalidation_v1_generated_AddressValidation_ValidateAddress_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
