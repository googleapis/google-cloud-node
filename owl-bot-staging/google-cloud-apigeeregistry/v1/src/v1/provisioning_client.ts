// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/provisioning_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './provisioning_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The service that is used for managing the data plane provisioning of the
 *  Registry.
 * @class
 * @memberof v1
 */
export class ProvisioningClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  provisioningStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ProvisioningClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ProvisioningClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ProvisioningClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      apiPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}'
      ),
      apiDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}'
      ),
      apiSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}'
      ),
      apiVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectLocationApiArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/artifacts/{artifact}'
      ),
      projectLocationApiDeploymentArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}/artifacts/{artifact}'
      ),
      projectLocationApiVersionArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/artifacts/{artifact}'
      ),
      projectLocationApiVersionSpecArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}/artifacts/{artifact}'
      ),
      projectLocationArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/artifacts/{artifact}'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1/{resource=projects/*/locations/*/apis/*}:getIamPolicy',additional_bindings: [{get: '/v1/{resource=projects/*/locations/*/apis/*/deployments/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/apis/*/versions/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/artifacts/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/apis/*/artifacts/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/artifacts/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*/artifacts/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/instances/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/runtime}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/*/apis/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/apis/*/deployments/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/artifacts/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/artifacts/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/artifacts/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*/artifacts/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/instances/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/runtime}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/*/apis/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/apis/*/deployments/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/artifacts/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/artifacts/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/artifacts/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/apis/*/versions/*/specs/*/artifacts/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/instances/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/runtime}:testIamPermissions',body: '*',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.apigeeregistry.v1.Instance') as gax.protobuf.Type;
    const createInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigeeregistry.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteInstanceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigeeregistry.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInstanceResponse.decode.bind(createInstanceResponse),
        createInstanceMetadata.decode.bind(createInstanceMetadata)),
      deleteInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInstanceResponse.decode.bind(deleteInstanceResponse),
        deleteInstanceMetadata.decode.bind(deleteInstanceMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.apigeeregistry.v1.Provisioning', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.provisioningStub) {
      return this.provisioningStub;
    }

    // Put together the "service stub" for
    // google.cloud.apigeeregistry.v1.Provisioning.
    this.provisioningStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.apigeeregistry.v1.Provisioning') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.apigeeregistry.v1.Provisioning,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const provisioningStubMethods =
        ['createInstance', 'deleteInstance', 'getInstance'];
    for (const methodName of provisioningStubMethods) {
      const callPromise = this.provisioningStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.provisioningStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'apigeeregistry.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'apigeeregistry.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Instance to retrieve.
 *   Format: `projects/* /locations/* /instances/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.apigeeregistry.v1.Instance|Instance}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/provisioning.get_instance.js</caption>
 * region_tag:apigeeregistry_v1_generated_Provisioning_GetInstance_async
 */
  getInstance(
      request?: protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IInstance,
        protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|undefined, {}|undefined
      ]>;
  getInstance(
      request: protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IInstance,
          protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>): void;
  getInstance(
      request: protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IInstance,
          protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>): void;
  getInstance(
      request?: protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IInstance,
          protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IInstance,
          protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IInstance,
        protos.google.cloud.apigeeregistry.v1.IGetInstanceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }

/**
 * Provisions instance resources for the Registry.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent resource of the Instance, of the form: `projects/* /locations/*`
 * @param {string} request.instanceId
 *   Required. Identifier to assign to the Instance. Must be unique within scope of the
 *   parent resource.
 * @param {google.cloud.apigeeregistry.v1.Instance} request.instance
 *   Required. The Instance.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/provisioning.create_instance.js</caption>
 * region_tag:apigeeregistry_v1_generated_Provisioning_CreateInstance_async
 */
  createInstance(
      request?: protos.google.cloud.apigeeregistry.v1.ICreateInstanceRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createInstance(
      request: protos.google.cloud.apigeeregistry.v1.ICreateInstanceRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createInstance(
      request: protos.google.cloud.apigeeregistry.v1.ICreateInstanceRequest,
      callback: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createInstance(
      request?: protos.google.cloud.apigeeregistry.v1.ICreateInstanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.apigeeregistry.v1.IInstance, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createInstance(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createInstance()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/provisioning.create_instance.js</caption>
 * region_tag:apigeeregistry_v1_generated_Provisioning_CreateInstance_async
 */
  async checkCreateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.apigeeregistry.v1.Instance, protos.google.cloud.apigeeregistry.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createInstance, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.apigeeregistry.v1.Instance, protos.google.cloud.apigeeregistry.v1.OperationMetadata>;
  }
/**
 * Deletes the Registry instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Instance to delete.
 *   Format: `projects/* /locations/* /instances/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/provisioning.delete_instance.js</caption>
 * region_tag:apigeeregistry_v1_generated_Provisioning_DeleteInstance_async
 */
  deleteInstance(
      request?: protos.google.cloud.apigeeregistry.v1.IDeleteInstanceRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteInstance(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteInstanceRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteInstance(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteInstanceRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteInstance(
      request?: protos.google.cloud.apigeeregistry.v1.IDeleteInstanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigeeregistry.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteInstance(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteInstance()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/provisioning.delete_instance.js</caption>
 * region_tag:apigeeregistry_v1_generated_Provisioning_DeleteInstance_async
 */
  async checkDeleteInstanceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.apigeeregistry.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteInstance, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.apigeeregistry.v1.OperationMetadata>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified api resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @returns {string} Resource name string.
   */
  apiPath(project:string,location:string,api:string) {
    return this.pathTemplates.apiPathTemplate.render({
      project: project,
      location: location,
      api: api,
    });
  }

  /**
   * Parse the project from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).project;
  }

  /**
   * Parse the location from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).location;
  }

  /**
   * Parse the api from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).api;
  }

  /**
   * Return a fully-qualified apiDeployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  apiDeploymentPath(project:string,location:string,api:string,deployment:string) {
    return this.pathTemplates.apiDeploymentPathTemplate.render({
      project: project,
      location: location,
      api: api,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).project;
  }

  /**
   * Parse the location from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).location;
  }

  /**
   * Parse the api from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).api;
  }

  /**
   * Parse the deployment from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).deployment;
  }

  /**
   * Return a fully-qualified apiSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} spec
   * @returns {string} Resource name string.
   */
  apiSpecPath(project:string,location:string,api:string,version:string,spec:string) {
    return this.pathTemplates.apiSpecPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      spec: spec,
    });
  }

  /**
   * Parse the project from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).project;
  }

  /**
   * Parse the location from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).location;
  }

  /**
   * Parse the api from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).api;
  }

  /**
   * Parse the version from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).version;
  }

  /**
   * Parse the spec from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the spec.
   */
  matchSpecFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).spec;
  }

  /**
   * Return a fully-qualified apiVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @returns {string} Resource name string.
   */
  apiVersionPath(project:string,location:string,api:string,version:string) {
    return this.pathTemplates.apiVersionPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
    });
  }

  /**
   * Parse the project from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).project;
  }

  /**
   * Parse the location from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).location;
  }

  /**
   * Parse the api from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).api;
  }

  /**
   * Parse the version from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).version;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,instance:string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified projectLocationApiArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiArtifactPath(project:string,location:string,api:string,artifact:string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).api;
  }

  /**
   * Parse the artifact from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiDeploymentArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} deployment
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiDeploymentArtifactPath(project:string,location:string,api:string,deployment:string,artifact:string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      deployment: deployment,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).api;
  }

  /**
   * Parse the deployment from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).deployment;
  }

  /**
   * Parse the artifact from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiVersionArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiVersionArtifactPath(project:string,location:string,api:string,version:string,artifact:string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).api;
  }

  /**
   * Parse the version from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).version;
  }

  /**
   * Parse the artifact from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiVersionSpecArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} spec
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiVersionSpecArtifactPath(project:string,location:string,api:string,version:string,spec:string,artifact:string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      spec: spec,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).api;
  }

  /**
   * Parse the version from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).version;
  }

  /**
   * Parse the spec from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the spec.
   */
  matchSpecFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).spec;
  }

  /**
   * Parse the artifact from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationArtifactPath(project:string,location:string,artifact:string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.render({
      project: project,
      location: location,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).location;
  }

  /**
   * Parse the artifact from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).artifact;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.provisioningStub && !this._terminated) {
      return this.provisioningStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
